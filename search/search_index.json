{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Explore the docs \u00bb</p> <p> </p> <p>Changelog \u00b7 Report Bug \u00b7 Request Feature</p> <p></p>"},{"location":"#features","title":"\u2728 Features","text":"<ul> <li>\ud83e\uddea Experiment Tracking: Seamlessly log parameters, metrics, and artifacts with automatic integration to Comet.ml, DVC, and local storage;</li> <li>\ud83d\udd04 Automated Versioning: Automatic Git commits with detailed metadata including inputs, outputs, and parameters for full experiment reproducibility;</li> <li>\ud83e\udde9 Plugin Architecture: Extensible plugin system with dependency-aware execution order and support for custom integrations;</li> <li>\ud83d\udcca Rich Configuration: Pydantic-based configuration with automatic asset tracking for inputs and outputs using type annotations;</li> <li>\ud83e\udd16 Smart Automation: Automatic detection of experiment directories, asset management, and intelligent logging configuration;</li> <li>\u26a1 Quick Setup: Simple initialization script for DVC configuration and ready-to-use experiment templates;</li> </ul>"},{"location":"#installation","title":"\ud83d\udce6 Installation","text":"<p>To install <code>liblaf-cherries</code>, run the following command:</p> <pre><code>uv add liblaf-cherries\n</code></pre>"},{"location":"#local-development","title":"\u2328\ufe0f Local Development","text":"<p>You can use Github Codespaces for online development:</p> <p></p> <p>Or clone it for local development:</p> <pre><code>gh repo clone liblaf/cherries\ncd cherries\nmise run install\n</code></pre>"},{"location":"#contributing","title":"\ud83e\udd1d Contributing","text":"<p>Contributions of all types are more than welcome, if you are interested in contributing code, feel free to check out our GitHub Issues to get stuck in to show us what you\u2019re made of.</p> <p></p> <p></p>"},{"location":"#more-projects","title":"\ud83d\udd17 More Projects","text":"<ul> <li>\ud83c\udf47 Grapes - Supercharge your Python with rich logging, precise timing, and seamless serialization.</li> <li>\ud83c\udf49 Melon - A comprehensive Python library for 3D mesh processing with advanced I/O capabilities, proximity analysis, and integration with external mesh processing tools.</li> <li>\ud83c\udf4a Tangerine - Squeeze dynamic content into your files with Tangerine\u2019s template magic.</li> <li>\ud83c\udf4b\u200d\ud83d\udfe9 Lime - AI-powered Git commit assistant and repository documentation generator</li> <li>\ud83c\udf4e Apple - A JAX and Warp library for differentiable physics simulation, featuring elastic energy models and finite element methods.</li> <li>\ud83c\udf52 Cherries - Sweet experiment tracking with Comet, DVC, and Git integration.</li> </ul>"},{"location":"#license","title":"\ud83d\udcdd License","text":"<p>Copyright \u00a9 2025 liblaf.  This project is MIT licensed.</p>"},{"location":"reference/liblaf/cherries/","title":"cherries","text":""},{"location":"reference/liblaf/cherries/#liblaf.cherries","title":"liblaf.cherries","text":"<p>Modules:</p> <ul> <li> <code>config</code>           \u2013            </li> <li> <code>core</code>           \u2013            </li> <li> <code>meta</code>           \u2013            </li> <li> <code>path_utils</code>           \u2013            </li> <li> <code>plugins</code>           \u2013            </li> <li> <code>profiles</code>           \u2013            </li> <li> <code>typing</code>           \u2013            </li> <li> <code>utils</code>           \u2013            </li> </ul> <p>Classes:</p> <ul> <li> <code>BaseConfig</code>           \u2013            </li> <li> <code>Plugin</code>           \u2013            </li> <li> <code>Run</code>           \u2013            <p>.</p> </li> </ul> <p>Functions:</p> <ul> <li> <code>as_os_path</code>             \u2013              </li> <li> <code>as_path</code>             \u2013              </li> <li> <code>as_posix</code>             \u2013              </li> <li> <code>data</code>             \u2013              </li> <li> <code>end</code>             \u2013              </li> <li> <code>entrypoint</code>             \u2013              </li> <li> <code>exp_dir</code>             \u2013              </li> <li> <code>input</code>             \u2013              </li> <li> <code>output</code>             \u2013              </li> <li> <code>params</code>             \u2013              </li> <li> <code>path</code>             \u2013              </li> <li> <code>project_dir</code>             \u2013              </li> <li> <code>run</code>             \u2013              </li> <li> <code>src</code>             \u2013              </li> <li> <code>start</code>             \u2013              </li> <li> <code>temporary</code>             \u2013              </li> </ul> <p>Attributes:</p> <ul> <li> <code>__version__</code>               (<code>str</code>)           \u2013            </li> <li> <code>__version_tuple__</code>               (<code>tuple[int | str, ...]</code>)           \u2013            </li> <li> <code>active_run</code>               (<code>Run</code>)           \u2013            </li> <li> <code>log_asset</code>           \u2013            </li> <li> <code>log_input</code>           \u2013            </li> <li> <code>log_metric</code>           \u2013            </li> <li> <code>log_metrics</code>           \u2013            </li> <li> <code>log_other</code>           \u2013            </li> <li> <code>log_others</code>           \u2013            </li> <li> <code>log_output</code>           \u2013            </li> <li> <code>log_parameter</code>           \u2013            </li> <li> <code>log_parameters</code>           \u2013            </li> <li> <code>version</code>               (<code>str</code>)           \u2013            </li> <li> <code>version_tuple</code>               (<code>tuple[int | str, ...]</code>)           \u2013            </li> </ul>"},{"location":"reference/liblaf/cherries/#liblaf.cherries.__version__","title":"__version__  <code>module-attribute</code>","text":"<pre><code>__version__: str = '0.6.3.dev2+g2d7f2f323'\n</code></pre>"},{"location":"reference/liblaf/cherries/#liblaf.cherries.__version_tuple__","title":"__version_tuple__  <code>module-attribute</code>","text":"<pre><code>__version_tuple__: tuple[int | str, ...] = (\n    0,\n    6,\n    3,\n    \"dev2\",\n    \"g2d7f2f323\",\n)\n</code></pre>"},{"location":"reference/liblaf/cherries/#liblaf.cherries.active_run","title":"active_run  <code>module-attribute</code>","text":"<pre><code>active_run: Run = Run()\n</code></pre>"},{"location":"reference/liblaf/cherries/#liblaf.cherries.log_asset","title":"log_asset  <code>module-attribute</code>","text":"<pre><code>log_asset = log_asset\n</code></pre>"},{"location":"reference/liblaf/cherries/#liblaf.cherries.log_input","title":"log_input  <code>module-attribute</code>","text":"<pre><code>log_input = log_input\n</code></pre>"},{"location":"reference/liblaf/cherries/#liblaf.cherries.log_metric","title":"log_metric  <code>module-attribute</code>","text":"<pre><code>log_metric = log_metric\n</code></pre>"},{"location":"reference/liblaf/cherries/#liblaf.cherries.log_metrics","title":"log_metrics  <code>module-attribute</code>","text":"<pre><code>log_metrics = log_metrics\n</code></pre>"},{"location":"reference/liblaf/cherries/#liblaf.cherries.log_other","title":"log_other  <code>module-attribute</code>","text":"<pre><code>log_other = log_other\n</code></pre>"},{"location":"reference/liblaf/cherries/#liblaf.cherries.log_others","title":"log_others  <code>module-attribute</code>","text":"<pre><code>log_others = log_others\n</code></pre>"},{"location":"reference/liblaf/cherries/#liblaf.cherries.log_output","title":"log_output  <code>module-attribute</code>","text":"<pre><code>log_output = log_output\n</code></pre>"},{"location":"reference/liblaf/cherries/#liblaf.cherries.log_parameter","title":"log_parameter  <code>module-attribute</code>","text":"<pre><code>log_parameter = log_parameter\n</code></pre>"},{"location":"reference/liblaf/cherries/#liblaf.cherries.log_parameters","title":"log_parameters  <code>module-attribute</code>","text":"<pre><code>log_parameters = log_parameters\n</code></pre>"},{"location":"reference/liblaf/cherries/#liblaf.cherries.version","title":"version  <code>module-attribute</code>","text":"<pre><code>version: str = '0.6.3.dev2+g2d7f2f323'\n</code></pre>"},{"location":"reference/liblaf/cherries/#liblaf.cherries.version_tuple","title":"version_tuple  <code>module-attribute</code>","text":"<pre><code>version_tuple: tuple[int | str, ...] = (\n    0,\n    6,\n    3,\n    \"dev2\",\n    \"g2d7f2f323\",\n)\n</code></pre>"},{"location":"reference/liblaf/cherries/#liblaf.cherries.BaseConfig","title":"BaseConfig","text":"<p>               Bases: <code>BaseSettings</code></p> <p>Attributes:</p> <ul> <li> <code>model_config</code>           \u2013            </li> </ul>"},{"location":"reference/liblaf/cherries/#liblaf.cherries.BaseConfig.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = SettingsConfigDict()\n</code></pre>"},{"location":"reference/liblaf/cherries/#liblaf.cherries.Plugin","title":"Plugin","text":"<p>Parameters:</p> <ul> <li> <code>plugins</code>               (<code>dict[PluginId, str]</code>, default:                   <code>&lt;class 'dict'&gt;</code> )           \u2013            <p>dict() -&gt; new empty dictionary dict(mapping) -&gt; new dictionary initialized from a mapping object\u2019s     (key, value) pairs dict(iterable) -&gt; new dictionary initialized as if via:     d = {}     for k, v in iterable:         d[k] = v dict(**kwargs) -&gt; new dictionary initialized with the name=value pairs     in the keyword argument list.  For example:  dict(one=1, two=2)</p> </li> </ul> <p>Methods:</p> <ul> <li> <code>delegate</code>             \u2013              </li> <li> <code>register</code>             \u2013              </li> </ul> <p>Attributes:</p> <ul> <li> <code>plugin_id</code>               (<code>str</code>)           \u2013            </li> <li> <code>plugin_root</code>               (<code>Self</code>)           \u2013            </li> <li> <code>plugins</code>               (<code>dict[PluginId, Plugin]</code>)           \u2013            </li> </ul>"},{"location":"reference/liblaf/cherries/#liblaf.cherries.Plugin.plugin_id","title":"plugin_id  <code>property</code>","text":"<pre><code>plugin_id: str\n</code></pre>"},{"location":"reference/liblaf/cherries/#liblaf.cherries.Plugin.plugin_root","title":"plugin_root  <code>property</code>","text":"<pre><code>plugin_root: Self\n</code></pre>"},{"location":"reference/liblaf/cherries/#liblaf.cherries.Plugin.plugins","title":"plugins  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>plugins: dict[PluginId, Plugin] = field(\n    factory=dict, kw_only=True\n)\n</code></pre>"},{"location":"reference/liblaf/cherries/#liblaf.cherries.Plugin.delegate","title":"delegate","text":"<pre><code>delegate(\n    method: MethodName,\n    args: Sequence[Any] = (),\n    kwargs: Mapping[str, Any] = {},\n    *,\n    first_result: bool = False,\n) -&gt; Any\n</code></pre> Source code in <code>src/liblaf/cherries/core/_plugin.py</code> <pre><code>def delegate(\n    self,\n    method: MethodName,\n    args: Sequence[Any] = (),\n    kwargs: Mapping[str, Any] = {},\n    *,\n    first_result: bool = False,\n) -&gt; Any:\n    __tracebackhide__ = True\n    plugins: Sequence[Plugin] = self._plugins_sort(method)\n    if not plugins:\n        if first_result:\n            return None\n        return []\n    results: list[Any] = []\n    for plugin in plugins:\n        try:\n            result: Any = getattr(plugin, method)(*args, **kwargs)\n        except BaseException as e:\n            if isinstance(e, (KeyboardInterrupt, SystemExit)):\n                raise\n            logger.exception(\"Plugin {}\", plugin.plugin_id)\n        else:\n            if result is None:\n                continue\n            if first_result:\n                return result\n            results.append(result)\n    return results\n</code></pre>"},{"location":"reference/liblaf/cherries/#liblaf.cherries.Plugin.register","title":"register","text":"<pre><code>register(plugin: Plugin) -&gt; None\n</code></pre> Source code in <code>src/liblaf/cherries/core/_plugin.py</code> <pre><code>def register(self, plugin: \"Plugin\") -&gt; None:\n    impls: dict[MethodName, ImplInfo] = collect_impls(plugin)\n    for name in impls:\n        self._cache_sort_plugins.pop(name, None)\n    plugin._plugin_parent = self  # noqa: SLF001\n    self.plugins[plugin.plugin_id] = plugin\n</code></pre>"},{"location":"reference/liblaf/cherries/#liblaf.cherries.Run","title":"Run","text":"<p>               Bases: <code>Plugin</code></p> <p>.</p> References <ol> <li>Experiment - Comet Docs</li> <li>Logger | ClearML</li> <li>MLflow Tracking APIs | MLflow</li> </ol> <p>Parameters:</p> <ul> <li> <code>plugins</code>               (<code>dict[PluginId, str]</code>, default:                   <code>&lt;class 'dict'&gt;</code> )           \u2013            <p>dict() -&gt; new empty dictionary dict(mapping) -&gt; new dictionary initialized from a mapping object\u2019s     (key, value) pairs dict(iterable) -&gt; new dictionary initialized as if via:     d = {}     for k, v in iterable:         d[k] = v dict(**kwargs) -&gt; new dictionary initialized with the name=value pairs     in the keyword argument list.  For example:  dict(one=1, two=2)</p> </li> </ul> <p>Methods:</p> <ul> <li> <code>data_dir</code>             \u2013              </li> <li> <code>delegate</code>             \u2013              </li> <li> <code>end</code>             \u2013              </li> <li> <code>entrypoint</code>             \u2013              </li> <li> <code>exp_dir</code>             \u2013              </li> <li> <code>exp_name</code>             \u2013              </li> <li> <code>get_others</code>             \u2013              </li> <li> <code>get_params</code>             \u2013              </li> <li> <code>get_url</code>             \u2013              </li> <li> <code>log_asset</code>             \u2013              </li> <li> <code>log_input</code>             \u2013              </li> <li> <code>log_metric</code>             \u2013              </li> <li> <code>log_metrics</code>             \u2013              </li> <li> <code>log_other</code>             \u2013              </li> <li> <code>log_others</code>             \u2013              </li> <li> <code>log_output</code>             \u2013              </li> <li> <code>log_parameter</code>             \u2013              </li> <li> <code>log_parameters</code>             \u2013              </li> <li> <code>log_temporary</code>             \u2013              </li> <li> <code>params</code>             \u2013              </li> <li> <code>project_dir</code>             \u2013              </li> <li> <code>project_name</code>             \u2013              </li> <li> <code>register</code>             \u2013              </li> <li> <code>start</code>             \u2013              </li> <li> <code>start_time</code>             \u2013              </li> <li> <code>url</code>             \u2013              </li> </ul> <p>Attributes:</p> <ul> <li> <code>plugin_id</code>               (<code>str</code>)           \u2013            </li> <li> <code>plugin_root</code>               (<code>Self</code>)           \u2013            </li> <li> <code>plugins</code>               (<code>dict[PluginId, Plugin]</code>)           \u2013            </li> </ul>"},{"location":"reference/liblaf/cherries/#liblaf.cherries.Run.plugin_id","title":"plugin_id  <code>property</code>","text":"<pre><code>plugin_id: str\n</code></pre>"},{"location":"reference/liblaf/cherries/#liblaf.cherries.Run.plugin_root","title":"plugin_root  <code>property</code>","text":"<pre><code>plugin_root: Self\n</code></pre>"},{"location":"reference/liblaf/cherries/#liblaf.cherries.Run.plugins","title":"plugins  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>plugins: dict[PluginId, Plugin] = field(\n    factory=dict, kw_only=True\n)\n</code></pre>"},{"location":"reference/liblaf/cherries/#liblaf.cherries.Run.data_dir","title":"data_dir","text":"<pre><code>data_dir() -&gt; Path\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@plugin_cached_property\ndef data_dir(self) -&gt; Path:\n    return path_utils.data()\n</code></pre>"},{"location":"reference/liblaf/cherries/#liblaf.cherries.Run.delegate","title":"delegate","text":"<pre><code>delegate(\n    method: MethodName,\n    args: Sequence[Any] = (),\n    kwargs: Mapping[str, Any] = {},\n    *,\n    first_result: bool = False,\n) -&gt; Any\n</code></pre> Source code in <code>src/liblaf/cherries/core/_plugin.py</code> <pre><code>def delegate(\n    self,\n    method: MethodName,\n    args: Sequence[Any] = (),\n    kwargs: Mapping[str, Any] = {},\n    *,\n    first_result: bool = False,\n) -&gt; Any:\n    __tracebackhide__ = True\n    plugins: Sequence[Plugin] = self._plugins_sort(method)\n    if not plugins:\n        if first_result:\n            return None\n        return []\n    results: list[Any] = []\n    for plugin in plugins:\n        try:\n            result: Any = getattr(plugin, method)(*args, **kwargs)\n        except BaseException as e:\n            if isinstance(e, (KeyboardInterrupt, SystemExit)):\n                raise\n            logger.exception(\"Plugin {}\", plugin.plugin_id)\n        else:\n            if result is None:\n                continue\n            if first_result:\n                return result\n            results.append(result)\n    return results\n</code></pre>"},{"location":"reference/liblaf/cherries/#liblaf.cherries.Run.end","title":"end","text":"<pre><code>end(*args, **kwargs) -&gt; None\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@spec\ndef end(self, *args, **kwargs) -&gt; None: ...\n</code></pre>"},{"location":"reference/liblaf/cherries/#liblaf.cherries.Run.entrypoint","title":"entrypoint","text":"<pre><code>entrypoint() -&gt; Path\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@plugin_cached_property\ndef entrypoint(self) -&gt; Path:\n    return path_utils.entrypoint()\n</code></pre>"},{"location":"reference/liblaf/cherries/#liblaf.cherries.Run.exp_dir","title":"exp_dir","text":"<pre><code>exp_dir() -&gt; Path\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@plugin_cached_property\ndef exp_dir(self) -&gt; Path:\n    return path_utils.exp_dir()\n</code></pre>"},{"location":"reference/liblaf/cherries/#liblaf.cherries.Run.exp_name","title":"exp_name","text":"<pre><code>exp_name() -&gt; str\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@plugin_cached_property\ndef exp_name(self) -&gt; str:\n    return (\n        self.entrypoint.relative_to(self.project_dir)\n        .as_posix()\n        .removeprefix(\"exp/\")\n    )\n</code></pre>"},{"location":"reference/liblaf/cherries/#liblaf.cherries.Run.get_others","title":"get_others","text":"<pre><code>get_others() -&gt; Mapping[str, Any]\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@spec(first_result=True)\ndef get_others(self) -&gt; Mapping[str, Any]: ...\n</code></pre>"},{"location":"reference/liblaf/cherries/#liblaf.cherries.Run.get_params","title":"get_params","text":"<pre><code>get_params() -&gt; Mapping[str, Any]\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@spec(first_result=True)\ndef get_params(self) -&gt; Mapping[str, Any]: ...\n</code></pre>"},{"location":"reference/liblaf/cherries/#liblaf.cherries.Run.get_url","title":"get_url","text":"<pre><code>get_url() -&gt; str\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@spec(first_result=True)\ndef get_url(self) -&gt; str: ...\n</code></pre>"},{"location":"reference/liblaf/cherries/#liblaf.cherries.Run.log_asset","title":"log_asset","text":"<pre><code>log_asset(\n    path: PathLike,\n    name: PathLike | None = None,\n    *,\n    metadata: Mapping[str, Any] | None = None,\n    **kwargs,\n) -&gt; None\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@spec\ndef log_asset(\n    self,\n    path: PathLike,\n    name: PathLike | None = None,\n    *,\n    metadata: Mapping[str, Any] | None = None,\n    **kwargs,\n) -&gt; None: ...\n</code></pre>"},{"location":"reference/liblaf/cherries/#liblaf.cherries.Run.log_input","title":"log_input","text":"<pre><code>log_input(\n    path: PathLike,\n    name: PathLike | None = None,\n    *,\n    metadata: Mapping[str, Any] | None = None,\n    **kwargs,\n) -&gt; None\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@spec\ndef log_input(\n    self,\n    path: PathLike,\n    name: PathLike | None = None,\n    *,\n    metadata: Mapping[str, Any] | None = None,\n    **kwargs,\n) -&gt; None: ...\n</code></pre>"},{"location":"reference/liblaf/cherries/#liblaf.cherries.Run.log_metric","title":"log_metric","text":"<pre><code>log_metric(\n    name: str,\n    value: Any,\n    /,\n    step: int | None = None,\n    epoch: int | None = None,\n    **kwargs,\n) -&gt; None\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@spec\ndef log_metric(\n    self,\n    name: str,\n    value: Any,\n    /,\n    step: int | None = None,\n    epoch: int | None = None,\n    **kwargs,\n) -&gt; None: ...\n</code></pre>"},{"location":"reference/liblaf/cherries/#liblaf.cherries.Run.log_metrics","title":"log_metrics","text":"<pre><code>log_metrics(\n    dic: Mapping[str, Any],\n    /,\n    prefix: str | None = None,\n    step: int | None = None,\n    epoch: int | None = None,\n    **kwargs,\n) -&gt; None\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@spec\ndef log_metrics(\n    self,\n    dic: Mapping[str, Any],\n    /,\n    prefix: str | None = None,\n    step: int | None = None,\n    epoch: int | None = None,\n    **kwargs,\n) -&gt; None: ...\n</code></pre>"},{"location":"reference/liblaf/cherries/#liblaf.cherries.Run.log_other","title":"log_other","text":"<pre><code>log_other(key: Any, value: Any, /, **kwargs) -&gt; None\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@spec\ndef log_other(self, key: Any, value: Any, /, **kwargs) -&gt; None: ...\n</code></pre>"},{"location":"reference/liblaf/cherries/#liblaf.cherries.Run.log_others","title":"log_others","text":"<pre><code>log_others(\n    dictionary: Mapping[Any, Any], /, **kwargs\n) -&gt; None\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@spec\ndef log_others(self, dictionary: Mapping[Any, Any], /, **kwargs) -&gt; None: ...\n</code></pre>"},{"location":"reference/liblaf/cherries/#liblaf.cherries.Run.log_output","title":"log_output","text":"<pre><code>log_output(\n    path: PathLike,\n    name: PathLike | None = None,\n    *,\n    metadata: Mapping[str, Any] | None = None,\n    **kwargs,\n) -&gt; None\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@spec\ndef log_output(\n    self,\n    path: PathLike,\n    name: PathLike | None = None,\n    *,\n    metadata: Mapping[str, Any] | None = None,\n    **kwargs,\n) -&gt; None: ...\n</code></pre>"},{"location":"reference/liblaf/cherries/#liblaf.cherries.Run.log_parameter","title":"log_parameter","text":"<pre><code>log_parameter(\n    name: Any,\n    value: Any,\n    /,\n    step: int | None = None,\n    **kwargs,\n) -&gt; None\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@spec\ndef log_parameter(\n    self, name: Any, value: Any, /, step: int | None = None, **kwargs\n) -&gt; None: ...\n</code></pre>"},{"location":"reference/liblaf/cherries/#liblaf.cherries.Run.log_parameters","title":"log_parameters","text":"<pre><code>log_parameters(\n    parameters: Mapping[Any, Any],\n    /,\n    prefix: str | None = None,\n    step: int | None = None,\n    **kwargs,\n) -&gt; None\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@spec\ndef log_parameters(\n    self,\n    parameters: Mapping[Any, Any],\n    /,\n    prefix: str | None = None,\n    step: int | None = None,\n    **kwargs,\n) -&gt; None: ...\n</code></pre>"},{"location":"reference/liblaf/cherries/#liblaf.cherries.Run.log_temporary","title":"log_temporary","text":"<pre><code>log_temporary(\n    path: PathLike,\n    name: PathLike | None = None,\n    *,\n    metadata: Mapping[str, Any] | None = None,\n    **kwargs,\n) -&gt; None\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@spec\ndef log_temporary(\n    self,\n    path: PathLike,\n    name: PathLike | None = None,\n    *,\n    metadata: Mapping[str, Any] | None = None,\n    **kwargs,\n) -&gt; None: ...\n</code></pre>"},{"location":"reference/liblaf/cherries/#liblaf.cherries.Run.params","title":"params","text":"<pre><code>params() -&gt; Mapping[str, Any]\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@plugin_property\ndef params(self) -&gt; Mapping[str, Any]:\n    return self.plugin_root.get_params()\n</code></pre>"},{"location":"reference/liblaf/cherries/#liblaf.cherries.Run.project_dir","title":"project_dir","text":"<pre><code>project_dir() -&gt; Path\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@plugin_cached_property\ndef project_dir(self) -&gt; Path:\n    return path_utils.project_dir()\n</code></pre>"},{"location":"reference/liblaf/cherries/#liblaf.cherries.Run.project_name","title":"project_name","text":"<pre><code>project_name() -&gt; str | None\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@plugin_cached_property\ndef project_name(self) -&gt; str | None:\n    return self.project_dir.name\n</code></pre>"},{"location":"reference/liblaf/cherries/#liblaf.cherries.Run.register","title":"register","text":"<pre><code>register(plugin: Plugin) -&gt; None\n</code></pre> Source code in <code>src/liblaf/cherries/core/_plugin.py</code> <pre><code>def register(self, plugin: \"Plugin\") -&gt; None:\n    impls: dict[MethodName, ImplInfo] = collect_impls(plugin)\n    for name in impls:\n        self._cache_sort_plugins.pop(name, None)\n    plugin._plugin_parent = self  # noqa: SLF001\n    self.plugins[plugin.plugin_id] = plugin\n</code></pre>"},{"location":"reference/liblaf/cherries/#liblaf.cherries.Run.start","title":"start","text":"<pre><code>start(*args, **kwargs) -&gt; None\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@spec(delegate=False)\ndef start(self, *args, **kwargs) -&gt; None:\n    env.read_env(self.entrypoint.parent / \".env\")\n    return self.delegate(\"start\", args, kwargs)\n</code></pre>"},{"location":"reference/liblaf/cherries/#liblaf.cherries.Run.start_time","title":"start_time","text":"<pre><code>start_time() -&gt; datetime\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@plugin_cached_property\ndef start_time(self) -&gt; datetime.datetime:\n    return datetime.datetime.now().astimezone()\n</code></pre>"},{"location":"reference/liblaf/cherries/#liblaf.cherries.Run.url","title":"url","text":"<pre><code>url() -&gt; str\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@plugin_property\ndef url(self) -&gt; str:\n    return self.plugin_root.get_url()\n</code></pre>"},{"location":"reference/liblaf/cherries/#liblaf.cherries.as_os_path","title":"as_os_path","text":"<pre><code>as_os_path(path: PathLike) -&gt; str\n</code></pre><pre><code>as_os_path(path: None) -&gt; None\n</code></pre> <pre><code>as_os_path(path: PathLike | None) -&gt; str | None\n</code></pre> Source code in <code>src/liblaf/cherries/path_utils/_convert.py</code> <pre><code>def as_os_path(path: PathLike | None) -&gt; str | None:\n    if path is None:\n        return None\n    return str(path)\n</code></pre>"},{"location":"reference/liblaf/cherries/#liblaf.cherries.as_path","title":"as_path","text":"<pre><code>as_path(path: PathLike) -&gt; Path\n</code></pre><pre><code>as_path(path: None) -&gt; None\n</code></pre> <pre><code>as_path(path: PathLike | None) -&gt; Path | None\n</code></pre> Source code in <code>src/liblaf/cherries/path_utils/_convert.py</code> <pre><code>def as_path(path: PathLike | None) -&gt; Path | None:\n    if path is None:\n        return None\n    return Path(path)\n</code></pre>"},{"location":"reference/liblaf/cherries/#liblaf.cherries.as_posix","title":"as_posix","text":"<pre><code>as_posix(path: PathLike) -&gt; str\n</code></pre><pre><code>as_posix(path: None) -&gt; None\n</code></pre> <pre><code>as_posix(path: PathLike | None) -&gt; str | None\n</code></pre> Source code in <code>src/liblaf/cherries/path_utils/_convert.py</code> <pre><code>def as_posix(path: PathLike | None) -&gt; str | None:\n    if path is None:\n        return None\n    if isinstance(path, str):\n        return path\n    return Path(path).as_posix()\n</code></pre>"},{"location":"reference/liblaf/cherries/#liblaf.cherries.data","title":"data","text":"<pre><code>data(\n    path: PathLike = \"\",\n    *,\n    mkdir: bool = True,\n    prefix: PathLike = \"data\",\n) -&gt; Path\n</code></pre> Source code in <code>src/liblaf/cherries/path_utils/_special.py</code> <pre><code>def data(path: PathLike = \"\", *, mkdir: bool = True, prefix: PathLike = \"data\") -&gt; Path:\n    return _path(path, mkdir=mkdir, prefix=prefix)\n</code></pre>"},{"location":"reference/liblaf/cherries/#liblaf.cherries.end","title":"end","text":"<pre><code>end(*args, **kwargs) -&gt; None\n</code></pre> Source code in <code>src/liblaf/cherries/_entrypoint.py</code> <pre><code>def end(*args, **kwargs) -&gt; None:\n    core.active_run.log_other(\"cherries.end_time\", datetime.datetime.now().astimezone())\n    core.active_run.end(*args, **kwargs)\n</code></pre>"},{"location":"reference/liblaf/cherries/#liblaf.cherries.entrypoint","title":"entrypoint","text":"<pre><code>entrypoint(*, absolute: bool = True) -&gt; Path\n</code></pre> Source code in <code>src/liblaf/cherries/path_utils/_path.py</code> <pre><code>@utils.cache\ndef entrypoint(*, absolute: bool = True) -&gt; Path:\n    path = Path(sys.argv[0])\n    if absolute:\n        return path.absolute()\n    return path.relative_to(project_dir())\n</code></pre>"},{"location":"reference/liblaf/cherries/#liblaf.cherries.exp_dir","title":"exp_dir","text":"<pre><code>exp_dir(*, absolute: bool = True) -&gt; Path\n</code></pre> Source code in <code>src/liblaf/cherries/path_utils/_path.py</code> <pre><code>@utils.cache\ndef exp_dir(*, absolute: bool = True) -&gt; Path:\n    entrypoint_: Path = entrypoint(absolute=True)\n    parent: Path = entrypoint_.parent\n    exp_dir: Path\n    exp_dir = parent.parent if parent.name in EXP_DIR_NAMES else parent\n    if absolute:\n        return exp_dir\n    exp_dir = exp_dir.relative_to(project_dir())\n    return exp_dir\n</code></pre>"},{"location":"reference/liblaf/cherries/#liblaf.cherries.input","title":"input","text":"<pre><code>input(\n    path: PathLike, extra: Extra = None, **kwargs\n) -&gt; Path\n</code></pre> Source code in <code>src/liblaf/cherries/config/asset/_meta.py</code> <pre><code>def input(path: PathLike, extra: Extra = None, **kwargs) -&gt; Path:  # noqa: A001\n    return asset(path, extra=extra, kind=AssetKind.INPUT, **kwargs)\n</code></pre>"},{"location":"reference/liblaf/cherries/#liblaf.cherries.output","title":"output","text":"<pre><code>output(\n    path: PathLike, extra: Extra = None, **kwargs\n) -&gt; Path\n</code></pre> Source code in <code>src/liblaf/cherries/config/asset/_meta.py</code> <pre><code>def output(path: PathLike, extra: Extra = None, **kwargs) -&gt; Path:\n    return asset(path, extra=extra, kind=AssetKind.OUTPUT, **kwargs)\n</code></pre>"},{"location":"reference/liblaf/cherries/#liblaf.cherries.params","title":"params","text":"<pre><code>params(\n    path: PathLike = \"\",\n    *,\n    mkdir: bool = True,\n    prefix: PathLike = \"params\",\n) -&gt; Path\n</code></pre> Source code in <code>src/liblaf/cherries/path_utils/_special.py</code> <pre><code>def params(\n    path: PathLike = \"\", *, mkdir: bool = True, prefix: PathLike = \"params\"\n) -&gt; Path:\n    return _path(path, mkdir=mkdir, prefix=prefix)\n</code></pre>"},{"location":"reference/liblaf/cherries/#liblaf.cherries.path","title":"path","text":"<pre><code>path(\n    path: PathLike = \"\",\n    *,\n    mkdir: bool = True,\n    prefix: PathLike = \"\",\n) -&gt; Path\n</code></pre> Source code in <code>src/liblaf/cherries/path_utils/_special.py</code> <pre><code>def path(path: PathLike = \"\", *, mkdir: bool = True, prefix: PathLike = \"\") -&gt; Path:\n    return _path(path, mkdir=mkdir, prefix=prefix)\n</code></pre>"},{"location":"reference/liblaf/cherries/#liblaf.cherries.project_dir","title":"project_dir","text":"<pre><code>project_dir() -&gt; Path\n</code></pre> Source code in <code>src/liblaf/cherries/path_utils/_path.py</code> <pre><code>@utils.cache\ndef project_dir() -&gt; Path:\n    exp_dir_: Path = exp_dir(absolute=True)\n    try:\n        repo = git.Repo(exp_dir_, search_parent_directories=True)\n    except git.exc.InvalidGitRepositoryError:\n        logger.warning(\"Not in a git repository, using current directory\", once=True)\n        return exp_dir_\n    else:\n        return Path(repo.working_dir)\n</code></pre>"},{"location":"reference/liblaf/cherries/#liblaf.cherries.run","title":"run","text":"<pre><code>run(\n    main: Callable[..., T],\n    *,\n    profile: ProfileLike | None = None,\n) -&gt; T\n</code></pre> Source code in <code>src/liblaf/cherries/_entrypoint.py</code> <pre><code>def run[T](main: Callable[..., T], *, profile: profiles.ProfileLike | None = None) -&gt; T:\n    run: core.Run = start(profile=profile)\n    args: Sequence[Any]\n    kwargs: Mapping[str, Any]\n    args, kwargs = _make_args(main)\n    configs: list[pydantic.BaseModel] = [\n        arg\n        for arg in itertools.chain(args, *kwargs.values())\n        if isinstance(arg, pydantic.BaseModel)\n    ]\n    for config in configs:\n        run.log_parameters(_config.model_dump_without_assets(config, mode=\"json\"))\n        for path in _config.get_inputs(config):\n            run.log_input(path)\n    try:\n        return main(*args, **kwargs)\n    finally:\n        for config in configs:\n            for path in _config.get_outputs(config):\n                run.log_output(path)\n            for path in _config.get_temporaries(config):\n                run.log_temporary(path)\n        run.end()\n</code></pre>"},{"location":"reference/liblaf/cherries/#liblaf.cherries.src","title":"src","text":"<pre><code>src(\n    path: PathLike = \"\",\n    *,\n    mkdir: bool = True,\n    prefix: PathLike = \"src\",\n) -&gt; Path\n</code></pre> Source code in <code>src/liblaf/cherries/path_utils/_special.py</code> <pre><code>def src(path: PathLike = \"\", *, mkdir: bool = True, prefix: PathLike = \"src\") -&gt; Path:\n    return _path(path, mkdir=mkdir, prefix=prefix)\n</code></pre>"},{"location":"reference/liblaf/cherries/#liblaf.cherries.start","title":"start","text":"<pre><code>start(profile: ProfileLike | None = None) -&gt; Run\n</code></pre> Source code in <code>src/liblaf/cherries/_entrypoint.py</code> <pre><code>def start(\n    profile: profiles.ProfileLike | None = None,\n) -&gt; core.Run:\n    run: core.Run = profiles.factory(profile).init()\n    run.start()\n    run.log_other(\"cherries.entrypoint\", run.entrypoint.relative_to(run.project_dir))\n    run.log_other(\"cherries.exp_dir\", run.exp_dir.relative_to(run.project_dir))\n    run.log_other(\"cherries.start_time\", run.start_time)\n    return run\n</code></pre>"},{"location":"reference/liblaf/cherries/#liblaf.cherries.temporary","title":"temporary","text":"<pre><code>temporary(\n    path: PathLike, extra: Extra = None, **kwargs\n) -&gt; Path\n</code></pre> Source code in <code>src/liblaf/cherries/config/asset/_meta.py</code> <pre><code>def temporary(path: PathLike, extra: Extra = None, **kwargs) -&gt; Path:\n    return asset(path, extra=extra, kind=AssetKind.TEMPORARY, **kwargs)\n</code></pre>"},{"location":"reference/liblaf/cherries/config/","title":"config","text":""},{"location":"reference/liblaf/cherries/config/#liblaf.cherries.config","title":"liblaf.cherries.config","text":"<p>Modules:</p> <ul> <li> <code>asset</code>           \u2013            </li> </ul> <p>Type Aliases:</p> <ul> <li> <code>Extra</code>           \u2013            </li> </ul> <p>Classes:</p> <ul> <li> <code>AssetKind</code>           \u2013            </li> <li> <code>AssetResolver</code>           \u2013            </li> <li> <code>AssetResolverRegistry</code>           \u2013            </li> <li> <code>AssetResolverSeries</code>           \u2013            </li> <li> <code>AssetResolverVtk</code>           \u2013            </li> <li> <code>BaseConfig</code>           \u2013            </li> <li> <code>MetaAsset</code>           \u2013            </li> </ul> <p>Functions:</p> <ul> <li> <code>get_assets</code>             \u2013              </li> <li> <code>get_inputs</code>             \u2013              </li> <li> <code>get_outputs</code>             \u2013              </li> <li> <code>get_temporaries</code>             \u2013              </li> <li> <code>input</code>             \u2013              </li> <li> <code>model_dump_without_assets</code>             \u2013              </li> <li> <code>output</code>             \u2013              </li> <li> <code>temporary</code>             \u2013              </li> </ul> <p>Attributes:</p> <ul> <li> <code>asset_resolver_registry</code>               (<code>AssetResolverRegistry</code>)           \u2013            </li> </ul>"},{"location":"reference/liblaf/cherries/config/#liblaf.cherries.config.asset_resolver_registry","title":"asset_resolver_registry  <code>module-attribute</code>","text":"<pre><code>asset_resolver_registry: AssetResolverRegistry = (\n    AssetResolverRegistry()\n)\n</code></pre>"},{"location":"reference/liblaf/cherries/config/#liblaf.cherries.config.Extra","title":"Extra","text":"<pre><code>Extra = (\n    PathLike\n    | Iterable[PathLike]\n    | Callable[\n        [PathLike],\n        PathLike | Iterable[PathLike | None] | None,\n    ]\n    | None\n)\n</code></pre>"},{"location":"reference/liblaf/cherries/config/#liblaf.cherries.config.AssetKind","title":"AssetKind","text":"<p>               Bases: <code>StrEnum</code></p> <p>Attributes:</p> <ul> <li> <code>INPUT</code>           \u2013            </li> <li> <code>OUTPUT</code>           \u2013            </li> <li> <code>TEMPORARY</code>           \u2013            </li> </ul>"},{"location":"reference/liblaf/cherries/config/#liblaf.cherries.config.AssetKind.INPUT","title":"INPUT  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>INPUT = auto()\n</code></pre>"},{"location":"reference/liblaf/cherries/config/#liblaf.cherries.config.AssetKind.OUTPUT","title":"OUTPUT  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>OUTPUT = auto()\n</code></pre>"},{"location":"reference/liblaf/cherries/config/#liblaf.cherries.config.AssetKind.TEMPORARY","title":"TEMPORARY  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>TEMPORARY = auto()\n</code></pre>"},{"location":"reference/liblaf/cherries/config/#liblaf.cherries.config.AssetResolver","title":"AssetResolver","text":"<p>Methods:</p> <ul> <li> <code>match</code>             \u2013              </li> <li> <code>resolve</code>             \u2013              </li> </ul> <p>Attributes:</p> <ul> <li> <code>id</code>               (<code>str</code>)           \u2013            </li> </ul>"},{"location":"reference/liblaf/cherries/config/#liblaf.cherries.config.AssetResolver.id","title":"id  <code>property</code>","text":"<pre><code>id: str\n</code></pre>"},{"location":"reference/liblaf/cherries/config/#liblaf.cherries.config.AssetResolver.match","title":"match  <code>abstractmethod</code>","text":"<pre><code>match(path: Path) -&gt; bool\n</code></pre> Source code in <code>src/liblaf/cherries/config/asset/resolvers/_abc.py</code> <pre><code>@abc.abstractmethod\ndef match(self, path: Path) -&gt; bool:\n    raise NotImplementedError\n</code></pre>"},{"location":"reference/liblaf/cherries/config/#liblaf.cherries.config.AssetResolver.resolve","title":"resolve  <code>abstractmethod</code>","text":"<pre><code>resolve(path: Path) -&gt; Iterable[Path]\n</code></pre> Source code in <code>src/liblaf/cherries/config/asset/resolvers/_abc.py</code> <pre><code>@abc.abstractmethod\ndef resolve(self, path: Path) -&gt; Iterable[Path]:\n    raise NotImplementedError\n</code></pre>"},{"location":"reference/liblaf/cherries/config/#liblaf.cherries.config.AssetResolverRegistry","title":"AssetResolverRegistry","text":"<p>Methods:</p> <ul> <li> <code>register</code>             \u2013              </li> <li> <code>resolve</code>             \u2013              </li> </ul>"},{"location":"reference/liblaf/cherries/config/#liblaf.cherries.config.AssetResolverRegistry.register","title":"register","text":"<pre><code>register(resolver: AssetResolver) -&gt; None\n</code></pre> Source code in <code>src/liblaf/cherries/config/asset/_registry.py</code> <pre><code>def register(self, resolver: AssetResolver) -&gt; None:\n    self._registry[resolver.id] = resolver\n</code></pre>"},{"location":"reference/liblaf/cherries/config/#liblaf.cherries.config.AssetResolverRegistry.resolve","title":"resolve","text":"<pre><code>resolve(path: Path) -&gt; Generator[Path]\n</code></pre> Source code in <code>src/liblaf/cherries/config/asset/_registry.py</code> <pre><code>def resolve(self, path: Path) -&gt; Generator[Path]:\n    for resolver in self._registry.values():\n        if not resolver.match(path):\n            continue\n        yield from resolver.resolve(path)\n</code></pre>"},{"location":"reference/liblaf/cherries/config/#liblaf.cherries.config.AssetResolverSeries","title":"AssetResolverSeries","text":"<p>               Bases: <code>AssetResolver</code></p> <p>Methods:</p> <ul> <li> <code>match</code>             \u2013              </li> <li> <code>resolve</code>             \u2013              </li> </ul> <p>Attributes:</p> <ul> <li> <code>id</code>               (<code>str</code>)           \u2013            </li> </ul>"},{"location":"reference/liblaf/cherries/config/#liblaf.cherries.config.AssetResolverSeries.id","title":"id  <code>property</code>","text":"<pre><code>id: str\n</code></pre>"},{"location":"reference/liblaf/cherries/config/#liblaf.cherries.config.AssetResolverSeries.match","title":"match","text":"<pre><code>match(path: Path) -&gt; bool\n</code></pre> Source code in <code>src/liblaf/cherries/config/asset/resolvers/_series.py</code> <pre><code>@override\ndef match(self, path: Path) -&gt; bool:\n    return path.suffix == \".series\"\n</code></pre>"},{"location":"reference/liblaf/cherries/config/#liblaf.cherries.config.AssetResolverSeries.resolve","title":"resolve","text":"<pre><code>resolve(path: Path) -&gt; Generator[Path]\n</code></pre> Source code in <code>src/liblaf/cherries/config/asset/resolvers/_series.py</code> <pre><code>@override\ndef resolve(self, path: Path) -&gt; Generator[Path]:\n    if (folder := path.with_suffix(\".d\")).exists():\n        yield folder\n    if (folder := path.with_suffix(\"\")).exists():\n        yield folder\n</code></pre>"},{"location":"reference/liblaf/cherries/config/#liblaf.cherries.config.AssetResolverVtk","title":"AssetResolverVtk","text":"<p>               Bases: <code>AssetResolver</code></p> <p>Parameters:</p> <ul> <li> <code>SUFFIXES</code>               (<code>set[str]</code>, default:                   <code>{'.vti', '.stl', '.vtk', '.vtr', '.vtp', '.vts', '.vtu', '.ply', '.obj'}</code> )           \u2013            </li> </ul> <p>Methods:</p> <ul> <li> <code>match</code>             \u2013              </li> <li> <code>resolve</code>             \u2013              </li> </ul> <p>Attributes:</p> <ul> <li> <code>SUFFIXES</code>               (<code>set[str]</code>)           \u2013            </li> <li> <code>id</code>               (<code>str</code>)           \u2013            </li> </ul>"},{"location":"reference/liblaf/cherries/config/#liblaf.cherries.config.AssetResolverVtk.SUFFIXES","title":"SUFFIXES  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>SUFFIXES: set[str] = field(\n    factory=lambda: {\n        \".obj\",\n        \".ply\",\n        \".stl\",\n        \".vti\",\n        \".vtk\",\n        \".vtp\",\n        \".vtr\",\n        \".vts\",\n        \".vtu\",\n    }\n)\n</code></pre>"},{"location":"reference/liblaf/cherries/config/#liblaf.cherries.config.AssetResolverVtk.id","title":"id  <code>property</code>","text":"<pre><code>id: str\n</code></pre>"},{"location":"reference/liblaf/cherries/config/#liblaf.cherries.config.AssetResolverVtk.match","title":"match","text":"<pre><code>match(path: Path) -&gt; bool\n</code></pre> Source code in <code>src/liblaf/cherries/config/asset/resolvers/_vtk.py</code> <pre><code>@override\ndef match(self, path: Path) -&gt; bool:\n    return path.suffix in self.SUFFIXES\n</code></pre>"},{"location":"reference/liblaf/cherries/config/#liblaf.cherries.config.AssetResolverVtk.resolve","title":"resolve","text":"<pre><code>resolve(path: Path) -&gt; Generator[Path]\n</code></pre> Source code in <code>src/liblaf/cherries/config/asset/resolvers/_vtk.py</code> <pre><code>@override\ndef resolve(self, path: Path) -&gt; Generator[Path]:\n    if (landmarks := path.with_suffix(\".landmarks.json\")).exists():\n        yield landmarks\n</code></pre>"},{"location":"reference/liblaf/cherries/config/#liblaf.cherries.config.BaseConfig","title":"BaseConfig","text":"<p>               Bases: <code>BaseSettings</code></p> <p>Attributes:</p> <ul> <li> <code>model_config</code>           \u2013            </li> </ul>"},{"location":"reference/liblaf/cherries/config/#liblaf.cherries.config.BaseConfig.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = SettingsConfigDict()\n</code></pre>"},{"location":"reference/liblaf/cherries/config/#liblaf.cherries.config.MetaAsset","title":"MetaAsset","text":"<p>Parameters:</p> <ul> <li> <code>kind</code>               (<code>AssetKind</code>)           \u2013            </li> <li> <code>extra</code>               (<code>Extra</code>, default:                   <code>None</code> )           \u2013            </li> </ul> <p>Methods:</p> <ul> <li> <code>resolve</code>             \u2013              </li> </ul> <p>Attributes:</p> <ul> <li> <code>extra</code>               (<code>Extra</code>)           \u2013            </li> <li> <code>kind</code>               (<code>AssetKind</code>)           \u2013            </li> </ul>"},{"location":"reference/liblaf/cherries/config/#liblaf.cherries.config.MetaAsset.extra","title":"extra  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra: Extra = None\n</code></pre>"},{"location":"reference/liblaf/cherries/config/#liblaf.cherries.config.MetaAsset.kind","title":"kind  <code>instance-attribute</code>","text":"<pre><code>kind: AssetKind\n</code></pre>"},{"location":"reference/liblaf/cherries/config/#liblaf.cherries.config.MetaAsset.resolve","title":"resolve","text":"<pre><code>resolve(value: Path) -&gt; Generator[Path]\n</code></pre> Source code in <code>src/liblaf/cherries/config/asset/_meta.py</code> <pre><code>def resolve(self, value: Path) -&gt; Generator[Path]:\n    if self.extra is None:\n        yield from asset_resolver_registry.resolve(value)\n        return\n    extra: PathLike | Iterable[PathLike | None] | None = (\n        self.extra(value) if callable(self.extra) else self.extra  # noqa: S610\n    )\n    for p in grapes.as_iterable(extra, base_type=(str, bytes, os.PathLike)):\n        if p is None:\n            continue\n        yield Path(p)\n</code></pre>"},{"location":"reference/liblaf/cherries/config/#liblaf.cherries.config.get_assets","title":"get_assets","text":"<pre><code>get_assets(\n    cfg: BaseModel, kind: AssetKind\n) -&gt; Generator[Path]\n</code></pre> Source code in <code>src/liblaf/cherries/config/asset/_meta.py</code> <pre><code>def get_assets(cfg: pydantic.BaseModel, kind: AssetKind) -&gt; Generator[Path]:\n    for name, info in type(cfg).model_fields.items():\n        value: Any = getattr(cfg, name)\n        if isinstance(value, pydantic.BaseModel):\n            yield from get_assets(value, kind)\n        for meta in info.metadata:\n            if isinstance(meta, MetaAsset) and meta.kind == kind:\n                value: Path = Path(value)\n                yield value\n                yield from meta.resolve(value)\n</code></pre>"},{"location":"reference/liblaf/cherries/config/#liblaf.cherries.config.get_inputs","title":"get_inputs","text":"<pre><code>get_inputs(cfg: BaseModel) -&gt; Generator[Path]\n</code></pre> Source code in <code>src/liblaf/cherries/config/asset/_meta.py</code> <pre><code>def get_inputs(cfg: pydantic.BaseModel) -&gt; Generator[Path]:\n    yield from get_assets(cfg, AssetKind.INPUT)\n</code></pre>"},{"location":"reference/liblaf/cherries/config/#liblaf.cherries.config.get_outputs","title":"get_outputs","text":"<pre><code>get_outputs(cfg: BaseModel) -&gt; Generator[Path]\n</code></pre> Source code in <code>src/liblaf/cherries/config/asset/_meta.py</code> <pre><code>def get_outputs(cfg: pydantic.BaseModel) -&gt; Generator[Path]:\n    yield from get_assets(cfg, AssetKind.OUTPUT)\n</code></pre>"},{"location":"reference/liblaf/cherries/config/#liblaf.cherries.config.get_temporaries","title":"get_temporaries","text":"<pre><code>get_temporaries(cfg: BaseModel) -&gt; Generator[Path]\n</code></pre> Source code in <code>src/liblaf/cherries/config/asset/_meta.py</code> <pre><code>def get_temporaries(cfg: pydantic.BaseModel) -&gt; Generator[Path]:\n    yield from get_assets(cfg, AssetKind.TEMPORARY)\n</code></pre>"},{"location":"reference/liblaf/cherries/config/#liblaf.cherries.config.input","title":"input","text":"<pre><code>input(\n    path: PathLike, extra: Extra = None, **kwargs\n) -&gt; Path\n</code></pre> Source code in <code>src/liblaf/cherries/config/asset/_meta.py</code> <pre><code>def input(path: PathLike, extra: Extra = None, **kwargs) -&gt; Path:  # noqa: A001\n    return asset(path, extra=extra, kind=AssetKind.INPUT, **kwargs)\n</code></pre>"},{"location":"reference/liblaf/cherries/config/#liblaf.cherries.config.model_dump_without_assets","title":"model_dump_without_assets","text":"<pre><code>model_dump_without_assets(\n    model: BaseModel,\n    *,\n    mode: str | Literal[\"json\", \"python\"] = \"json\",\n    **kwargs,\n) -&gt; dict[str, Any]\n</code></pre> Source code in <code>src/liblaf/cherries/config/asset/_meta.py</code> <pre><code>def model_dump_without_assets(\n    model: pydantic.BaseModel,\n    *,\n    mode: str | Literal[\"json\", \"python\"] = \"json\",  # noqa: PYI051\n    **kwargs,\n) -&gt; dict[str, Any]:\n    data: dict[str, Any] = model.model_dump(mode=mode, **kwargs)\n    for name, info in type(model).model_fields.items():\n        value: Any = getattr(model, name)\n        if isinstance(value, pydantic.BaseModel):\n            value = model_dump_without_assets(value)\n        for meta in info.metadata:\n            if isinstance(meta, MetaAsset):\n                del data[name]\n                break\n        else:\n            data[name] = value\n    return data\n</code></pre>"},{"location":"reference/liblaf/cherries/config/#liblaf.cherries.config.output","title":"output","text":"<pre><code>output(\n    path: PathLike, extra: Extra = None, **kwargs\n) -&gt; Path\n</code></pre> Source code in <code>src/liblaf/cherries/config/asset/_meta.py</code> <pre><code>def output(path: PathLike, extra: Extra = None, **kwargs) -&gt; Path:\n    return asset(path, extra=extra, kind=AssetKind.OUTPUT, **kwargs)\n</code></pre>"},{"location":"reference/liblaf/cherries/config/#liblaf.cherries.config.temporary","title":"temporary","text":"<pre><code>temporary(\n    path: PathLike, extra: Extra = None, **kwargs\n) -&gt; Path\n</code></pre> Source code in <code>src/liblaf/cherries/config/asset/_meta.py</code> <pre><code>def temporary(path: PathLike, extra: Extra = None, **kwargs) -&gt; Path:\n    return asset(path, extra=extra, kind=AssetKind.TEMPORARY, **kwargs)\n</code></pre>"},{"location":"reference/liblaf/cherries/config/asset/","title":"asset","text":""},{"location":"reference/liblaf/cherries/config/asset/#liblaf.cherries.config.asset","title":"liblaf.cherries.config.asset","text":"<p>Modules:</p> <ul> <li> <code>resolvers</code>           \u2013            </li> </ul> <p>Type Aliases:</p> <ul> <li> <code>Extra</code>           \u2013            </li> </ul> <p>Classes:</p> <ul> <li> <code>AssetKind</code>           \u2013            </li> <li> <code>AssetResolver</code>           \u2013            </li> <li> <code>AssetResolverRegistry</code>           \u2013            </li> <li> <code>AssetResolverSeries</code>           \u2013            </li> <li> <code>AssetResolverVtk</code>           \u2013            </li> <li> <code>MetaAsset</code>           \u2013            </li> </ul> <p>Functions:</p> <ul> <li> <code>asset</code>             \u2013              </li> <li> <code>get_assets</code>             \u2013              </li> <li> <code>get_inputs</code>             \u2013              </li> <li> <code>get_outputs</code>             \u2013              </li> <li> <code>get_temporaries</code>             \u2013              </li> <li> <code>input</code>             \u2013              </li> <li> <code>model_dump_without_assets</code>             \u2013              </li> <li> <code>output</code>             \u2013              </li> <li> <code>temporary</code>             \u2013              </li> </ul> <p>Attributes:</p> <ul> <li> <code>asset_resolver_registry</code>               (<code>AssetResolverRegistry</code>)           \u2013            </li> </ul>"},{"location":"reference/liblaf/cherries/config/asset/#liblaf.cherries.config.asset.asset_resolver_registry","title":"asset_resolver_registry  <code>module-attribute</code>","text":"<pre><code>asset_resolver_registry: AssetResolverRegistry = (\n    AssetResolverRegistry()\n)\n</code></pre>"},{"location":"reference/liblaf/cherries/config/asset/#liblaf.cherries.config.asset.Extra","title":"Extra","text":"<pre><code>Extra = (\n    PathLike\n    | Iterable[PathLike]\n    | Callable[\n        [PathLike],\n        PathLike | Iterable[PathLike | None] | None,\n    ]\n    | None\n)\n</code></pre>"},{"location":"reference/liblaf/cherries/config/asset/#liblaf.cherries.config.asset.AssetKind","title":"AssetKind","text":"<p>               Bases: <code>StrEnum</code></p> <p>Attributes:</p> <ul> <li> <code>INPUT</code>           \u2013            </li> <li> <code>OUTPUT</code>           \u2013            </li> <li> <code>TEMPORARY</code>           \u2013            </li> </ul>"},{"location":"reference/liblaf/cherries/config/asset/#liblaf.cherries.config.asset.AssetKind.INPUT","title":"INPUT  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>INPUT = auto()\n</code></pre>"},{"location":"reference/liblaf/cherries/config/asset/#liblaf.cherries.config.asset.AssetKind.OUTPUT","title":"OUTPUT  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>OUTPUT = auto()\n</code></pre>"},{"location":"reference/liblaf/cherries/config/asset/#liblaf.cherries.config.asset.AssetKind.TEMPORARY","title":"TEMPORARY  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>TEMPORARY = auto()\n</code></pre>"},{"location":"reference/liblaf/cherries/config/asset/#liblaf.cherries.config.asset.AssetResolver","title":"AssetResolver","text":"<p>Methods:</p> <ul> <li> <code>match</code>             \u2013              </li> <li> <code>resolve</code>             \u2013              </li> </ul> <p>Attributes:</p> <ul> <li> <code>id</code>               (<code>str</code>)           \u2013            </li> </ul>"},{"location":"reference/liblaf/cherries/config/asset/#liblaf.cherries.config.asset.AssetResolver.id","title":"id  <code>property</code>","text":"<pre><code>id: str\n</code></pre>"},{"location":"reference/liblaf/cherries/config/asset/#liblaf.cherries.config.asset.AssetResolver.match","title":"match  <code>abstractmethod</code>","text":"<pre><code>match(path: Path) -&gt; bool\n</code></pre> Source code in <code>src/liblaf/cherries/config/asset/resolvers/_abc.py</code> <pre><code>@abc.abstractmethod\ndef match(self, path: Path) -&gt; bool:\n    raise NotImplementedError\n</code></pre>"},{"location":"reference/liblaf/cherries/config/asset/#liblaf.cherries.config.asset.AssetResolver.resolve","title":"resolve  <code>abstractmethod</code>","text":"<pre><code>resolve(path: Path) -&gt; Iterable[Path]\n</code></pre> Source code in <code>src/liblaf/cherries/config/asset/resolvers/_abc.py</code> <pre><code>@abc.abstractmethod\ndef resolve(self, path: Path) -&gt; Iterable[Path]:\n    raise NotImplementedError\n</code></pre>"},{"location":"reference/liblaf/cherries/config/asset/#liblaf.cherries.config.asset.AssetResolverRegistry","title":"AssetResolverRegistry","text":"<p>Methods:</p> <ul> <li> <code>register</code>             \u2013              </li> <li> <code>resolve</code>             \u2013              </li> </ul>"},{"location":"reference/liblaf/cherries/config/asset/#liblaf.cherries.config.asset.AssetResolverRegistry.register","title":"register","text":"<pre><code>register(resolver: AssetResolver) -&gt; None\n</code></pre> Source code in <code>src/liblaf/cherries/config/asset/_registry.py</code> <pre><code>def register(self, resolver: AssetResolver) -&gt; None:\n    self._registry[resolver.id] = resolver\n</code></pre>"},{"location":"reference/liblaf/cherries/config/asset/#liblaf.cherries.config.asset.AssetResolverRegistry.resolve","title":"resolve","text":"<pre><code>resolve(path: Path) -&gt; Generator[Path]\n</code></pre> Source code in <code>src/liblaf/cherries/config/asset/_registry.py</code> <pre><code>def resolve(self, path: Path) -&gt; Generator[Path]:\n    for resolver in self._registry.values():\n        if not resolver.match(path):\n            continue\n        yield from resolver.resolve(path)\n</code></pre>"},{"location":"reference/liblaf/cherries/config/asset/#liblaf.cherries.config.asset.AssetResolverSeries","title":"AssetResolverSeries","text":"<p>               Bases: <code>AssetResolver</code></p> <p>Methods:</p> <ul> <li> <code>match</code>             \u2013              </li> <li> <code>resolve</code>             \u2013              </li> </ul> <p>Attributes:</p> <ul> <li> <code>id</code>               (<code>str</code>)           \u2013            </li> </ul>"},{"location":"reference/liblaf/cherries/config/asset/#liblaf.cherries.config.asset.AssetResolverSeries.id","title":"id  <code>property</code>","text":"<pre><code>id: str\n</code></pre>"},{"location":"reference/liblaf/cherries/config/asset/#liblaf.cherries.config.asset.AssetResolverSeries.match","title":"match","text":"<pre><code>match(path: Path) -&gt; bool\n</code></pre> Source code in <code>src/liblaf/cherries/config/asset/resolvers/_series.py</code> <pre><code>@override\ndef match(self, path: Path) -&gt; bool:\n    return path.suffix == \".series\"\n</code></pre>"},{"location":"reference/liblaf/cherries/config/asset/#liblaf.cherries.config.asset.AssetResolverSeries.resolve","title":"resolve","text":"<pre><code>resolve(path: Path) -&gt; Generator[Path]\n</code></pre> Source code in <code>src/liblaf/cherries/config/asset/resolvers/_series.py</code> <pre><code>@override\ndef resolve(self, path: Path) -&gt; Generator[Path]:\n    if (folder := path.with_suffix(\".d\")).exists():\n        yield folder\n    if (folder := path.with_suffix(\"\")).exists():\n        yield folder\n</code></pre>"},{"location":"reference/liblaf/cherries/config/asset/#liblaf.cherries.config.asset.AssetResolverVtk","title":"AssetResolverVtk","text":"<p>               Bases: <code>AssetResolver</code></p> <p>Parameters:</p> <ul> <li> <code>SUFFIXES</code>               (<code>set[str]</code>, default:                   <code>{'.vti', '.stl', '.vtk', '.vtr', '.vtp', '.vts', '.vtu', '.ply', '.obj'}</code> )           \u2013            </li> </ul> <p>Methods:</p> <ul> <li> <code>match</code>             \u2013              </li> <li> <code>resolve</code>             \u2013              </li> </ul> <p>Attributes:</p> <ul> <li> <code>SUFFIXES</code>               (<code>set[str]</code>)           \u2013            </li> <li> <code>id</code>               (<code>str</code>)           \u2013            </li> </ul>"},{"location":"reference/liblaf/cherries/config/asset/#liblaf.cherries.config.asset.AssetResolverVtk.SUFFIXES","title":"SUFFIXES  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>SUFFIXES: set[str] = field(\n    factory=lambda: {\n        \".obj\",\n        \".ply\",\n        \".stl\",\n        \".vti\",\n        \".vtk\",\n        \".vtp\",\n        \".vtr\",\n        \".vts\",\n        \".vtu\",\n    }\n)\n</code></pre>"},{"location":"reference/liblaf/cherries/config/asset/#liblaf.cherries.config.asset.AssetResolverVtk.id","title":"id  <code>property</code>","text":"<pre><code>id: str\n</code></pre>"},{"location":"reference/liblaf/cherries/config/asset/#liblaf.cherries.config.asset.AssetResolverVtk.match","title":"match","text":"<pre><code>match(path: Path) -&gt; bool\n</code></pre> Source code in <code>src/liblaf/cherries/config/asset/resolvers/_vtk.py</code> <pre><code>@override\ndef match(self, path: Path) -&gt; bool:\n    return path.suffix in self.SUFFIXES\n</code></pre>"},{"location":"reference/liblaf/cherries/config/asset/#liblaf.cherries.config.asset.AssetResolverVtk.resolve","title":"resolve","text":"<pre><code>resolve(path: Path) -&gt; Generator[Path]\n</code></pre> Source code in <code>src/liblaf/cherries/config/asset/resolvers/_vtk.py</code> <pre><code>@override\ndef resolve(self, path: Path) -&gt; Generator[Path]:\n    if (landmarks := path.with_suffix(\".landmarks.json\")).exists():\n        yield landmarks\n</code></pre>"},{"location":"reference/liblaf/cherries/config/asset/#liblaf.cherries.config.asset.MetaAsset","title":"MetaAsset","text":"<p>Parameters:</p> <ul> <li> <code>kind</code>               (<code>AssetKind</code>)           \u2013            </li> <li> <code>extra</code>               (<code>Extra</code>, default:                   <code>None</code> )           \u2013            </li> </ul> <p>Methods:</p> <ul> <li> <code>resolve</code>             \u2013              </li> </ul> <p>Attributes:</p> <ul> <li> <code>extra</code>               (<code>Extra</code>)           \u2013            </li> <li> <code>kind</code>               (<code>AssetKind</code>)           \u2013            </li> </ul>"},{"location":"reference/liblaf/cherries/config/asset/#liblaf.cherries.config.asset.MetaAsset.extra","title":"extra  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra: Extra = None\n</code></pre>"},{"location":"reference/liblaf/cherries/config/asset/#liblaf.cherries.config.asset.MetaAsset.kind","title":"kind  <code>instance-attribute</code>","text":"<pre><code>kind: AssetKind\n</code></pre>"},{"location":"reference/liblaf/cherries/config/asset/#liblaf.cherries.config.asset.MetaAsset.resolve","title":"resolve","text":"<pre><code>resolve(value: Path) -&gt; Generator[Path]\n</code></pre> Source code in <code>src/liblaf/cherries/config/asset/_meta.py</code> <pre><code>def resolve(self, value: Path) -&gt; Generator[Path]:\n    if self.extra is None:\n        yield from asset_resolver_registry.resolve(value)\n        return\n    extra: PathLike | Iterable[PathLike | None] | None = (\n        self.extra(value) if callable(self.extra) else self.extra  # noqa: S610\n    )\n    for p in grapes.as_iterable(extra, base_type=(str, bytes, os.PathLike)):\n        if p is None:\n            continue\n        yield Path(p)\n</code></pre>"},{"location":"reference/liblaf/cherries/config/asset/#liblaf.cherries.config.asset.asset","title":"asset","text":"<pre><code>asset(\n    path: PathLike,\n    extra: Extra = None,\n    *,\n    kind: AssetKind,\n    **kwargs,\n) -&gt; Path\n</code></pre> Source code in <code>src/liblaf/cherries/config/asset/_meta.py</code> <pre><code>def asset(path: PathLike, extra: Extra = None, *, kind: AssetKind, **kwargs) -&gt; Path:\n    field_info: pydantic.fields.FieldInfo = pydantic.Field(pu.data(path), **kwargs)  # pyright: ignore[reportAssignmentType]\n    field_info.metadata.append(MetaAsset(kind=kind, extra=extra))\n    return field_info  # pyright: ignore[reportReturnType]\n</code></pre>"},{"location":"reference/liblaf/cherries/config/asset/#liblaf.cherries.config.asset.get_assets","title":"get_assets","text":"<pre><code>get_assets(\n    cfg: BaseModel, kind: AssetKind\n) -&gt; Generator[Path]\n</code></pre> Source code in <code>src/liblaf/cherries/config/asset/_meta.py</code> <pre><code>def get_assets(cfg: pydantic.BaseModel, kind: AssetKind) -&gt; Generator[Path]:\n    for name, info in type(cfg).model_fields.items():\n        value: Any = getattr(cfg, name)\n        if isinstance(value, pydantic.BaseModel):\n            yield from get_assets(value, kind)\n        for meta in info.metadata:\n            if isinstance(meta, MetaAsset) and meta.kind == kind:\n                value: Path = Path(value)\n                yield value\n                yield from meta.resolve(value)\n</code></pre>"},{"location":"reference/liblaf/cherries/config/asset/#liblaf.cherries.config.asset.get_inputs","title":"get_inputs","text":"<pre><code>get_inputs(cfg: BaseModel) -&gt; Generator[Path]\n</code></pre> Source code in <code>src/liblaf/cherries/config/asset/_meta.py</code> <pre><code>def get_inputs(cfg: pydantic.BaseModel) -&gt; Generator[Path]:\n    yield from get_assets(cfg, AssetKind.INPUT)\n</code></pre>"},{"location":"reference/liblaf/cherries/config/asset/#liblaf.cherries.config.asset.get_outputs","title":"get_outputs","text":"<pre><code>get_outputs(cfg: BaseModel) -&gt; Generator[Path]\n</code></pre> Source code in <code>src/liblaf/cherries/config/asset/_meta.py</code> <pre><code>def get_outputs(cfg: pydantic.BaseModel) -&gt; Generator[Path]:\n    yield from get_assets(cfg, AssetKind.OUTPUT)\n</code></pre>"},{"location":"reference/liblaf/cherries/config/asset/#liblaf.cherries.config.asset.get_temporaries","title":"get_temporaries","text":"<pre><code>get_temporaries(cfg: BaseModel) -&gt; Generator[Path]\n</code></pre> Source code in <code>src/liblaf/cherries/config/asset/_meta.py</code> <pre><code>def get_temporaries(cfg: pydantic.BaseModel) -&gt; Generator[Path]:\n    yield from get_assets(cfg, AssetKind.TEMPORARY)\n</code></pre>"},{"location":"reference/liblaf/cherries/config/asset/#liblaf.cherries.config.asset.input","title":"input","text":"<pre><code>input(\n    path: PathLike, extra: Extra = None, **kwargs\n) -&gt; Path\n</code></pre> Source code in <code>src/liblaf/cherries/config/asset/_meta.py</code> <pre><code>def input(path: PathLike, extra: Extra = None, **kwargs) -&gt; Path:  # noqa: A001\n    return asset(path, extra=extra, kind=AssetKind.INPUT, **kwargs)\n</code></pre>"},{"location":"reference/liblaf/cherries/config/asset/#liblaf.cherries.config.asset.model_dump_without_assets","title":"model_dump_without_assets","text":"<pre><code>model_dump_without_assets(\n    model: BaseModel,\n    *,\n    mode: str | Literal[\"json\", \"python\"] = \"json\",\n    **kwargs,\n) -&gt; dict[str, Any]\n</code></pre> Source code in <code>src/liblaf/cherries/config/asset/_meta.py</code> <pre><code>def model_dump_without_assets(\n    model: pydantic.BaseModel,\n    *,\n    mode: str | Literal[\"json\", \"python\"] = \"json\",  # noqa: PYI051\n    **kwargs,\n) -&gt; dict[str, Any]:\n    data: dict[str, Any] = model.model_dump(mode=mode, **kwargs)\n    for name, info in type(model).model_fields.items():\n        value: Any = getattr(model, name)\n        if isinstance(value, pydantic.BaseModel):\n            value = model_dump_without_assets(value)\n        for meta in info.metadata:\n            if isinstance(meta, MetaAsset):\n                del data[name]\n                break\n        else:\n            data[name] = value\n    return data\n</code></pre>"},{"location":"reference/liblaf/cherries/config/asset/#liblaf.cherries.config.asset.output","title":"output","text":"<pre><code>output(\n    path: PathLike, extra: Extra = None, **kwargs\n) -&gt; Path\n</code></pre> Source code in <code>src/liblaf/cherries/config/asset/_meta.py</code> <pre><code>def output(path: PathLike, extra: Extra = None, **kwargs) -&gt; Path:\n    return asset(path, extra=extra, kind=AssetKind.OUTPUT, **kwargs)\n</code></pre>"},{"location":"reference/liblaf/cherries/config/asset/#liblaf.cherries.config.asset.temporary","title":"temporary","text":"<pre><code>temporary(\n    path: PathLike, extra: Extra = None, **kwargs\n) -&gt; Path\n</code></pre> Source code in <code>src/liblaf/cherries/config/asset/_meta.py</code> <pre><code>def temporary(path: PathLike, extra: Extra = None, **kwargs) -&gt; Path:\n    return asset(path, extra=extra, kind=AssetKind.TEMPORARY, **kwargs)\n</code></pre>"},{"location":"reference/liblaf/cherries/config/asset/resolvers/","title":"resolvers","text":""},{"location":"reference/liblaf/cherries/config/asset/resolvers/#liblaf.cherries.config.asset.resolvers","title":"liblaf.cherries.config.asset.resolvers","text":"<p>Classes:</p> <ul> <li> <code>AssetResolver</code>           \u2013            </li> <li> <code>AssetResolverSeries</code>           \u2013            </li> <li> <code>AssetResolverVtk</code>           \u2013            </li> </ul>"},{"location":"reference/liblaf/cherries/config/asset/resolvers/#liblaf.cherries.config.asset.resolvers.AssetResolver","title":"AssetResolver","text":"<p>Methods:</p> <ul> <li> <code>match</code>             \u2013              </li> <li> <code>resolve</code>             \u2013              </li> </ul> <p>Attributes:</p> <ul> <li> <code>id</code>               (<code>str</code>)           \u2013            </li> </ul>"},{"location":"reference/liblaf/cherries/config/asset/resolvers/#liblaf.cherries.config.asset.resolvers.AssetResolver.id","title":"id  <code>property</code>","text":"<pre><code>id: str\n</code></pre>"},{"location":"reference/liblaf/cherries/config/asset/resolvers/#liblaf.cherries.config.asset.resolvers.AssetResolver.match","title":"match  <code>abstractmethod</code>","text":"<pre><code>match(path: Path) -&gt; bool\n</code></pre> Source code in <code>src/liblaf/cherries/config/asset/resolvers/_abc.py</code> <pre><code>@abc.abstractmethod\ndef match(self, path: Path) -&gt; bool:\n    raise NotImplementedError\n</code></pre>"},{"location":"reference/liblaf/cherries/config/asset/resolvers/#liblaf.cherries.config.asset.resolvers.AssetResolver.resolve","title":"resolve  <code>abstractmethod</code>","text":"<pre><code>resolve(path: Path) -&gt; Iterable[Path]\n</code></pre> Source code in <code>src/liblaf/cherries/config/asset/resolvers/_abc.py</code> <pre><code>@abc.abstractmethod\ndef resolve(self, path: Path) -&gt; Iterable[Path]:\n    raise NotImplementedError\n</code></pre>"},{"location":"reference/liblaf/cherries/config/asset/resolvers/#liblaf.cherries.config.asset.resolvers.AssetResolverSeries","title":"AssetResolverSeries","text":"<p>               Bases: <code>AssetResolver</code></p> <p>Methods:</p> <ul> <li> <code>match</code>             \u2013              </li> <li> <code>resolve</code>             \u2013              </li> </ul> <p>Attributes:</p> <ul> <li> <code>id</code>               (<code>str</code>)           \u2013            </li> </ul>"},{"location":"reference/liblaf/cherries/config/asset/resolvers/#liblaf.cherries.config.asset.resolvers.AssetResolverSeries.id","title":"id  <code>property</code>","text":"<pre><code>id: str\n</code></pre>"},{"location":"reference/liblaf/cherries/config/asset/resolvers/#liblaf.cherries.config.asset.resolvers.AssetResolverSeries.match","title":"match","text":"<pre><code>match(path: Path) -&gt; bool\n</code></pre> Source code in <code>src/liblaf/cherries/config/asset/resolvers/_series.py</code> <pre><code>@override\ndef match(self, path: Path) -&gt; bool:\n    return path.suffix == \".series\"\n</code></pre>"},{"location":"reference/liblaf/cherries/config/asset/resolvers/#liblaf.cherries.config.asset.resolvers.AssetResolverSeries.resolve","title":"resolve","text":"<pre><code>resolve(path: Path) -&gt; Generator[Path]\n</code></pre> Source code in <code>src/liblaf/cherries/config/asset/resolvers/_series.py</code> <pre><code>@override\ndef resolve(self, path: Path) -&gt; Generator[Path]:\n    if (folder := path.with_suffix(\".d\")).exists():\n        yield folder\n    if (folder := path.with_suffix(\"\")).exists():\n        yield folder\n</code></pre>"},{"location":"reference/liblaf/cherries/config/asset/resolvers/#liblaf.cherries.config.asset.resolvers.AssetResolverVtk","title":"AssetResolverVtk","text":"<p>               Bases: <code>AssetResolver</code></p> <p>Parameters:</p> <ul> <li> <code>SUFFIXES</code>               (<code>set[str]</code>, default:                   <code>{'.vti', '.stl', '.vtk', '.vtr', '.vtp', '.vts', '.vtu', '.ply', '.obj'}</code> )           \u2013            </li> </ul> <p>Methods:</p> <ul> <li> <code>match</code>             \u2013              </li> <li> <code>resolve</code>             \u2013              </li> </ul> <p>Attributes:</p> <ul> <li> <code>SUFFIXES</code>               (<code>set[str]</code>)           \u2013            </li> <li> <code>id</code>               (<code>str</code>)           \u2013            </li> </ul>"},{"location":"reference/liblaf/cherries/config/asset/resolvers/#liblaf.cherries.config.asset.resolvers.AssetResolverVtk.SUFFIXES","title":"SUFFIXES  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>SUFFIXES: set[str] = field(\n    factory=lambda: {\n        \".obj\",\n        \".ply\",\n        \".stl\",\n        \".vti\",\n        \".vtk\",\n        \".vtp\",\n        \".vtr\",\n        \".vts\",\n        \".vtu\",\n    }\n)\n</code></pre>"},{"location":"reference/liblaf/cherries/config/asset/resolvers/#liblaf.cherries.config.asset.resolvers.AssetResolverVtk.id","title":"id  <code>property</code>","text":"<pre><code>id: str\n</code></pre>"},{"location":"reference/liblaf/cherries/config/asset/resolvers/#liblaf.cherries.config.asset.resolvers.AssetResolverVtk.match","title":"match","text":"<pre><code>match(path: Path) -&gt; bool\n</code></pre> Source code in <code>src/liblaf/cherries/config/asset/resolvers/_vtk.py</code> <pre><code>@override\ndef match(self, path: Path) -&gt; bool:\n    return path.suffix in self.SUFFIXES\n</code></pre>"},{"location":"reference/liblaf/cherries/config/asset/resolvers/#liblaf.cherries.config.asset.resolvers.AssetResolverVtk.resolve","title":"resolve","text":"<pre><code>resolve(path: Path) -&gt; Generator[Path]\n</code></pre> Source code in <code>src/liblaf/cherries/config/asset/resolvers/_vtk.py</code> <pre><code>@override\ndef resolve(self, path: Path) -&gt; Generator[Path]:\n    if (landmarks := path.with_suffix(\".landmarks.json\")).exists():\n        yield landmarks\n</code></pre>"},{"location":"reference/liblaf/cherries/core/","title":"core","text":""},{"location":"reference/liblaf/cherries/core/#liblaf.cherries.core","title":"liblaf.cherries.core","text":"<p>Modules:</p> <ul> <li> <code>typing</code>           \u2013            </li> </ul> <p>Type Aliases:</p> <ul> <li> <code>MethodName</code>           \u2013            </li> <li> <code>PluginId</code>           \u2013            </li> </ul> <p>Classes:</p> <ul> <li> <code>ImplInfo</code>           \u2013            </li> <li> <code>Plugin</code>           \u2013            </li> <li> <code>PluginCachedProperty</code>           \u2013            </li> <li> <code>PluginProperty</code>           \u2013            </li> <li> <code>Run</code>           \u2013            <p>.</p> </li> <li> <code>SpecInfo</code>           \u2013            </li> </ul> <p>Functions:</p> <ul> <li> <code>collect_impls</code>             \u2013              </li> <li> <code>collect_specs</code>             \u2013              </li> <li> <code>get_impl_info</code>             \u2013              </li> <li> <code>impl</code>             \u2013              </li> <li> <code>plugin_cached_property</code>             \u2013              </li> <li> <code>plugin_property</code>             \u2013              </li> <li> <code>spec</code>             \u2013              </li> </ul> <p>Attributes:</p> <ul> <li> <code>active_run</code>               (<code>Run</code>)           \u2013            </li> <li> <code>end</code>           \u2013            </li> <li> <code>log_asset</code>           \u2013            </li> <li> <code>log_input</code>           \u2013            </li> <li> <code>log_metric</code>           \u2013            </li> <li> <code>log_metrics</code>           \u2013            </li> <li> <code>log_other</code>           \u2013            </li> <li> <code>log_others</code>           \u2013            </li> <li> <code>log_output</code>           \u2013            </li> <li> <code>log_parameter</code>           \u2013            </li> <li> <code>log_parameters</code>           \u2013            </li> <li> <code>start</code>           \u2013            </li> </ul>"},{"location":"reference/liblaf/cherries/core/#liblaf.cherries.core.active_run","title":"active_run  <code>module-attribute</code>","text":"<pre><code>active_run: Run = Run()\n</code></pre>"},{"location":"reference/liblaf/cherries/core/#liblaf.cherries.core.end","title":"end  <code>module-attribute</code>","text":"<pre><code>end = end\n</code></pre>"},{"location":"reference/liblaf/cherries/core/#liblaf.cherries.core.log_asset","title":"log_asset  <code>module-attribute</code>","text":"<pre><code>log_asset = log_asset\n</code></pre>"},{"location":"reference/liblaf/cherries/core/#liblaf.cherries.core.log_input","title":"log_input  <code>module-attribute</code>","text":"<pre><code>log_input = log_input\n</code></pre>"},{"location":"reference/liblaf/cherries/core/#liblaf.cherries.core.log_metric","title":"log_metric  <code>module-attribute</code>","text":"<pre><code>log_metric = log_metric\n</code></pre>"},{"location":"reference/liblaf/cherries/core/#liblaf.cherries.core.log_metrics","title":"log_metrics  <code>module-attribute</code>","text":"<pre><code>log_metrics = log_metrics\n</code></pre>"},{"location":"reference/liblaf/cherries/core/#liblaf.cherries.core.log_other","title":"log_other  <code>module-attribute</code>","text":"<pre><code>log_other = log_other\n</code></pre>"},{"location":"reference/liblaf/cherries/core/#liblaf.cherries.core.log_others","title":"log_others  <code>module-attribute</code>","text":"<pre><code>log_others = log_others\n</code></pre>"},{"location":"reference/liblaf/cherries/core/#liblaf.cherries.core.log_output","title":"log_output  <code>module-attribute</code>","text":"<pre><code>log_output = log_output\n</code></pre>"},{"location":"reference/liblaf/cherries/core/#liblaf.cherries.core.log_parameter","title":"log_parameter  <code>module-attribute</code>","text":"<pre><code>log_parameter = log_parameter\n</code></pre>"},{"location":"reference/liblaf/cherries/core/#liblaf.cherries.core.log_parameters","title":"log_parameters  <code>module-attribute</code>","text":"<pre><code>log_parameters = log_parameters\n</code></pre>"},{"location":"reference/liblaf/cherries/core/#liblaf.cherries.core.start","title":"start  <code>module-attribute</code>","text":"<pre><code>start = start\n</code></pre>"},{"location":"reference/liblaf/cherries/core/#liblaf.cherries.core.MethodName","title":"MethodName","text":"<pre><code>MethodName = str\n</code></pre>"},{"location":"reference/liblaf/cherries/core/#liblaf.cherries.core.PluginId","title":"PluginId","text":"<pre><code>PluginId = str\n</code></pre>"},{"location":"reference/liblaf/cherries/core/#liblaf.cherries.core.ImplInfo","title":"ImplInfo","text":"<p>Parameters:</p> <ul> <li> <code>after</code>               (<code>Iterable[PluginId]</code>, default:                   <code>()</code> )           \u2013            </li> <li> <code>before</code>               (<code>Iterable[PluginId]</code>, default:                   <code>()</code> )           \u2013            </li> <li> <code>priority</code>               (<code>int</code>, default:                   <code>0</code> )           \u2013            </li> </ul> <p>Attributes:</p> <ul> <li> <code>after</code>               (<code>Iterable[PluginId]</code>)           \u2013            </li> <li> <code>before</code>               (<code>Iterable[PluginId]</code>)           \u2013            </li> <li> <code>priority</code>               (<code>int</code>)           \u2013            </li> </ul>"},{"location":"reference/liblaf/cherries/core/#liblaf.cherries.core.ImplInfo.after","title":"after  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>after: Iterable[PluginId] = field(default=())\n</code></pre>"},{"location":"reference/liblaf/cherries/core/#liblaf.cherries.core.ImplInfo.before","title":"before  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>before: Iterable[PluginId] = field(default=())\n</code></pre>"},{"location":"reference/liblaf/cherries/core/#liblaf.cherries.core.ImplInfo.priority","title":"priority  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>priority: int = 0\n</code></pre>"},{"location":"reference/liblaf/cherries/core/#liblaf.cherries.core.Plugin","title":"Plugin","text":"<p>Parameters:</p> <ul> <li> <code>plugins</code>               (<code>dict[PluginId, str]</code>, default:                   <code>&lt;class 'dict'&gt;</code> )           \u2013            <p>dict() -&gt; new empty dictionary dict(mapping) -&gt; new dictionary initialized from a mapping object\u2019s     (key, value) pairs dict(iterable) -&gt; new dictionary initialized as if via:     d = {}     for k, v in iterable:         d[k] = v dict(**kwargs) -&gt; new dictionary initialized with the name=value pairs     in the keyword argument list.  For example:  dict(one=1, two=2)</p> </li> </ul> <p>Methods:</p> <ul> <li> <code>delegate</code>             \u2013              </li> <li> <code>register</code>             \u2013              </li> </ul> <p>Attributes:</p> <ul> <li> <code>plugin_id</code>               (<code>str</code>)           \u2013            </li> <li> <code>plugin_root</code>               (<code>Self</code>)           \u2013            </li> <li> <code>plugins</code>               (<code>dict[PluginId, Plugin]</code>)           \u2013            </li> </ul>"},{"location":"reference/liblaf/cherries/core/#liblaf.cherries.core.Plugin.plugin_id","title":"plugin_id  <code>property</code>","text":"<pre><code>plugin_id: str\n</code></pre>"},{"location":"reference/liblaf/cherries/core/#liblaf.cherries.core.Plugin.plugin_root","title":"plugin_root  <code>property</code>","text":"<pre><code>plugin_root: Self\n</code></pre>"},{"location":"reference/liblaf/cherries/core/#liblaf.cherries.core.Plugin.plugins","title":"plugins  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>plugins: dict[PluginId, Plugin] = field(\n    factory=dict, kw_only=True\n)\n</code></pre>"},{"location":"reference/liblaf/cherries/core/#liblaf.cherries.core.Plugin.delegate","title":"delegate","text":"<pre><code>delegate(\n    method: MethodName,\n    args: Sequence[Any] = (),\n    kwargs: Mapping[str, Any] = {},\n    *,\n    first_result: bool = False,\n) -&gt; Any\n</code></pre> Source code in <code>src/liblaf/cherries/core/_plugin.py</code> <pre><code>def delegate(\n    self,\n    method: MethodName,\n    args: Sequence[Any] = (),\n    kwargs: Mapping[str, Any] = {},\n    *,\n    first_result: bool = False,\n) -&gt; Any:\n    __tracebackhide__ = True\n    plugins: Sequence[Plugin] = self._plugins_sort(method)\n    if not plugins:\n        if first_result:\n            return None\n        return []\n    results: list[Any] = []\n    for plugin in plugins:\n        try:\n            result: Any = getattr(plugin, method)(*args, **kwargs)\n        except BaseException as e:\n            if isinstance(e, (KeyboardInterrupt, SystemExit)):\n                raise\n            logger.exception(\"Plugin {}\", plugin.plugin_id)\n        else:\n            if result is None:\n                continue\n            if first_result:\n                return result\n            results.append(result)\n    return results\n</code></pre>"},{"location":"reference/liblaf/cherries/core/#liblaf.cherries.core.Plugin.register","title":"register","text":"<pre><code>register(plugin: Plugin) -&gt; None\n</code></pre> Source code in <code>src/liblaf/cherries/core/_plugin.py</code> <pre><code>def register(self, plugin: \"Plugin\") -&gt; None:\n    impls: dict[MethodName, ImplInfo] = collect_impls(plugin)\n    for name in impls:\n        self._cache_sort_plugins.pop(name, None)\n    plugin._plugin_parent = self  # noqa: SLF001\n    self.plugins[plugin.plugin_id] = plugin\n</code></pre>"},{"location":"reference/liblaf/cherries/core/#liblaf.cherries.core.PluginCachedProperty","title":"PluginCachedProperty","text":"<p>               Bases: <code>cached_property[T]</code></p> <p>Methods:</p> <ul> <li> <code>__get__</code>             \u2013              </li> <li> <code>__set__</code>             \u2013              </li> </ul>"},{"location":"reference/liblaf/cherries/core/#liblaf.cherries.core.PluginCachedProperty.__get__","title":"__get__","text":"<pre><code>__get__(instance: None, owner: type | None = None) -&gt; Self\n</code></pre><pre><code>__get__(instance: object, owner: type | None = None) -&gt; T\n</code></pre> <pre><code>__get__(\n    instance: object | None, owner: type | None = None\n) -&gt; Self | T\n</code></pre> Source code in <code>src/liblaf/cherries/core/_utils.py</code> <pre><code>@override\ndef __get__(self, instance: object | None, owner: type | None = None) -&gt; Self | T:\n    if instance is None:\n        return super().__get__(instance, owner)\n    while (parent := getattr(instance, \"_plugin_parent\", None)) is not None:\n        instance = parent\n    return super().__get__(instance, owner)\n</code></pre>"},{"location":"reference/liblaf/cherries/core/#liblaf.cherries.core.PluginCachedProperty.__set__","title":"__set__","text":"<pre><code>__set__(instance: object, value: T) -&gt; None\n</code></pre> Source code in <code>src/liblaf/cherries/core/_utils.py</code> <pre><code>@override\ndef __set__(self, instance: object, value: T) -&gt; None:\n    assert self.attrname is not None\n    instance.__dict__[self.attrname] = value\n</code></pre>"},{"location":"reference/liblaf/cherries/core/#liblaf.cherries.core.PluginProperty","title":"PluginProperty","text":"<p>               Bases: <code>property</code></p> <p>Methods:</p> <ul> <li> <code>__get__</code>             \u2013              </li> </ul>"},{"location":"reference/liblaf/cherries/core/#liblaf.cherries.core.PluginProperty.__get__","title":"__get__","text":"<pre><code>__get__(instance: None, owner: type) -&gt; Self\n</code></pre><pre><code>__get__(instance: Any, owner: type | None = None) -&gt; Any\n</code></pre> <pre><code>__get__(\n    instance: object | None, owner: type | None = None\n) -&gt; Self | T\n</code></pre> Source code in <code>src/liblaf/cherries/core/_utils.py</code> <pre><code>def __get__(\n    self, instance: object | None, owner: type | None = None, /\n) -&gt; Self | T:\n    if instance is None:\n        return super().__get__(instance, owner)\n    while (parent := getattr(instance, \"_plugin_parent\", None)) is not None:\n        instance = parent\n    return super().__get__(instance, owner)\n</code></pre>"},{"location":"reference/liblaf/cherries/core/#liblaf.cherries.core.Run","title":"Run","text":"<p>               Bases: <code>Plugin</code></p> <p>.</p> References <ol> <li>Experiment - Comet Docs</li> <li>Logger | ClearML</li> <li>MLflow Tracking APIs | MLflow</li> </ol> <p>Parameters:</p> <ul> <li> <code>plugins</code>               (<code>dict[PluginId, str]</code>, default:                   <code>&lt;class 'dict'&gt;</code> )           \u2013            <p>dict() -&gt; new empty dictionary dict(mapping) -&gt; new dictionary initialized from a mapping object\u2019s     (key, value) pairs dict(iterable) -&gt; new dictionary initialized as if via:     d = {}     for k, v in iterable:         d[k] = v dict(**kwargs) -&gt; new dictionary initialized with the name=value pairs     in the keyword argument list.  For example:  dict(one=1, two=2)</p> </li> </ul> <p>Methods:</p> <ul> <li> <code>data_dir</code>             \u2013              </li> <li> <code>delegate</code>             \u2013              </li> <li> <code>end</code>             \u2013              </li> <li> <code>entrypoint</code>             \u2013              </li> <li> <code>exp_dir</code>             \u2013              </li> <li> <code>exp_name</code>             \u2013              </li> <li> <code>get_others</code>             \u2013              </li> <li> <code>get_params</code>             \u2013              </li> <li> <code>get_url</code>             \u2013              </li> <li> <code>log_asset</code>             \u2013              </li> <li> <code>log_input</code>             \u2013              </li> <li> <code>log_metric</code>             \u2013              </li> <li> <code>log_metrics</code>             \u2013              </li> <li> <code>log_other</code>             \u2013              </li> <li> <code>log_others</code>             \u2013              </li> <li> <code>log_output</code>             \u2013              </li> <li> <code>log_parameter</code>             \u2013              </li> <li> <code>log_parameters</code>             \u2013              </li> <li> <code>log_temporary</code>             \u2013              </li> <li> <code>params</code>             \u2013              </li> <li> <code>project_dir</code>             \u2013              </li> <li> <code>project_name</code>             \u2013              </li> <li> <code>register</code>             \u2013              </li> <li> <code>start</code>             \u2013              </li> <li> <code>start_time</code>             \u2013              </li> <li> <code>url</code>             \u2013              </li> </ul> <p>Attributes:</p> <ul> <li> <code>plugin_id</code>               (<code>str</code>)           \u2013            </li> <li> <code>plugin_root</code>               (<code>Self</code>)           \u2013            </li> <li> <code>plugins</code>               (<code>dict[PluginId, Plugin]</code>)           \u2013            </li> </ul>"},{"location":"reference/liblaf/cherries/core/#liblaf.cherries.core.Run.plugin_id","title":"plugin_id  <code>property</code>","text":"<pre><code>plugin_id: str\n</code></pre>"},{"location":"reference/liblaf/cherries/core/#liblaf.cherries.core.Run.plugin_root","title":"plugin_root  <code>property</code>","text":"<pre><code>plugin_root: Self\n</code></pre>"},{"location":"reference/liblaf/cherries/core/#liblaf.cherries.core.Run.plugins","title":"plugins  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>plugins: dict[PluginId, Plugin] = field(\n    factory=dict, kw_only=True\n)\n</code></pre>"},{"location":"reference/liblaf/cherries/core/#liblaf.cherries.core.Run.data_dir","title":"data_dir","text":"<pre><code>data_dir() -&gt; Path\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@plugin_cached_property\ndef data_dir(self) -&gt; Path:\n    return path_utils.data()\n</code></pre>"},{"location":"reference/liblaf/cherries/core/#liblaf.cherries.core.Run.delegate","title":"delegate","text":"<pre><code>delegate(\n    method: MethodName,\n    args: Sequence[Any] = (),\n    kwargs: Mapping[str, Any] = {},\n    *,\n    first_result: bool = False,\n) -&gt; Any\n</code></pre> Source code in <code>src/liblaf/cherries/core/_plugin.py</code> <pre><code>def delegate(\n    self,\n    method: MethodName,\n    args: Sequence[Any] = (),\n    kwargs: Mapping[str, Any] = {},\n    *,\n    first_result: bool = False,\n) -&gt; Any:\n    __tracebackhide__ = True\n    plugins: Sequence[Plugin] = self._plugins_sort(method)\n    if not plugins:\n        if first_result:\n            return None\n        return []\n    results: list[Any] = []\n    for plugin in plugins:\n        try:\n            result: Any = getattr(plugin, method)(*args, **kwargs)\n        except BaseException as e:\n            if isinstance(e, (KeyboardInterrupt, SystemExit)):\n                raise\n            logger.exception(\"Plugin {}\", plugin.plugin_id)\n        else:\n            if result is None:\n                continue\n            if first_result:\n                return result\n            results.append(result)\n    return results\n</code></pre>"},{"location":"reference/liblaf/cherries/core/#liblaf.cherries.core.Run.end","title":"end","text":"<pre><code>end(*args, **kwargs) -&gt; None\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@spec\ndef end(self, *args, **kwargs) -&gt; None: ...\n</code></pre>"},{"location":"reference/liblaf/cherries/core/#liblaf.cherries.core.Run.entrypoint","title":"entrypoint","text":"<pre><code>entrypoint() -&gt; Path\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@plugin_cached_property\ndef entrypoint(self) -&gt; Path:\n    return path_utils.entrypoint()\n</code></pre>"},{"location":"reference/liblaf/cherries/core/#liblaf.cherries.core.Run.exp_dir","title":"exp_dir","text":"<pre><code>exp_dir() -&gt; Path\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@plugin_cached_property\ndef exp_dir(self) -&gt; Path:\n    return path_utils.exp_dir()\n</code></pre>"},{"location":"reference/liblaf/cherries/core/#liblaf.cherries.core.Run.exp_name","title":"exp_name","text":"<pre><code>exp_name() -&gt; str\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@plugin_cached_property\ndef exp_name(self) -&gt; str:\n    return (\n        self.entrypoint.relative_to(self.project_dir)\n        .as_posix()\n        .removeprefix(\"exp/\")\n    )\n</code></pre>"},{"location":"reference/liblaf/cherries/core/#liblaf.cherries.core.Run.get_others","title":"get_others","text":"<pre><code>get_others() -&gt; Mapping[str, Any]\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@spec(first_result=True)\ndef get_others(self) -&gt; Mapping[str, Any]: ...\n</code></pre>"},{"location":"reference/liblaf/cherries/core/#liblaf.cherries.core.Run.get_params","title":"get_params","text":"<pre><code>get_params() -&gt; Mapping[str, Any]\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@spec(first_result=True)\ndef get_params(self) -&gt; Mapping[str, Any]: ...\n</code></pre>"},{"location":"reference/liblaf/cherries/core/#liblaf.cherries.core.Run.get_url","title":"get_url","text":"<pre><code>get_url() -&gt; str\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@spec(first_result=True)\ndef get_url(self) -&gt; str: ...\n</code></pre>"},{"location":"reference/liblaf/cherries/core/#liblaf.cherries.core.Run.log_asset","title":"log_asset","text":"<pre><code>log_asset(\n    path: PathLike,\n    name: PathLike | None = None,\n    *,\n    metadata: Mapping[str, Any] | None = None,\n    **kwargs,\n) -&gt; None\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@spec\ndef log_asset(\n    self,\n    path: PathLike,\n    name: PathLike | None = None,\n    *,\n    metadata: Mapping[str, Any] | None = None,\n    **kwargs,\n) -&gt; None: ...\n</code></pre>"},{"location":"reference/liblaf/cherries/core/#liblaf.cherries.core.Run.log_input","title":"log_input","text":"<pre><code>log_input(\n    path: PathLike,\n    name: PathLike | None = None,\n    *,\n    metadata: Mapping[str, Any] | None = None,\n    **kwargs,\n) -&gt; None\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@spec\ndef log_input(\n    self,\n    path: PathLike,\n    name: PathLike | None = None,\n    *,\n    metadata: Mapping[str, Any] | None = None,\n    **kwargs,\n) -&gt; None: ...\n</code></pre>"},{"location":"reference/liblaf/cherries/core/#liblaf.cherries.core.Run.log_metric","title":"log_metric","text":"<pre><code>log_metric(\n    name: str,\n    value: Any,\n    /,\n    step: int | None = None,\n    epoch: int | None = None,\n    **kwargs,\n) -&gt; None\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@spec\ndef log_metric(\n    self,\n    name: str,\n    value: Any,\n    /,\n    step: int | None = None,\n    epoch: int | None = None,\n    **kwargs,\n) -&gt; None: ...\n</code></pre>"},{"location":"reference/liblaf/cherries/core/#liblaf.cherries.core.Run.log_metrics","title":"log_metrics","text":"<pre><code>log_metrics(\n    dic: Mapping[str, Any],\n    /,\n    prefix: str | None = None,\n    step: int | None = None,\n    epoch: int | None = None,\n    **kwargs,\n) -&gt; None\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@spec\ndef log_metrics(\n    self,\n    dic: Mapping[str, Any],\n    /,\n    prefix: str | None = None,\n    step: int | None = None,\n    epoch: int | None = None,\n    **kwargs,\n) -&gt; None: ...\n</code></pre>"},{"location":"reference/liblaf/cherries/core/#liblaf.cherries.core.Run.log_other","title":"log_other","text":"<pre><code>log_other(key: Any, value: Any, /, **kwargs) -&gt; None\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@spec\ndef log_other(self, key: Any, value: Any, /, **kwargs) -&gt; None: ...\n</code></pre>"},{"location":"reference/liblaf/cherries/core/#liblaf.cherries.core.Run.log_others","title":"log_others","text":"<pre><code>log_others(\n    dictionary: Mapping[Any, Any], /, **kwargs\n) -&gt; None\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@spec\ndef log_others(self, dictionary: Mapping[Any, Any], /, **kwargs) -&gt; None: ...\n</code></pre>"},{"location":"reference/liblaf/cherries/core/#liblaf.cherries.core.Run.log_output","title":"log_output","text":"<pre><code>log_output(\n    path: PathLike,\n    name: PathLike | None = None,\n    *,\n    metadata: Mapping[str, Any] | None = None,\n    **kwargs,\n) -&gt; None\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@spec\ndef log_output(\n    self,\n    path: PathLike,\n    name: PathLike | None = None,\n    *,\n    metadata: Mapping[str, Any] | None = None,\n    **kwargs,\n) -&gt; None: ...\n</code></pre>"},{"location":"reference/liblaf/cherries/core/#liblaf.cherries.core.Run.log_parameter","title":"log_parameter","text":"<pre><code>log_parameter(\n    name: Any,\n    value: Any,\n    /,\n    step: int | None = None,\n    **kwargs,\n) -&gt; None\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@spec\ndef log_parameter(\n    self, name: Any, value: Any, /, step: int | None = None, **kwargs\n) -&gt; None: ...\n</code></pre>"},{"location":"reference/liblaf/cherries/core/#liblaf.cherries.core.Run.log_parameters","title":"log_parameters","text":"<pre><code>log_parameters(\n    parameters: Mapping[Any, Any],\n    /,\n    prefix: str | None = None,\n    step: int | None = None,\n    **kwargs,\n) -&gt; None\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@spec\ndef log_parameters(\n    self,\n    parameters: Mapping[Any, Any],\n    /,\n    prefix: str | None = None,\n    step: int | None = None,\n    **kwargs,\n) -&gt; None: ...\n</code></pre>"},{"location":"reference/liblaf/cherries/core/#liblaf.cherries.core.Run.log_temporary","title":"log_temporary","text":"<pre><code>log_temporary(\n    path: PathLike,\n    name: PathLike | None = None,\n    *,\n    metadata: Mapping[str, Any] | None = None,\n    **kwargs,\n) -&gt; None\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@spec\ndef log_temporary(\n    self,\n    path: PathLike,\n    name: PathLike | None = None,\n    *,\n    metadata: Mapping[str, Any] | None = None,\n    **kwargs,\n) -&gt; None: ...\n</code></pre>"},{"location":"reference/liblaf/cherries/core/#liblaf.cherries.core.Run.params","title":"params","text":"<pre><code>params() -&gt; Mapping[str, Any]\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@plugin_property\ndef params(self) -&gt; Mapping[str, Any]:\n    return self.plugin_root.get_params()\n</code></pre>"},{"location":"reference/liblaf/cherries/core/#liblaf.cherries.core.Run.project_dir","title":"project_dir","text":"<pre><code>project_dir() -&gt; Path\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@plugin_cached_property\ndef project_dir(self) -&gt; Path:\n    return path_utils.project_dir()\n</code></pre>"},{"location":"reference/liblaf/cherries/core/#liblaf.cherries.core.Run.project_name","title":"project_name","text":"<pre><code>project_name() -&gt; str | None\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@plugin_cached_property\ndef project_name(self) -&gt; str | None:\n    return self.project_dir.name\n</code></pre>"},{"location":"reference/liblaf/cherries/core/#liblaf.cherries.core.Run.register","title":"register","text":"<pre><code>register(plugin: Plugin) -&gt; None\n</code></pre> Source code in <code>src/liblaf/cherries/core/_plugin.py</code> <pre><code>def register(self, plugin: \"Plugin\") -&gt; None:\n    impls: dict[MethodName, ImplInfo] = collect_impls(plugin)\n    for name in impls:\n        self._cache_sort_plugins.pop(name, None)\n    plugin._plugin_parent = self  # noqa: SLF001\n    self.plugins[plugin.plugin_id] = plugin\n</code></pre>"},{"location":"reference/liblaf/cherries/core/#liblaf.cherries.core.Run.start","title":"start","text":"<pre><code>start(*args, **kwargs) -&gt; None\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@spec(delegate=False)\ndef start(self, *args, **kwargs) -&gt; None:\n    env.read_env(self.entrypoint.parent / \".env\")\n    return self.delegate(\"start\", args, kwargs)\n</code></pre>"},{"location":"reference/liblaf/cherries/core/#liblaf.cherries.core.Run.start_time","title":"start_time","text":"<pre><code>start_time() -&gt; datetime\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@plugin_cached_property\ndef start_time(self) -&gt; datetime.datetime:\n    return datetime.datetime.now().astimezone()\n</code></pre>"},{"location":"reference/liblaf/cherries/core/#liblaf.cherries.core.Run.url","title":"url","text":"<pre><code>url() -&gt; str\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@plugin_property\ndef url(self) -&gt; str:\n    return self.plugin_root.get_url()\n</code></pre>"},{"location":"reference/liblaf/cherries/core/#liblaf.cherries.core.SpecInfo","title":"SpecInfo","text":"<p>Parameters:</p> <ul> <li> <code>delegate</code>               (<code>bool</code>, default:                   <code>True</code> )           \u2013            </li> <li> <code>first_result</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            </li> </ul> <p>Attributes:</p> <ul> <li> <code>delegate</code>               (<code>bool</code>)           \u2013            </li> <li> <code>first_result</code>               (<code>bool</code>)           \u2013            </li> </ul>"},{"location":"reference/liblaf/cherries/core/#liblaf.cherries.core.SpecInfo.delegate","title":"delegate  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>delegate: bool = field(default=True)\n</code></pre>"},{"location":"reference/liblaf/cherries/core/#liblaf.cherries.core.SpecInfo.first_result","title":"first_result  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>first_result: bool = field(default=False)\n</code></pre>"},{"location":"reference/liblaf/cherries/core/#liblaf.cherries.core.collect_impls","title":"collect_impls","text":"<pre><code>collect_impls(cls: Any) -&gt; dict[MethodName, ImplInfo]\n</code></pre> Source code in <code>src/liblaf/cherries/core/_impl.py</code> <pre><code>def collect_impls(cls: Any) -&gt; dict[MethodName, ImplInfo]:\n    if isinstance(cls, type):\n        cls = type(cls)\n    return {\n        name: grapes.wrapt_getattr(method, \"impl\")\n        for name, method in inspect.getmembers(\n            cls, lambda m: grapes.wrapt_getattr(m, \"impl\", None) is not None\n        )\n    }\n</code></pre>"},{"location":"reference/liblaf/cherries/core/#liblaf.cherries.core.collect_specs","title":"collect_specs","text":"<pre><code>collect_specs(\n    cls: type[Plugin] | Plugin,\n) -&gt; dict[str, SpecInfo]\n</code></pre> Source code in <code>src/liblaf/cherries/core/_spec.py</code> <pre><code>def collect_specs(cls: type[Plugin] | Plugin) -&gt; dict[str, SpecInfo]:\n    if isinstance(cls, type):\n        cls = type(cls)\n    return {\n        name: grapes.wrapt_getattr(method, \"spec\")\n        for name, method in inspect.getmembers(\n            cls, lambda m: grapes.wrapt_getattr(m, \"spec\", None) is not None\n        )\n    }\n</code></pre>"},{"location":"reference/liblaf/cherries/core/#liblaf.cherries.core.get_impl_info","title":"get_impl_info","text":"<pre><code>get_impl_info(func: Callable | None) -&gt; ImplInfo | None\n</code></pre> Source code in <code>src/liblaf/cherries/core/_impl.py</code> <pre><code>def get_impl_info(func: Callable | None) -&gt; ImplInfo | None:\n    if func is None:\n        return None\n    return grapes.wrapt_getattr(func, \"impl\", None)\n</code></pre>"},{"location":"reference/liblaf/cherries/core/#liblaf.cherries.core.impl","title":"impl","text":"<pre><code>impl(\n    func: C,\n    /,\n    *,\n    priority: int = 0,\n    after: Iterable[PluginId] = (),\n    before: Iterable[PluginId] = (),\n) -&gt; C\n</code></pre><pre><code>impl(\n    *,\n    priority: int = 0,\n    after: Iterable[PluginId] = (),\n    before: Iterable[PluginId] = (),\n) -&gt; Callable[[C], C]\n</code></pre> <pre><code>impl(\n    func: Callable[P, T] | None = None,\n    /,\n    priority: int = 0,\n    after: Iterable[PluginId] = (),\n    before: Iterable[PluginId] = (),\n) -&gt; Any\n</code></pre> Source code in <code>src/liblaf/cherries/core/_impl.py</code> <pre><code>def impl[**P, T](\n    func: Callable[P, T] | None = None,\n    /,\n    priority: int = 0,\n    after: Iterable[PluginId] = (),\n    before: Iterable[PluginId] = (),\n) -&gt; Any:\n    if func is None:\n        return functools.partial(impl, priority=priority, after=after, before=before)\n\n    info = ImplInfo(after=after, before=before, priority=priority)\n\n    @wrapt.decorator\n    def wrapper(\n        wrapped: Callable[P, T],\n        _instance: Any,\n        args: tuple[Any, ...],\n        kwargs: dict[str, Any],\n    ) -&gt; T:\n        __tracebackhide__ = True\n        return wrapped(*args, **kwargs)\n\n    func = wrapper(func)\n    grapes.wrapt_setattr(func, \"impl\", info)\n    return func\n</code></pre>"},{"location":"reference/liblaf/cherries/core/#liblaf.cherries.core.plugin_cached_property","title":"plugin_cached_property","text":"<pre><code>plugin_cached_property(\n    func: Callable[[Any], T],\n) -&gt; PluginCachedProperty[T]\n</code></pre> Source code in <code>src/liblaf/cherries/core/_utils.py</code> <pre><code>def plugin_cached_property[T](func: Callable[[Any], T]) -&gt; PluginCachedProperty[T]:\n    return PluginCachedProperty(func)\n</code></pre>"},{"location":"reference/liblaf/cherries/core/#liblaf.cherries.core.plugin_property","title":"plugin_property","text":"<pre><code>plugin_property(\n    fget: Callable[[Any], T],\n) -&gt; PluginProperty[T]\n</code></pre> Source code in <code>src/liblaf/cherries/core/_utils.py</code> <pre><code>def plugin_property[T](fget: Callable[[Any], T]) -&gt; PluginProperty[T]:\n    return PluginProperty(fget)\n</code></pre>"},{"location":"reference/liblaf/cherries/core/#liblaf.cherries.core.spec","title":"spec","text":"<pre><code>spec(\n    func: C,\n    /,\n    *,\n    delegate: bool = True,\n    first_result: bool = False,\n) -&gt; C\n</code></pre><pre><code>spec(\n    *, delegate: bool = True, first_result: bool = False\n) -&gt; Callable[[C], C]\n</code></pre> <pre><code>spec(\n    func: Callable[P, T] | None = None,\n    /,\n    *,\n    delegate: bool = True,\n    first_result: bool = False,\n) -&gt; Any\n</code></pre> Source code in <code>src/liblaf/cherries/core/_spec.py</code> <pre><code>def spec[**P, T](\n    func: Callable[P, T] | None = None,\n    /,\n    *,\n    delegate: bool = True,\n    first_result: bool = False,\n) -&gt; Any:\n    if func is None:\n        return functools.partial(spec, delegate=delegate, first_result=first_result)\n\n    info = SpecInfo(delegate=delegate, first_result=first_result)\n\n    @wrapt.decorator\n    def wrapper(\n        wrapped: Callable[P, T],\n        instance: Plugin,\n        args: tuple[Any, ...],\n        kwargs: dict[str, Any],\n    ) -&gt; T:\n        __tracebackhide__ = True\n        if info.delegate:\n            return instance.delegate(\n                wrapped.__name__, args, kwargs, first_result=info.first_result\n            )\n        return wrapped(*args, **kwargs)\n\n    func: Any = wrapper(func)\n    grapes.wrapt_setattr(func, \"spec\", info)\n    return func\n</code></pre>"},{"location":"reference/liblaf/cherries/core/typing/","title":"typing","text":""},{"location":"reference/liblaf/cherries/core/typing/#liblaf.cherries.core.typing","title":"liblaf.cherries.core.typing","text":"<p>Type Aliases:</p> <ul> <li> <code>MethodName</code>           \u2013            </li> <li> <code>PluginId</code>           \u2013            </li> </ul>"},{"location":"reference/liblaf/cherries/core/typing/#liblaf.cherries.core.typing.MethodName","title":"MethodName","text":"<pre><code>MethodName = str\n</code></pre>"},{"location":"reference/liblaf/cherries/core/typing/#liblaf.cherries.core.typing.PluginId","title":"PluginId","text":"<pre><code>PluginId = str\n</code></pre>"},{"location":"reference/liblaf/cherries/meta/","title":"meta","text":""},{"location":"reference/liblaf/cherries/meta/#liblaf.cherries.meta","title":"liblaf.cherries.meta","text":"<p>Functions:</p> <ul> <li> <code>exp_name</code>             \u2013              </li> <li> <code>git_auto_commit</code>             \u2013              </li> <li> <code>git_branch</code>             \u2013              </li> <li> <code>git_commit_sha</code>             \u2013              </li> <li> <code>git_commit_url</code>             \u2013              </li> <li> <code>git_info</code>             \u2013              </li> <li> <code>project_name</code>             \u2013              </li> </ul>"},{"location":"reference/liblaf/cherries/meta/#liblaf.cherries.meta.exp_name","title":"exp_name","text":"<pre><code>exp_name() -&gt; str\n</code></pre> Source code in <code>src/liblaf/cherries/meta/_name.py</code> <pre><code>def exp_name() -&gt; str:\n    exp_dir: Path = path_utils.exp_dir(absolute=False)\n    exp_name: str = path_utils.as_posix(exp_dir)\n    exp_name = exp_name.removeprefix(\"exp\")\n    exp_name = exp_name.removeprefix(\"/\")\n    return exp_name\n</code></pre>"},{"location":"reference/liblaf/cherries/meta/#liblaf.cherries.meta.git_auto_commit","title":"git_auto_commit","text":"<pre><code>git_auto_commit(\n    message: str = \"chore(cherries): auto commit\",\n    *,\n    dry_run: bool = False,\n) -&gt; None\n</code></pre> Source code in <code>src/liblaf/cherries/meta/_git.py</code> <pre><code>def git_auto_commit(\n    message: str = \"chore(cherries): auto commit\", *, dry_run: bool = False\n) -&gt; None:\n    repo: git.Repo = _repo()\n    if not repo.is_dirty(untracked_files=True):\n        return\n    repo.git.add(all=True, dry_run=dry_run)\n    sp.run([\"git\", \"status\"], check=False)\n    if dry_run:\n        return\n    repo.git.commit(message=message)\n</code></pre>"},{"location":"reference/liblaf/cherries/meta/#liblaf.cherries.meta.git_branch","title":"git_branch","text":"<pre><code>git_branch() -&gt; str\n</code></pre> Source code in <code>src/liblaf/cherries/meta/_git.py</code> <pre><code>def git_branch() -&gt; str:\n    repo: git.Repo = _repo()\n    return repo.active_branch.name\n</code></pre>"},{"location":"reference/liblaf/cherries/meta/#liblaf.cherries.meta.git_commit_sha","title":"git_commit_sha","text":"<pre><code>git_commit_sha() -&gt; str\n</code></pre> Source code in <code>src/liblaf/cherries/meta/_git.py</code> <pre><code>def git_commit_sha() -&gt; str:\n    repo: git.Repo = _repo()\n    return repo.head.commit.hexsha\n</code></pre>"},{"location":"reference/liblaf/cherries/meta/#liblaf.cherries.meta.git_commit_url","title":"git_commit_url","text":"<pre><code>git_commit_url(sha: str | None = None) -&gt; str\n</code></pre> Source code in <code>src/liblaf/cherries/meta/_git.py</code> <pre><code>def git_commit_url(sha: str | None = None) -&gt; str:\n    if sha is None:\n        sha = git_commit_sha()\n    info: grapes.git.GitInfo = git_info()\n    if info.platform == \"github\":\n        return f\"https://github.com/{info.owner}/{info.repo}/commit/{sha}\"\n    raise NotImplementedError\n</code></pre>"},{"location":"reference/liblaf/cherries/meta/#liblaf.cherries.meta.git_info","title":"git_info","text":"<pre><code>git_info() -&gt; GitInfo\n</code></pre> Source code in <code>src/liblaf/cherries/meta/_git.py</code> <pre><code>def git_info() -&gt; grapes.git.GitInfo:\n    info: grapes.git.GitInfo = grapes.git.info(\n        path_utils.exp_dir(absolute=True), search_parent_directories=True\n    )\n    return info\n</code></pre>"},{"location":"reference/liblaf/cherries/meta/#liblaf.cherries.meta.project_name","title":"project_name","text":"<pre><code>project_name() -&gt; str | None\n</code></pre> Source code in <code>src/liblaf/cherries/meta/_name.py</code> <pre><code>def project_name() -&gt; str | None:\n    try:\n        info: grapes.git.GitInfo = git_info()\n    except git.exc.InvalidGitRepositoryError:\n        return None\n    else:\n        return info.repo\n</code></pre>"},{"location":"reference/liblaf/cherries/path_utils/","title":"path_utils","text":""},{"location":"reference/liblaf/cherries/path_utils/#liblaf.cherries.path_utils","title":"liblaf.cherries.path_utils","text":"<p>Functions:</p> <ul> <li> <code>as_os_path</code>             \u2013              </li> <li> <code>as_path</code>             \u2013              </li> <li> <code>as_posix</code>             \u2013              </li> <li> <code>config</code>             \u2013              </li> <li> <code>data</code>             \u2013              </li> <li> <code>entrypoint</code>             \u2013              </li> <li> <code>exp_dir</code>             \u2013              </li> <li> <code>params</code>             \u2013              </li> <li> <code>path</code>             \u2013              </li> <li> <code>project_dir</code>             \u2013              </li> <li> <code>src</code>             \u2013              </li> </ul>"},{"location":"reference/liblaf/cherries/path_utils/#liblaf.cherries.path_utils.as_os_path","title":"as_os_path","text":"<pre><code>as_os_path(path: PathLike) -&gt; str\n</code></pre><pre><code>as_os_path(path: None) -&gt; None\n</code></pre> <pre><code>as_os_path(path: PathLike | None) -&gt; str | None\n</code></pre> Source code in <code>src/liblaf/cherries/path_utils/_convert.py</code> <pre><code>def as_os_path(path: PathLike | None) -&gt; str | None:\n    if path is None:\n        return None\n    return str(path)\n</code></pre>"},{"location":"reference/liblaf/cherries/path_utils/#liblaf.cherries.path_utils.as_path","title":"as_path","text":"<pre><code>as_path(path: PathLike) -&gt; Path\n</code></pre><pre><code>as_path(path: None) -&gt; None\n</code></pre> <pre><code>as_path(path: PathLike | None) -&gt; Path | None\n</code></pre> Source code in <code>src/liblaf/cherries/path_utils/_convert.py</code> <pre><code>def as_path(path: PathLike | None) -&gt; Path | None:\n    if path is None:\n        return None\n    return Path(path)\n</code></pre>"},{"location":"reference/liblaf/cherries/path_utils/#liblaf.cherries.path_utils.as_posix","title":"as_posix","text":"<pre><code>as_posix(path: PathLike) -&gt; str\n</code></pre><pre><code>as_posix(path: None) -&gt; None\n</code></pre> <pre><code>as_posix(path: PathLike | None) -&gt; str | None\n</code></pre> Source code in <code>src/liblaf/cherries/path_utils/_convert.py</code> <pre><code>def as_posix(path: PathLike | None) -&gt; str | None:\n    if path is None:\n        return None\n    if isinstance(path, str):\n        return path\n    return Path(path).as_posix()\n</code></pre>"},{"location":"reference/liblaf/cherries/path_utils/#liblaf.cherries.path_utils.config","title":"config","text":"<pre><code>config(\n    path: PathLike = \"\",\n    *,\n    mkdir: bool = True,\n    prefix: PathLike = \"config\",\n) -&gt; Path\n</code></pre> Source code in <code>src/liblaf/cherries/path_utils/_special.py</code> <pre><code>def config(\n    path: PathLike = \"\", *, mkdir: bool = True, prefix: PathLike = \"config\"\n) -&gt; Path:\n    return _path(path, mkdir=mkdir, prefix=prefix)\n</code></pre>"},{"location":"reference/liblaf/cherries/path_utils/#liblaf.cherries.path_utils.data","title":"data","text":"<pre><code>data(\n    path: PathLike = \"\",\n    *,\n    mkdir: bool = True,\n    prefix: PathLike = \"data\",\n) -&gt; Path\n</code></pre> Source code in <code>src/liblaf/cherries/path_utils/_special.py</code> <pre><code>def data(path: PathLike = \"\", *, mkdir: bool = True, prefix: PathLike = \"data\") -&gt; Path:\n    return _path(path, mkdir=mkdir, prefix=prefix)\n</code></pre>"},{"location":"reference/liblaf/cherries/path_utils/#liblaf.cherries.path_utils.entrypoint","title":"entrypoint","text":"<pre><code>entrypoint(*, absolute: bool = True) -&gt; Path\n</code></pre> Source code in <code>src/liblaf/cherries/path_utils/_path.py</code> <pre><code>@utils.cache\ndef entrypoint(*, absolute: bool = True) -&gt; Path:\n    path = Path(sys.argv[0])\n    if absolute:\n        return path.absolute()\n    return path.relative_to(project_dir())\n</code></pre>"},{"location":"reference/liblaf/cherries/path_utils/#liblaf.cherries.path_utils.exp_dir","title":"exp_dir","text":"<pre><code>exp_dir(*, absolute: bool = True) -&gt; Path\n</code></pre> Source code in <code>src/liblaf/cherries/path_utils/_path.py</code> <pre><code>@utils.cache\ndef exp_dir(*, absolute: bool = True) -&gt; Path:\n    entrypoint_: Path = entrypoint(absolute=True)\n    parent: Path = entrypoint_.parent\n    exp_dir: Path\n    exp_dir = parent.parent if parent.name in EXP_DIR_NAMES else parent\n    if absolute:\n        return exp_dir\n    exp_dir = exp_dir.relative_to(project_dir())\n    return exp_dir\n</code></pre>"},{"location":"reference/liblaf/cherries/path_utils/#liblaf.cherries.path_utils.params","title":"params","text":"<pre><code>params(\n    path: PathLike = \"\",\n    *,\n    mkdir: bool = True,\n    prefix: PathLike = \"params\",\n) -&gt; Path\n</code></pre> Source code in <code>src/liblaf/cherries/path_utils/_special.py</code> <pre><code>def params(\n    path: PathLike = \"\", *, mkdir: bool = True, prefix: PathLike = \"params\"\n) -&gt; Path:\n    return _path(path, mkdir=mkdir, prefix=prefix)\n</code></pre>"},{"location":"reference/liblaf/cherries/path_utils/#liblaf.cherries.path_utils.path","title":"path","text":"<pre><code>path(\n    path: PathLike = \"\",\n    *,\n    mkdir: bool = True,\n    prefix: PathLike = \"\",\n) -&gt; Path\n</code></pre> Source code in <code>src/liblaf/cherries/path_utils/_special.py</code> <pre><code>def path(path: PathLike = \"\", *, mkdir: bool = True, prefix: PathLike = \"\") -&gt; Path:\n    return _path(path, mkdir=mkdir, prefix=prefix)\n</code></pre>"},{"location":"reference/liblaf/cherries/path_utils/#liblaf.cherries.path_utils.project_dir","title":"project_dir","text":"<pre><code>project_dir() -&gt; Path\n</code></pre> Source code in <code>src/liblaf/cherries/path_utils/_path.py</code> <pre><code>@utils.cache\ndef project_dir() -&gt; Path:\n    exp_dir_: Path = exp_dir(absolute=True)\n    try:\n        repo = git.Repo(exp_dir_, search_parent_directories=True)\n    except git.exc.InvalidGitRepositoryError:\n        logger.warning(\"Not in a git repository, using current directory\", once=True)\n        return exp_dir_\n    else:\n        return Path(repo.working_dir)\n</code></pre>"},{"location":"reference/liblaf/cherries/path_utils/#liblaf.cherries.path_utils.src","title":"src","text":"<pre><code>src(\n    path: PathLike = \"\",\n    *,\n    mkdir: bool = True,\n    prefix: PathLike = \"src\",\n) -&gt; Path\n</code></pre> Source code in <code>src/liblaf/cherries/path_utils/_special.py</code> <pre><code>def src(path: PathLike = \"\", *, mkdir: bool = True, prefix: PathLike = \"src\") -&gt; Path:\n    return _path(path, mkdir=mkdir, prefix=prefix)\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/","title":"plugins","text":""},{"location":"reference/liblaf/cherries/plugins/#liblaf.cherries.plugins","title":"liblaf.cherries.plugins","text":"<p>Modules:</p> <ul> <li> <code>comet</code>           \u2013            </li> <li> <code>dvc</code>           \u2013            </li> <li> <code>git_</code>           \u2013            </li> <li> <code>local</code>           \u2013            </li> <li> <code>logging</code>           \u2013            </li> </ul> <p>Classes:</p> <ul> <li> <code>Comet</code>           \u2013            </li> <li> <code>Dvc</code>           \u2013            </li> <li> <code>Git</code>           \u2013            </li> <li> <code>Local</code>           \u2013            </li> <li> <code>Logging</code>           \u2013            </li> </ul>"},{"location":"reference/liblaf/cherries/plugins/#liblaf.cherries.plugins.Comet","title":"Comet","text":"<p>               Bases: <code>Run</code></p> <p>Parameters:</p> <ul> <li> <code>plugins</code>               (<code>dict[PluginId, str]</code>, default:                   <code>&lt;class 'dict'&gt;</code> )           \u2013            <p>dict() -&gt; new empty dictionary dict(mapping) -&gt; new dictionary initialized from a mapping object\u2019s     (key, value) pairs dict(iterable) -&gt; new dictionary initialized as if via:     d = {}     for k, v in iterable:         d[k] = v dict(**kwargs) -&gt; new dictionary initialized with the name=value pairs     in the keyword argument list.  For example:  dict(one=1, two=2)</p> </li> <li> <code>disabled</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            </li> <li> <code>enable_dvc</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            </li> </ul> <p>Methods:</p> <ul> <li> <code>data_dir</code>             \u2013              </li> <li> <code>delegate</code>             \u2013              </li> <li> <code>end</code>             \u2013              </li> <li> <code>entrypoint</code>             \u2013              </li> <li> <code>exp_dir</code>             \u2013              </li> <li> <code>exp_name</code>             \u2013              </li> <li> <code>get_others</code>             \u2013              </li> <li> <code>get_params</code>             \u2013              </li> <li> <code>get_url</code>             \u2013              </li> <li> <code>log_asset</code>             \u2013              </li> <li> <code>log_input</code>             \u2013              </li> <li> <code>log_metric</code>             \u2013              </li> <li> <code>log_metrics</code>             \u2013              </li> <li> <code>log_other</code>             \u2013              </li> <li> <code>log_others</code>             \u2013              </li> <li> <code>log_output</code>             \u2013              </li> <li> <code>log_parameter</code>             \u2013              </li> <li> <code>log_parameters</code>             \u2013              </li> <li> <code>log_temporary</code>             \u2013              </li> <li> <code>params</code>             \u2013              </li> <li> <code>project_dir</code>             \u2013              </li> <li> <code>project_name</code>             \u2013              </li> <li> <code>register</code>             \u2013              </li> <li> <code>start</code>             \u2013              </li> <li> <code>start_time</code>             \u2013              </li> <li> <code>url</code>             \u2013              </li> </ul> <p>Attributes:</p> <ul> <li> <code>disabled</code>               (<code>bool</code>)           \u2013            </li> <li> <code>enable_dvc</code>               (<code>bool</code>)           \u2013            </li> <li> <code>experiment</code>               (<code>CometExperiment</code>)           \u2013            </li> <li> <code>plugin_id</code>               (<code>str</code>)           \u2013            </li> <li> <code>plugin_root</code>               (<code>Self</code>)           \u2013            </li> <li> <code>plugins</code>               (<code>dict[PluginId, Plugin]</code>)           \u2013            </li> </ul>"},{"location":"reference/liblaf/cherries/plugins/#liblaf.cherries.plugins.Comet.disabled","title":"disabled  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>disabled: bool = field(default=False)\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/#liblaf.cherries.plugins.Comet.enable_dvc","title":"enable_dvc  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>enable_dvc: bool = False\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/#liblaf.cherries.plugins.Comet.experiment","title":"experiment  <code>property</code>","text":"<pre><code>experiment: CometExperiment\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/#liblaf.cherries.plugins.Comet.plugin_id","title":"plugin_id  <code>property</code>","text":"<pre><code>plugin_id: str\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/#liblaf.cherries.plugins.Comet.plugin_root","title":"plugin_root  <code>property</code>","text":"<pre><code>plugin_root: Self\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/#liblaf.cherries.plugins.Comet.plugins","title":"plugins  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>plugins: dict[PluginId, Plugin] = field(\n    factory=dict, kw_only=True\n)\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/#liblaf.cherries.plugins.Comet.data_dir","title":"data_dir","text":"<pre><code>data_dir() -&gt; Path\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@plugin_cached_property\ndef data_dir(self) -&gt; Path:\n    return path_utils.data()\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/#liblaf.cherries.plugins.Comet.delegate","title":"delegate","text":"<pre><code>delegate(\n    method: MethodName,\n    args: Sequence[Any] = (),\n    kwargs: Mapping[str, Any] = {},\n    *,\n    first_result: bool = False,\n) -&gt; Any\n</code></pre> Source code in <code>src/liblaf/cherries/core/_plugin.py</code> <pre><code>def delegate(\n    self,\n    method: MethodName,\n    args: Sequence[Any] = (),\n    kwargs: Mapping[str, Any] = {},\n    *,\n    first_result: bool = False,\n) -&gt; Any:\n    __tracebackhide__ = True\n    plugins: Sequence[Plugin] = self._plugins_sort(method)\n    if not plugins:\n        if first_result:\n            return None\n        return []\n    results: list[Any] = []\n    for plugin in plugins:\n        try:\n            result: Any = getattr(plugin, method)(*args, **kwargs)\n        except BaseException as e:\n            if isinstance(e, (KeyboardInterrupt, SystemExit)):\n                raise\n            logger.exception(\"Plugin {}\", plugin.plugin_id)\n        else:\n            if result is None:\n                continue\n            if first_result:\n                return result\n            results.append(result)\n    return results\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/#liblaf.cherries.plugins.Comet.end","title":"end","text":"<pre><code>end(*args, **kwargs) -&gt; None\n</code></pre> Source code in <code>src/liblaf/cherries/plugins/comet.py</code> <pre><code>@override\n@core.impl(after=(\"Git\", \"Logging\"))\ndef end(self, *args, **kwargs) -&gt; None:\n    try:\n        self._log_asset_git_end()\n    except git.GitError as err:\n        logger.exception(err)\n    self.experiment.end()\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/#liblaf.cherries.plugins.Comet.entrypoint","title":"entrypoint","text":"<pre><code>entrypoint() -&gt; Path\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@plugin_cached_property\ndef entrypoint(self) -&gt; Path:\n    return path_utils.entrypoint()\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/#liblaf.cherries.plugins.Comet.exp_dir","title":"exp_dir","text":"<pre><code>exp_dir() -&gt; Path\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@plugin_cached_property\ndef exp_dir(self) -&gt; Path:\n    return path_utils.exp_dir()\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/#liblaf.cherries.plugins.Comet.exp_name","title":"exp_name","text":"<pre><code>exp_name() -&gt; str\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@plugin_cached_property\ndef exp_name(self) -&gt; str:\n    return (\n        self.entrypoint.relative_to(self.project_dir)\n        .as_posix()\n        .removeprefix(\"exp/\")\n    )\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/#liblaf.cherries.plugins.Comet.get_others","title":"get_others","text":"<pre><code>get_others() -&gt; Mapping[str, Any]\n</code></pre> Source code in <code>src/liblaf/cherries/plugins/comet.py</code> <pre><code>@override\n@core.impl\ndef get_others(self) -&gt; Mapping[str, Any]:\n    return self.experiment.others\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/#liblaf.cherries.plugins.Comet.get_params","title":"get_params","text":"<pre><code>get_params() -&gt; Mapping[str, Any]\n</code></pre> Source code in <code>src/liblaf/cherries/plugins/comet.py</code> <pre><code>@override\n@core.impl\ndef get_params(self) -&gt; Mapping[str, Any]:\n    return self.experiment.params\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/#liblaf.cherries.plugins.Comet.get_url","title":"get_url","text":"<pre><code>get_url() -&gt; str\n</code></pre> Source code in <code>src/liblaf/cherries/plugins/comet.py</code> <pre><code>@override\n@core.impl\ndef get_url(self) -&gt; str:\n    return self.experiment.url  # pyright: ignore[reportReturnType]\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/#liblaf.cherries.plugins.Comet.log_asset","title":"log_asset","text":"<pre><code>log_asset(\n    path: PathLike, name: PathLike | None = None, **kwargs\n) -&gt; None\n</code></pre> Source code in <code>src/liblaf/cherries/plugins/comet.py</code> <pre><code>@override\n@core.impl(after=(\"Dvc\",))\ndef log_asset(\n    self,\n    path: PathLike,\n    name: PathLike | None = None,\n    **kwargs,\n) -&gt; None:\n    if self._log_asset_git(path, name, **kwargs):\n        return\n    if self.enable_dvc and self._log_asset_dvc(path, name, **kwargs):\n        return\n    name = path_utils.as_posix(name)\n    self.experiment.log_asset(path, name, **kwargs)\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/#liblaf.cherries.plugins.Comet.log_input","title":"log_input","text":"<pre><code>log_input(\n    path: PathLike,\n    name: PathLike | None = None,\n    *,\n    metadata: Mapping[str, Any] | None = None,\n    **kwargs,\n) -&gt; None\n</code></pre> Source code in <code>src/liblaf/cherries/plugins/comet.py</code> <pre><code>@override\n@core.impl(after=(\"Dvc\",))\ndef log_input(\n    self,\n    path: PathLike,\n    name: PathLike | None = None,\n    *,\n    metadata: Mapping[str, Any] | None = None,\n    **kwargs,\n) -&gt; None:\n    if name is None:\n        path = Path(path)\n        name = f\"inputs/{path.name}\"\n    metadata = toolz.assoc(metadata or {}, \"type\", \"input\")\n    self.log_asset(path, name, metadata=metadata, **kwargs)\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/#liblaf.cherries.plugins.Comet.log_metric","title":"log_metric","text":"<pre><code>log_metric(*args, **kwargs) -&gt; None\n</code></pre> Source code in <code>src/liblaf/cherries/plugins/comet.py</code> <pre><code>@override\n@core.impl\ndef log_metric(self, *args, **kwargs) -&gt; None:\n    return self.experiment.log_metric(*args, **kwargs)\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/#liblaf.cherries.plugins.Comet.log_metrics","title":"log_metrics","text":"<pre><code>log_metrics(*args, **kwargs) -&gt; None\n</code></pre> Source code in <code>src/liblaf/cherries/plugins/comet.py</code> <pre><code>@override\n@core.impl\ndef log_metrics(self, *args, **kwargs) -&gt; None:\n    return self.experiment.log_metrics(*args, **kwargs)\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/#liblaf.cherries.plugins.Comet.log_other","title":"log_other","text":"<pre><code>log_other(*args, **kwargs) -&gt; None\n</code></pre> Source code in <code>src/liblaf/cherries/plugins/comet.py</code> <pre><code>@override\n@core.impl\ndef log_other(self, *args, **kwargs) -&gt; None:\n    return self.experiment.log_other(*args, **kwargs)\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/#liblaf.cherries.plugins.Comet.log_others","title":"log_others","text":"<pre><code>log_others(*args, **kwargs) -&gt; None\n</code></pre> Source code in <code>src/liblaf/cherries/plugins/comet.py</code> <pre><code>@override\n@core.impl\ndef log_others(self, *args, **kwargs) -&gt; None:\n    return self.experiment.log_others(*args, **kwargs)\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/#liblaf.cherries.plugins.Comet.log_output","title":"log_output","text":"<pre><code>log_output(\n    path: PathLike,\n    name: PathLike | None = None,\n    *,\n    metadata: Mapping[str, Any] | None = None,\n    **kwargs,\n) -&gt; None\n</code></pre> Source code in <code>src/liblaf/cherries/plugins/comet.py</code> <pre><code>@override\n@core.impl(after=(\"Dvc\",))\ndef log_output(\n    self,\n    path: PathLike,\n    name: PathLike | None = None,\n    *,\n    metadata: Mapping[str, Any] | None = None,\n    **kwargs,\n) -&gt; None:\n    if name is None:\n        path = Path(path)\n        name = f\"outputs/{path.name}\"\n    metadata = toolz.assoc(metadata or {}, \"type\", \"output\")\n    self.log_asset(path, name, metadata=metadata, **kwargs)\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/#liblaf.cherries.plugins.Comet.log_parameter","title":"log_parameter","text":"<pre><code>log_parameter(*args, **kwargs) -&gt; None\n</code></pre> Source code in <code>src/liblaf/cherries/plugins/comet.py</code> <pre><code>@override\n@core.impl\ndef log_parameter(self, *args, **kwargs) -&gt; None:\n    return self.experiment.log_parameter(*args, **kwargs)\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/#liblaf.cherries.plugins.Comet.log_parameters","title":"log_parameters","text":"<pre><code>log_parameters(*args, **kwargs) -&gt; None\n</code></pre> Source code in <code>src/liblaf/cherries/plugins/comet.py</code> <pre><code>@override\n@core.impl\ndef log_parameters(self, *args, **kwargs) -&gt; None:\n    return self.experiment.log_parameters(*args, **kwargs)\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/#liblaf.cherries.plugins.Comet.log_temporary","title":"log_temporary","text":"<pre><code>log_temporary(\n    path: PathLike,\n    name: PathLike | None = None,\n    *,\n    metadata: Mapping[str, Any] | None = None,\n    **kwargs,\n) -&gt; None\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@spec\ndef log_temporary(\n    self,\n    path: PathLike,\n    name: PathLike | None = None,\n    *,\n    metadata: Mapping[str, Any] | None = None,\n    **kwargs,\n) -&gt; None: ...\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/#liblaf.cherries.plugins.Comet.params","title":"params","text":"<pre><code>params() -&gt; Mapping[str, Any]\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@plugin_property\ndef params(self) -&gt; Mapping[str, Any]:\n    return self.plugin_root.get_params()\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/#liblaf.cherries.plugins.Comet.project_dir","title":"project_dir","text":"<pre><code>project_dir() -&gt; Path\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@plugin_cached_property\ndef project_dir(self) -&gt; Path:\n    return path_utils.project_dir()\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/#liblaf.cherries.plugins.Comet.project_name","title":"project_name","text":"<pre><code>project_name() -&gt; str | None\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@plugin_cached_property\ndef project_name(self) -&gt; str | None:\n    return self.project_dir.name\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/#liblaf.cherries.plugins.Comet.register","title":"register","text":"<pre><code>register(plugin: Plugin) -&gt; None\n</code></pre> Source code in <code>src/liblaf/cherries/core/_plugin.py</code> <pre><code>def register(self, plugin: \"Plugin\") -&gt; None:\n    impls: dict[MethodName, ImplInfo] = collect_impls(plugin)\n    for name in impls:\n        self._cache_sort_plugins.pop(name, None)\n    plugin._plugin_parent = self  # noqa: SLF001\n    self.plugins[plugin.plugin_id] = plugin\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/#liblaf.cherries.plugins.Comet.start","title":"start","text":"<pre><code>start(*args, **kwargs) -&gt; None\n</code></pre> Source code in <code>src/liblaf/cherries/plugins/comet.py</code> <pre><code>@override\n@core.impl(after=(\"Logging\",))\ndef start(self, *args, **kwargs) -&gt; None:\n    logger.disable(\"comet_ml\")\n    try:\n        comet_ml.start(\n            project_name=self.project_name,\n            experiment_config=comet_ml.ExperimentConfig(\n                disabled=self.disabled, name=self.exp_name\n            ),\n        )\n    except ValueError as err:\n        logger.warning(err)\n    logger.enable(\"comet_ml\")\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/#liblaf.cherries.plugins.Comet.start_time","title":"start_time","text":"<pre><code>start_time() -&gt; datetime\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@plugin_cached_property\ndef start_time(self) -&gt; datetime.datetime:\n    return datetime.datetime.now().astimezone()\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/#liblaf.cherries.plugins.Comet.url","title":"url","text":"<pre><code>url() -&gt; str\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@plugin_property\ndef url(self) -&gt; str:\n    return self.plugin_root.get_url()\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/#liblaf.cherries.plugins.Dvc","title":"Dvc","text":"<p>               Bases: <code>Run</code></p> <p>Parameters:</p> <ul> <li> <code>plugins</code>               (<code>dict[PluginId, str]</code>, default:                   <code>&lt;class 'dict'&gt;</code> )           \u2013            <p>dict() -&gt; new empty dictionary dict(mapping) -&gt; new dictionary initialized from a mapping object\u2019s     (key, value) pairs dict(iterable) -&gt; new dictionary initialized as if via:     d = {}     for k, v in iterable:         d[k] = v dict(**kwargs) -&gt; new dictionary initialized with the name=value pairs     in the keyword argument list.  For example:  dict(one=1, two=2)</p> </li> </ul> <p>Methods:</p> <ul> <li> <code>check_ignore</code>             \u2013              </li> <li> <code>data_dir</code>             \u2013              </li> <li> <code>delegate</code>             \u2013              </li> <li> <code>end</code>             \u2013              </li> <li> <code>entrypoint</code>             \u2013              </li> <li> <code>exp_dir</code>             \u2013              </li> <li> <code>exp_name</code>             \u2013              </li> <li> <code>get_others</code>             \u2013              </li> <li> <code>get_params</code>             \u2013              </li> <li> <code>get_url</code>             \u2013              </li> <li> <code>log_asset</code>             \u2013              </li> <li> <code>log_input</code>             \u2013              </li> <li> <code>log_metric</code>             \u2013              </li> <li> <code>log_metrics</code>             \u2013              </li> <li> <code>log_other</code>             \u2013              </li> <li> <code>log_others</code>             \u2013              </li> <li> <code>log_output</code>             \u2013              </li> <li> <code>log_parameter</code>             \u2013              </li> <li> <code>log_parameters</code>             \u2013              </li> <li> <code>log_temporary</code>             \u2013              </li> <li> <code>params</code>             \u2013              </li> <li> <code>project_dir</code>             \u2013              </li> <li> <code>project_name</code>             \u2013              </li> <li> <code>register</code>             \u2013              </li> <li> <code>start</code>             \u2013              </li> <li> <code>start_time</code>             \u2013              </li> <li> <code>url</code>             \u2013              </li> </ul> <p>Attributes:</p> <ul> <li> <code>plugin_id</code>               (<code>str</code>)           \u2013            </li> <li> <code>plugin_root</code>               (<code>Self</code>)           \u2013            </li> <li> <code>plugins</code>               (<code>dict[PluginId, Plugin]</code>)           \u2013            </li> </ul>"},{"location":"reference/liblaf/cherries/plugins/#liblaf.cherries.plugins.Dvc.plugin_id","title":"plugin_id  <code>property</code>","text":"<pre><code>plugin_id: str\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/#liblaf.cherries.plugins.Dvc.plugin_root","title":"plugin_root  <code>property</code>","text":"<pre><code>plugin_root: Self\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/#liblaf.cherries.plugins.Dvc.plugins","title":"plugins  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>plugins: dict[PluginId, Plugin] = field(\n    factory=dict, kw_only=True\n)\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/#liblaf.cherries.plugins.Dvc.check_ignore","title":"check_ignore","text":"<pre><code>check_ignore(path: PathLike) -&gt; bool\n</code></pre> Source code in <code>src/liblaf/cherries/plugins/dvc.py</code> <pre><code>def check_ignore(self, path: PathLike) -&gt; bool:\n    process: subprocess.CompletedProcess[bytes] = subprocess.run(\n        [\"dvc\", \"check-ignore\", \"--quiet\", path], check=False\n    )\n    return process.returncode == 0\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/#liblaf.cherries.plugins.Dvc.data_dir","title":"data_dir","text":"<pre><code>data_dir() -&gt; Path\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@plugin_cached_property\ndef data_dir(self) -&gt; Path:\n    return path_utils.data()\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/#liblaf.cherries.plugins.Dvc.delegate","title":"delegate","text":"<pre><code>delegate(\n    method: MethodName,\n    args: Sequence[Any] = (),\n    kwargs: Mapping[str, Any] = {},\n    *,\n    first_result: bool = False,\n) -&gt; Any\n</code></pre> Source code in <code>src/liblaf/cherries/core/_plugin.py</code> <pre><code>def delegate(\n    self,\n    method: MethodName,\n    args: Sequence[Any] = (),\n    kwargs: Mapping[str, Any] = {},\n    *,\n    first_result: bool = False,\n) -&gt; Any:\n    __tracebackhide__ = True\n    plugins: Sequence[Plugin] = self._plugins_sort(method)\n    if not plugins:\n        if first_result:\n            return None\n        return []\n    results: list[Any] = []\n    for plugin in plugins:\n        try:\n            result: Any = getattr(plugin, method)(*args, **kwargs)\n        except BaseException as e:\n            if isinstance(e, (KeyboardInterrupt, SystemExit)):\n                raise\n            logger.exception(\"Plugin {}\", plugin.plugin_id)\n        else:\n            if result is None:\n                continue\n            if first_result:\n                return result\n            results.append(result)\n    return results\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/#liblaf.cherries.plugins.Dvc.end","title":"end","text":"<pre><code>end(*args, **kwargs) -&gt; None\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@spec\ndef end(self, *args, **kwargs) -&gt; None: ...\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/#liblaf.cherries.plugins.Dvc.entrypoint","title":"entrypoint","text":"<pre><code>entrypoint() -&gt; Path\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@plugin_cached_property\ndef entrypoint(self) -&gt; Path:\n    return path_utils.entrypoint()\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/#liblaf.cherries.plugins.Dvc.exp_dir","title":"exp_dir","text":"<pre><code>exp_dir() -&gt; Path\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@plugin_cached_property\ndef exp_dir(self) -&gt; Path:\n    return path_utils.exp_dir()\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/#liblaf.cherries.plugins.Dvc.exp_name","title":"exp_name","text":"<pre><code>exp_name() -&gt; str\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@plugin_cached_property\ndef exp_name(self) -&gt; str:\n    return (\n        self.entrypoint.relative_to(self.project_dir)\n        .as_posix()\n        .removeprefix(\"exp/\")\n    )\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/#liblaf.cherries.plugins.Dvc.get_others","title":"get_others","text":"<pre><code>get_others() -&gt; Mapping[str, Any]\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@spec(first_result=True)\ndef get_others(self) -&gt; Mapping[str, Any]: ...\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/#liblaf.cherries.plugins.Dvc.get_params","title":"get_params","text":"<pre><code>get_params() -&gt; Mapping[str, Any]\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@spec(first_result=True)\ndef get_params(self) -&gt; Mapping[str, Any]: ...\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/#liblaf.cherries.plugins.Dvc.get_url","title":"get_url","text":"<pre><code>get_url() -&gt; str\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@spec(first_result=True)\ndef get_url(self) -&gt; str: ...\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/#liblaf.cherries.plugins.Dvc.log_asset","title":"log_asset","text":"<pre><code>log_asset(path: PathLike, *args, **kwargs) -&gt; None\n</code></pre> Source code in <code>src/liblaf/cherries/plugins/dvc.py</code> <pre><code>@override\n@core.impl(before=(\"Comet\",))\ndef log_asset(self, path: PathLike, *args, **kwargs) -&gt; None:\n    if self.check_ignore(path):\n        return\n    self._dvc(\"add\", \"--quiet\", path)\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/#liblaf.cherries.plugins.Dvc.log_input","title":"log_input","text":"<pre><code>log_input(*args, **kwargs) -&gt; None\n</code></pre> Source code in <code>src/liblaf/cherries/plugins/dvc.py</code> <pre><code>@override\n@core.impl(before=(\"Comet\",))\ndef log_input(self, *args, **kwargs) -&gt; None:\n    self.log_asset(*args, **kwargs)\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/#liblaf.cherries.plugins.Dvc.log_metric","title":"log_metric","text":"<pre><code>log_metric(\n    name: str,\n    value: Any,\n    /,\n    step: int | None = None,\n    epoch: int | None = None,\n    **kwargs,\n) -&gt; None\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@spec\ndef log_metric(\n    self,\n    name: str,\n    value: Any,\n    /,\n    step: int | None = None,\n    epoch: int | None = None,\n    **kwargs,\n) -&gt; None: ...\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/#liblaf.cherries.plugins.Dvc.log_metrics","title":"log_metrics","text":"<pre><code>log_metrics(\n    dic: Mapping[str, Any],\n    /,\n    prefix: str | None = None,\n    step: int | None = None,\n    epoch: int | None = None,\n    **kwargs,\n) -&gt; None\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@spec\ndef log_metrics(\n    self,\n    dic: Mapping[str, Any],\n    /,\n    prefix: str | None = None,\n    step: int | None = None,\n    epoch: int | None = None,\n    **kwargs,\n) -&gt; None: ...\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/#liblaf.cherries.plugins.Dvc.log_other","title":"log_other","text":"<pre><code>log_other(key: Any, value: Any, /, **kwargs) -&gt; None\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@spec\ndef log_other(self, key: Any, value: Any, /, **kwargs) -&gt; None: ...\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/#liblaf.cherries.plugins.Dvc.log_others","title":"log_others","text":"<pre><code>log_others(\n    dictionary: Mapping[Any, Any], /, **kwargs\n) -&gt; None\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@spec\ndef log_others(self, dictionary: Mapping[Any, Any], /, **kwargs) -&gt; None: ...\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/#liblaf.cherries.plugins.Dvc.log_output","title":"log_output","text":"<pre><code>log_output(*args, **kwargs) -&gt; None\n</code></pre> Source code in <code>src/liblaf/cherries/plugins/dvc.py</code> <pre><code>@override\n@core.impl(before=(\"Comet\",))\ndef log_output(self, *args, **kwargs) -&gt; None:\n    self.log_asset(*args, **kwargs)\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/#liblaf.cherries.plugins.Dvc.log_parameter","title":"log_parameter","text":"<pre><code>log_parameter(\n    name: Any,\n    value: Any,\n    /,\n    step: int | None = None,\n    **kwargs,\n) -&gt; None\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@spec\ndef log_parameter(\n    self, name: Any, value: Any, /, step: int | None = None, **kwargs\n) -&gt; None: ...\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/#liblaf.cherries.plugins.Dvc.log_parameters","title":"log_parameters","text":"<pre><code>log_parameters(\n    parameters: Mapping[Any, Any],\n    /,\n    prefix: str | None = None,\n    step: int | None = None,\n    **kwargs,\n) -&gt; None\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@spec\ndef log_parameters(\n    self,\n    parameters: Mapping[Any, Any],\n    /,\n    prefix: str | None = None,\n    step: int | None = None,\n    **kwargs,\n) -&gt; None: ...\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/#liblaf.cherries.plugins.Dvc.log_temporary","title":"log_temporary","text":"<pre><code>log_temporary(\n    path: PathLike,\n    name: PathLike | None = None,\n    *,\n    metadata: Mapping[str, Any] | None = None,\n    **kwargs,\n) -&gt; None\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@spec\ndef log_temporary(\n    self,\n    path: PathLike,\n    name: PathLike | None = None,\n    *,\n    metadata: Mapping[str, Any] | None = None,\n    **kwargs,\n) -&gt; None: ...\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/#liblaf.cherries.plugins.Dvc.params","title":"params","text":"<pre><code>params() -&gt; Mapping[str, Any]\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@plugin_property\ndef params(self) -&gt; Mapping[str, Any]:\n    return self.plugin_root.get_params()\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/#liblaf.cherries.plugins.Dvc.project_dir","title":"project_dir","text":"<pre><code>project_dir() -&gt; Path\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@plugin_cached_property\ndef project_dir(self) -&gt; Path:\n    return path_utils.project_dir()\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/#liblaf.cherries.plugins.Dvc.project_name","title":"project_name","text":"<pre><code>project_name() -&gt; str | None\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@plugin_cached_property\ndef project_name(self) -&gt; str | None:\n    return self.project_dir.name\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/#liblaf.cherries.plugins.Dvc.register","title":"register","text":"<pre><code>register(plugin: Plugin) -&gt; None\n</code></pre> Source code in <code>src/liblaf/cherries/core/_plugin.py</code> <pre><code>def register(self, plugin: \"Plugin\") -&gt; None:\n    impls: dict[MethodName, ImplInfo] = collect_impls(plugin)\n    for name in impls:\n        self._cache_sort_plugins.pop(name, None)\n    plugin._plugin_parent = self  # noqa: SLF001\n    self.plugins[plugin.plugin_id] = plugin\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/#liblaf.cherries.plugins.Dvc.start","title":"start","text":"<pre><code>start(*args, **kwargs) -&gt; None\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@spec(delegate=False)\ndef start(self, *args, **kwargs) -&gt; None:\n    env.read_env(self.entrypoint.parent / \".env\")\n    return self.delegate(\"start\", args, kwargs)\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/#liblaf.cherries.plugins.Dvc.start_time","title":"start_time","text":"<pre><code>start_time() -&gt; datetime\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@plugin_cached_property\ndef start_time(self) -&gt; datetime.datetime:\n    return datetime.datetime.now().astimezone()\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/#liblaf.cherries.plugins.Dvc.url","title":"url","text":"<pre><code>url() -&gt; str\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@plugin_property\ndef url(self) -&gt; str:\n    return self.plugin_root.get_url()\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/#liblaf.cherries.plugins.Git","title":"Git","text":"<p>               Bases: <code>Run</code></p> <p>Parameters:</p> <ul> <li> <code>plugins</code>               (<code>dict[PluginId, str]</code>, default:                   <code>&lt;class 'dict'&gt;</code> )           \u2013            <p>dict() -&gt; new empty dictionary dict(mapping) -&gt; new dictionary initialized from a mapping object\u2019s     (key, value) pairs dict(iterable) -&gt; new dictionary initialized as if via:     d = {}     for k, v in iterable:         d[k] = v dict(**kwargs) -&gt; new dictionary initialized with the name=value pairs     in the keyword argument list.  For example:  dict(one=1, two=2)</p> </li> <li> <code>commit</code>               (<code>bool</code>, default:                   <code>True</code> )           \u2013            </li> <li> <code>inputs</code>               (<code>list[Path]</code>, default:                   <code>&lt;dynamic&gt;</code> )           \u2013            <p>Built-in mutable sequence.</p> <p>If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified.</p> </li> <li> <code>outputs</code>               (<code>list[Path]</code>, default:                   <code>&lt;dynamic&gt;</code> )           \u2013            <p>Built-in mutable sequence.</p> <p>If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified.</p> </li> <li> <code>repo</code>               (<code>Repo</code>, default:                   <code>None</code> )           \u2013            </li> <li> <code>temporaries</code>               (<code>list[Path]</code>, default:                   <code>&lt;dynamic&gt;</code> )           \u2013            <p>Built-in mutable sequence.</p> <p>If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified.</p> </li> <li> <code>verify</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            </li> </ul> <p>Methods:</p> <ul> <li> <code>data_dir</code>             \u2013              </li> <li> <code>delegate</code>             \u2013              </li> <li> <code>end</code>             \u2013              </li> <li> <code>entrypoint</code>             \u2013              </li> <li> <code>exp_dir</code>             \u2013              </li> <li> <code>exp_name</code>             \u2013              </li> <li> <code>get_others</code>             \u2013              </li> <li> <code>get_params</code>             \u2013              </li> <li> <code>get_url</code>             \u2013              </li> <li> <code>log_asset</code>             \u2013              </li> <li> <code>log_input</code>             \u2013              </li> <li> <code>log_metric</code>             \u2013              </li> <li> <code>log_metrics</code>             \u2013              </li> <li> <code>log_other</code>             \u2013              </li> <li> <code>log_others</code>             \u2013              </li> <li> <code>log_output</code>             \u2013              </li> <li> <code>log_parameter</code>             \u2013              </li> <li> <code>log_parameters</code>             \u2013              </li> <li> <code>log_temporary</code>             \u2013              </li> <li> <code>params</code>             \u2013              </li> <li> <code>project_dir</code>             \u2013              </li> <li> <code>project_name</code>             \u2013              </li> <li> <code>register</code>             \u2013              </li> <li> <code>start</code>             \u2013              </li> <li> <code>start_time</code>             \u2013              </li> <li> <code>url</code>             \u2013              </li> </ul> <p>Attributes:</p> <ul> <li> <code>commit</code>               (<code>bool</code>)           \u2013            </li> <li> <code>inputs</code>               (<code>list[Path]</code>)           \u2013            </li> <li> <code>outputs</code>               (<code>list[Path]</code>)           \u2013            </li> <li> <code>plugin_id</code>               (<code>str</code>)           \u2013            </li> <li> <code>plugin_root</code>               (<code>Self</code>)           \u2013            </li> <li> <code>plugins</code>               (<code>dict[PluginId, Plugin]</code>)           \u2013            </li> <li> <code>repo</code>               (<code>Repo</code>)           \u2013            </li> <li> <code>temporaries</code>               (<code>list[Path]</code>)           \u2013            </li> <li> <code>verify</code>               (<code>bool</code>)           \u2013            </li> </ul>"},{"location":"reference/liblaf/cherries/plugins/#liblaf.cherries.plugins.Git.commit","title":"commit  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>commit: bool = True\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/#liblaf.cherries.plugins.Git.inputs","title":"inputs  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>inputs: list[Path] = field(factory=list)\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/#liblaf.cherries.plugins.Git.outputs","title":"outputs  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>outputs: list[Path] = field(factory=list)\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/#liblaf.cherries.plugins.Git.plugin_id","title":"plugin_id  <code>property</code>","text":"<pre><code>plugin_id: str\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/#liblaf.cherries.plugins.Git.plugin_root","title":"plugin_root  <code>property</code>","text":"<pre><code>plugin_root: Self\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/#liblaf.cherries.plugins.Git.plugins","title":"plugins  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>plugins: dict[PluginId, Plugin] = field(\n    factory=dict, kw_only=True\n)\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/#liblaf.cherries.plugins.Git.repo","title":"repo  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>repo: Repo = field(default=None)\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/#liblaf.cherries.plugins.Git.temporaries","title":"temporaries  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>temporaries: list[Path] = field(factory=list)\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/#liblaf.cherries.plugins.Git.verify","title":"verify  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>verify: bool = False\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/#liblaf.cherries.plugins.Git.data_dir","title":"data_dir","text":"<pre><code>data_dir() -&gt; Path\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@plugin_cached_property\ndef data_dir(self) -&gt; Path:\n    return path_utils.data()\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/#liblaf.cherries.plugins.Git.delegate","title":"delegate","text":"<pre><code>delegate(\n    method: MethodName,\n    args: Sequence[Any] = (),\n    kwargs: Mapping[str, Any] = {},\n    *,\n    first_result: bool = False,\n) -&gt; Any\n</code></pre> Source code in <code>src/liblaf/cherries/core/_plugin.py</code> <pre><code>def delegate(\n    self,\n    method: MethodName,\n    args: Sequence[Any] = (),\n    kwargs: Mapping[str, Any] = {},\n    *,\n    first_result: bool = False,\n) -&gt; Any:\n    __tracebackhide__ = True\n    plugins: Sequence[Plugin] = self._plugins_sort(method)\n    if not plugins:\n        if first_result:\n            return None\n        return []\n    results: list[Any] = []\n    for plugin in plugins:\n        try:\n            result: Any = getattr(plugin, method)(*args, **kwargs)\n        except BaseException as e:\n            if isinstance(e, (KeyboardInterrupt, SystemExit)):\n                raise\n            logger.exception(\"Plugin {}\", plugin.plugin_id)\n        else:\n            if result is None:\n                continue\n            if first_result:\n                return result\n            results.append(result)\n    return results\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/#liblaf.cherries.plugins.Git.end","title":"end","text":"<pre><code>end(*args, **kwargs) -&gt; None\n</code></pre> Source code in <code>src/liblaf/cherries/plugins/git_.py</code> <pre><code>@override\n@core.impl(after=(\"Dvc\",))\ndef end(self, *args, **kwargs) -&gt; None:\n    if self.commit and self.repo.is_dirty(untracked_files=True):\n        try:\n            self.repo.git.add(all=True)\n            subprocess.run([\"git\", \"status\"], check=False)\n            message: str = self._make_commit_message()\n            self.repo.git.commit(message=message, no_verify=not self.verify)\n        except git.GitCommandError as err:\n            logger.exception(err)\n    self.plugin_root.log_other(\"cherries.git.sha\", self.repo.head.commit.hexsha)\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/#liblaf.cherries.plugins.Git.entrypoint","title":"entrypoint","text":"<pre><code>entrypoint() -&gt; Path\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@plugin_cached_property\ndef entrypoint(self) -&gt; Path:\n    return path_utils.entrypoint()\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/#liblaf.cherries.plugins.Git.exp_dir","title":"exp_dir","text":"<pre><code>exp_dir() -&gt; Path\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@plugin_cached_property\ndef exp_dir(self) -&gt; Path:\n    return path_utils.exp_dir()\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/#liblaf.cherries.plugins.Git.exp_name","title":"exp_name","text":"<pre><code>exp_name() -&gt; str\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@plugin_cached_property\ndef exp_name(self) -&gt; str:\n    return (\n        self.entrypoint.relative_to(self.project_dir)\n        .as_posix()\n        .removeprefix(\"exp/\")\n    )\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/#liblaf.cherries.plugins.Git.get_others","title":"get_others","text":"<pre><code>get_others() -&gt; Mapping[str, Any]\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@spec(first_result=True)\ndef get_others(self) -&gt; Mapping[str, Any]: ...\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/#liblaf.cherries.plugins.Git.get_params","title":"get_params","text":"<pre><code>get_params() -&gt; Mapping[str, Any]\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@spec(first_result=True)\ndef get_params(self) -&gt; Mapping[str, Any]: ...\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/#liblaf.cherries.plugins.Git.get_url","title":"get_url","text":"<pre><code>get_url() -&gt; str\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@spec(first_result=True)\ndef get_url(self) -&gt; str: ...\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/#liblaf.cherries.plugins.Git.log_asset","title":"log_asset","text":"<pre><code>log_asset(\n    path: PathLike,\n    name: PathLike | None = None,\n    *,\n    metadata: Mapping[str, Any] | None = None,\n    **kwargs,\n) -&gt; None\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@spec\ndef log_asset(\n    self,\n    path: PathLike,\n    name: PathLike | None = None,\n    *,\n    metadata: Mapping[str, Any] | None = None,\n    **kwargs,\n) -&gt; None: ...\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/#liblaf.cherries.plugins.Git.log_input","title":"log_input","text":"<pre><code>log_input(path: PathLike, *args, **kwargs) -&gt; None\n</code></pre> Source code in <code>src/liblaf/cherries/plugins/git_.py</code> <pre><code>@override\n@core.impl\ndef log_input(self, path: PathLike, *args, **kwargs) -&gt; None:\n    path: Path = Path(path)\n    self.inputs.append(path.relative_to(self.project_dir))\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/#liblaf.cherries.plugins.Git.log_metric","title":"log_metric","text":"<pre><code>log_metric(\n    name: str,\n    value: Any,\n    /,\n    step: int | None = None,\n    epoch: int | None = None,\n    **kwargs,\n) -&gt; None\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@spec\ndef log_metric(\n    self,\n    name: str,\n    value: Any,\n    /,\n    step: int | None = None,\n    epoch: int | None = None,\n    **kwargs,\n) -&gt; None: ...\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/#liblaf.cherries.plugins.Git.log_metrics","title":"log_metrics","text":"<pre><code>log_metrics(\n    dic: Mapping[str, Any],\n    /,\n    prefix: str | None = None,\n    step: int | None = None,\n    epoch: int | None = None,\n    **kwargs,\n) -&gt; None\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@spec\ndef log_metrics(\n    self,\n    dic: Mapping[str, Any],\n    /,\n    prefix: str | None = None,\n    step: int | None = None,\n    epoch: int | None = None,\n    **kwargs,\n) -&gt; None: ...\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/#liblaf.cherries.plugins.Git.log_other","title":"log_other","text":"<pre><code>log_other(key: Any, value: Any, /, **kwargs) -&gt; None\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@spec\ndef log_other(self, key: Any, value: Any, /, **kwargs) -&gt; None: ...\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/#liblaf.cherries.plugins.Git.log_others","title":"log_others","text":"<pre><code>log_others(\n    dictionary: Mapping[Any, Any], /, **kwargs\n) -&gt; None\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@spec\ndef log_others(self, dictionary: Mapping[Any, Any], /, **kwargs) -&gt; None: ...\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/#liblaf.cherries.plugins.Git.log_output","title":"log_output","text":"<pre><code>log_output(\n    path: PathLike, name: PathLike | None = None, **kwargs\n) -&gt; None\n</code></pre> Source code in <code>src/liblaf/cherries/plugins/git_.py</code> <pre><code>@override\n@core.impl\ndef log_output(\n    self,\n    path: PathLike,\n    name: PathLike | None = None,\n    **kwargs,\n) -&gt; None:\n    path: Path = Path(path)\n    self.outputs.append(path.relative_to(self.project_dir))\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/#liblaf.cherries.plugins.Git.log_parameter","title":"log_parameter","text":"<pre><code>log_parameter(\n    name: Any,\n    value: Any,\n    /,\n    step: int | None = None,\n    **kwargs,\n) -&gt; None\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@spec\ndef log_parameter(\n    self, name: Any, value: Any, /, step: int | None = None, **kwargs\n) -&gt; None: ...\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/#liblaf.cherries.plugins.Git.log_parameters","title":"log_parameters","text":"<pre><code>log_parameters(\n    parameters: Mapping[Any, Any],\n    /,\n    prefix: str | None = None,\n    step: int | None = None,\n    **kwargs,\n) -&gt; None\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@spec\ndef log_parameters(\n    self,\n    parameters: Mapping[Any, Any],\n    /,\n    prefix: str | None = None,\n    step: int | None = None,\n    **kwargs,\n) -&gt; None: ...\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/#liblaf.cherries.plugins.Git.log_temporary","title":"log_temporary","text":"<pre><code>log_temporary(\n    path: PathLike, name: PathLike | None = None, **kwargs\n) -&gt; None\n</code></pre> Source code in <code>src/liblaf/cherries/plugins/git_.py</code> <pre><code>@override\n@core.impl\ndef log_temporary(\n    self, path: PathLike, name: PathLike | None = None, **kwargs\n) -&gt; None:\n    path: Path = Path(path)\n    self.temporaries.append(path.relative_to(self.project_dir))\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/#liblaf.cherries.plugins.Git.params","title":"params","text":"<pre><code>params() -&gt; Mapping[str, Any]\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@plugin_property\ndef params(self) -&gt; Mapping[str, Any]:\n    return self.plugin_root.get_params()\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/#liblaf.cherries.plugins.Git.project_dir","title":"project_dir","text":"<pre><code>project_dir() -&gt; Path\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@plugin_cached_property\ndef project_dir(self) -&gt; Path:\n    return path_utils.project_dir()\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/#liblaf.cherries.plugins.Git.project_name","title":"project_name","text":"<pre><code>project_name() -&gt; str | None\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@plugin_cached_property\ndef project_name(self) -&gt; str | None:\n    return self.project_dir.name\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/#liblaf.cherries.plugins.Git.register","title":"register","text":"<pre><code>register(plugin: Plugin) -&gt; None\n</code></pre> Source code in <code>src/liblaf/cherries/core/_plugin.py</code> <pre><code>def register(self, plugin: \"Plugin\") -&gt; None:\n    impls: dict[MethodName, ImplInfo] = collect_impls(plugin)\n    for name in impls:\n        self._cache_sort_plugins.pop(name, None)\n    plugin._plugin_parent = self  # noqa: SLF001\n    self.plugins[plugin.plugin_id] = plugin\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/#liblaf.cherries.plugins.Git.start","title":"start","text":"<pre><code>start(*args, **kwargs) -&gt; None\n</code></pre> Source code in <code>src/liblaf/cherries/plugins/git_.py</code> <pre><code>@override\n@core.impl\ndef start(self, *args, **kwargs) -&gt; None:\n    self.repo = git.Repo(search_parent_directories=True)\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/#liblaf.cherries.plugins.Git.start_time","title":"start_time","text":"<pre><code>start_time() -&gt; datetime\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@plugin_cached_property\ndef start_time(self) -&gt; datetime.datetime:\n    return datetime.datetime.now().astimezone()\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/#liblaf.cherries.plugins.Git.url","title":"url","text":"<pre><code>url() -&gt; str\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@plugin_property\ndef url(self) -&gt; str:\n    return self.plugin_root.get_url()\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/#liblaf.cherries.plugins.Local","title":"Local","text":"<p>               Bases: <code>Run</code></p> <p>Parameters:</p> <ul> <li> <code>plugins</code>               (<code>dict[PluginId, str]</code>, default:                   <code>&lt;class 'dict'&gt;</code> )           \u2013            <p>dict() -&gt; new empty dictionary dict(mapping) -&gt; new dictionary initialized from a mapping object\u2019s     (key, value) pairs dict(iterable) -&gt; new dictionary initialized as if via:     d = {}     for k, v in iterable:         d[k] = v dict(**kwargs) -&gt; new dictionary initialized with the name=value pairs     in the keyword argument list.  For example:  dict(one=1, two=2)</p> </li> <li> <code>folder</code>               (<code>Path</code>, default:                   <code>None</code> )           \u2013            </li> </ul> <p>Methods:</p> <ul> <li> <code>data_dir</code>             \u2013              </li> <li> <code>delegate</code>             \u2013              </li> <li> <code>end</code>             \u2013              </li> <li> <code>entrypoint</code>             \u2013              </li> <li> <code>exp_dir</code>             \u2013              </li> <li> <code>exp_name</code>             \u2013              </li> <li> <code>get_others</code>             \u2013              </li> <li> <code>get_params</code>             \u2013              </li> <li> <code>get_url</code>             \u2013              </li> <li> <code>log_asset</code>             \u2013              </li> <li> <code>log_input</code>             \u2013              </li> <li> <code>log_metric</code>             \u2013              </li> <li> <code>log_metrics</code>             \u2013              </li> <li> <code>log_other</code>             \u2013              </li> <li> <code>log_others</code>             \u2013              </li> <li> <code>log_output</code>             \u2013              </li> <li> <code>log_parameter</code>             \u2013              </li> <li> <code>log_parameters</code>             \u2013              </li> <li> <code>log_temporary</code>             \u2013              </li> <li> <code>params</code>             \u2013              </li> <li> <code>project_dir</code>             \u2013              </li> <li> <code>project_name</code>             \u2013              </li> <li> <code>register</code>             \u2013              </li> <li> <code>start</code>             \u2013              </li> <li> <code>start_time</code>             \u2013              </li> <li> <code>url</code>             \u2013              </li> </ul> <p>Attributes:</p> <ul> <li> <code>folder</code>               (<code>Path</code>)           \u2013            </li> <li> <code>plugin_id</code>               (<code>str</code>)           \u2013            </li> <li> <code>plugin_root</code>               (<code>Self</code>)           \u2013            </li> <li> <code>plugins</code>               (<code>dict[PluginId, Plugin]</code>)           \u2013            </li> </ul>"},{"location":"reference/liblaf/cherries/plugins/#liblaf.cherries.plugins.Local.folder","title":"folder  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>folder: Path = field(default=None)\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/#liblaf.cherries.plugins.Local.plugin_id","title":"plugin_id  <code>property</code>","text":"<pre><code>plugin_id: str\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/#liblaf.cherries.plugins.Local.plugin_root","title":"plugin_root  <code>property</code>","text":"<pre><code>plugin_root: Self\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/#liblaf.cherries.plugins.Local.plugins","title":"plugins  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>plugins: dict[PluginId, Plugin] = field(\n    factory=dict, kw_only=True\n)\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/#liblaf.cherries.plugins.Local.data_dir","title":"data_dir","text":"<pre><code>data_dir() -&gt; Path\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@plugin_cached_property\ndef data_dir(self) -&gt; Path:\n    return path_utils.data()\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/#liblaf.cherries.plugins.Local.delegate","title":"delegate","text":"<pre><code>delegate(\n    method: MethodName,\n    args: Sequence[Any] = (),\n    kwargs: Mapping[str, Any] = {},\n    *,\n    first_result: bool = False,\n) -&gt; Any\n</code></pre> Source code in <code>src/liblaf/cherries/core/_plugin.py</code> <pre><code>def delegate(\n    self,\n    method: MethodName,\n    args: Sequence[Any] = (),\n    kwargs: Mapping[str, Any] = {},\n    *,\n    first_result: bool = False,\n) -&gt; Any:\n    __tracebackhide__ = True\n    plugins: Sequence[Plugin] = self._plugins_sort(method)\n    if not plugins:\n        if first_result:\n            return None\n        return []\n    results: list[Any] = []\n    for plugin in plugins:\n        try:\n            result: Any = getattr(plugin, method)(*args, **kwargs)\n        except BaseException as e:\n            if isinstance(e, (KeyboardInterrupt, SystemExit)):\n                raise\n            logger.exception(\"Plugin {}\", plugin.plugin_id)\n        else:\n            if result is None:\n                continue\n            if first_result:\n                return result\n            results.append(result)\n    return results\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/#liblaf.cherries.plugins.Local.end","title":"end","text":"<pre><code>end(*args, **kwargs) -&gt; None\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@spec\ndef end(self, *args, **kwargs) -&gt; None: ...\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/#liblaf.cherries.plugins.Local.entrypoint","title":"entrypoint","text":"<pre><code>entrypoint() -&gt; Path\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@plugin_cached_property\ndef entrypoint(self) -&gt; Path:\n    return path_utils.entrypoint()\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/#liblaf.cherries.plugins.Local.exp_dir","title":"exp_dir","text":"<pre><code>exp_dir() -&gt; Path\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@plugin_cached_property\ndef exp_dir(self) -&gt; Path:\n    return path_utils.exp_dir()\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/#liblaf.cherries.plugins.Local.exp_name","title":"exp_name","text":"<pre><code>exp_name() -&gt; str\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@plugin_cached_property\ndef exp_name(self) -&gt; str:\n    return (\n        self.entrypoint.relative_to(self.project_dir)\n        .as_posix()\n        .removeprefix(\"exp/\")\n    )\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/#liblaf.cherries.plugins.Local.get_others","title":"get_others","text":"<pre><code>get_others() -&gt; Mapping[str, Any]\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@spec(first_result=True)\ndef get_others(self) -&gt; Mapping[str, Any]: ...\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/#liblaf.cherries.plugins.Local.get_params","title":"get_params","text":"<pre><code>get_params() -&gt; Mapping[str, Any]\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@spec(first_result=True)\ndef get_params(self) -&gt; Mapping[str, Any]: ...\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/#liblaf.cherries.plugins.Local.get_url","title":"get_url","text":"<pre><code>get_url() -&gt; str\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@spec(first_result=True)\ndef get_url(self) -&gt; str: ...\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/#liblaf.cherries.plugins.Local.log_asset","title":"log_asset","text":"<pre><code>log_asset(\n    path: PathLike, name: PathLike | None = None, **kwargs\n) -&gt; None\n</code></pre> Source code in <code>src/liblaf/cherries/plugins/local.py</code> <pre><code>@override\n@core.impl\ndef log_asset(\n    self,\n    path: PathLike,\n    name: PathLike | None = None,\n    **kwargs,\n) -&gt; None:\n    path = Path(path)\n    if name is None:\n        path_absolute: Path = path.resolve()\n        if path_absolute.is_relative_to(self.exp_dir):\n            name = path_absolute.relative_to(self.exp_dir)\n        else:\n            name = path\n    target: Path = self.folder / name\n    self._copy(path, target)\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/#liblaf.cherries.plugins.Local.log_input","title":"log_input","text":"<pre><code>log_input(\n    path: PathLike, name: PathLike | None = None, **kwargs\n) -&gt; None\n</code></pre> Source code in <code>src/liblaf/cherries/plugins/local.py</code> <pre><code>@override\n@core.impl\ndef log_input(\n    self,\n    path: PathLike,\n    name: PathLike | None = None,\n    **kwargs,\n) -&gt; None:\n    if name is None:\n        name = Path(path).name\n    name = f\"inputs/{name}\"\n    self.log_asset(path, name, **kwargs)\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/#liblaf.cherries.plugins.Local.log_metric","title":"log_metric","text":"<pre><code>log_metric(\n    name: str,\n    value: Any,\n    /,\n    step: int | None = None,\n    epoch: int | None = None,\n    **kwargs,\n) -&gt; None\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@spec\ndef log_metric(\n    self,\n    name: str,\n    value: Any,\n    /,\n    step: int | None = None,\n    epoch: int | None = None,\n    **kwargs,\n) -&gt; None: ...\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/#liblaf.cherries.plugins.Local.log_metrics","title":"log_metrics","text":"<pre><code>log_metrics(\n    dic: Mapping[str, Any],\n    /,\n    prefix: str | None = None,\n    step: int | None = None,\n    epoch: int | None = None,\n    **kwargs,\n) -&gt; None\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@spec\ndef log_metrics(\n    self,\n    dic: Mapping[str, Any],\n    /,\n    prefix: str | None = None,\n    step: int | None = None,\n    epoch: int | None = None,\n    **kwargs,\n) -&gt; None: ...\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/#liblaf.cherries.plugins.Local.log_other","title":"log_other","text":"<pre><code>log_other(key: Any, value: Any, /, **kwargs) -&gt; None\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@spec\ndef log_other(self, key: Any, value: Any, /, **kwargs) -&gt; None: ...\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/#liblaf.cherries.plugins.Local.log_others","title":"log_others","text":"<pre><code>log_others(\n    dictionary: Mapping[Any, Any], /, **kwargs\n) -&gt; None\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@spec\ndef log_others(self, dictionary: Mapping[Any, Any], /, **kwargs) -&gt; None: ...\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/#liblaf.cherries.plugins.Local.log_output","title":"log_output","text":"<pre><code>log_output(\n    path: PathLike, name: PathLike | None = None, **kwargs\n) -&gt; None\n</code></pre> Source code in <code>src/liblaf/cherries/plugins/local.py</code> <pre><code>@override\n@core.impl\ndef log_output(\n    self,\n    path: PathLike,\n    name: PathLike | None = None,\n    **kwargs,\n) -&gt; None:\n    if name is None:\n        name = Path(path).name\n    name = f\"outputs/{name}\"\n    self.log_asset(path, name, **kwargs)\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/#liblaf.cherries.plugins.Local.log_parameter","title":"log_parameter","text":"<pre><code>log_parameter(\n    name: Any,\n    value: Any,\n    /,\n    step: int | None = None,\n    **kwargs,\n) -&gt; None\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@spec\ndef log_parameter(\n    self, name: Any, value: Any, /, step: int | None = None, **kwargs\n) -&gt; None: ...\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/#liblaf.cherries.plugins.Local.log_parameters","title":"log_parameters","text":"<pre><code>log_parameters(\n    parameters: Mapping[Any, Any],\n    /,\n    prefix: str | None = None,\n    step: int | None = None,\n    **kwargs,\n) -&gt; None\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@spec\ndef log_parameters(\n    self,\n    parameters: Mapping[Any, Any],\n    /,\n    prefix: str | None = None,\n    step: int | None = None,\n    **kwargs,\n) -&gt; None: ...\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/#liblaf.cherries.plugins.Local.log_temporary","title":"log_temporary","text":"<pre><code>log_temporary(\n    path: PathLike, name: PathLike | None = None, **kwargs\n) -&gt; None\n</code></pre> Source code in <code>src/liblaf/cherries/plugins/local.py</code> <pre><code>@override\n@core.impl\ndef log_temporary(\n    self,\n    path: PathLike,\n    name: PathLike | None = None,\n    **kwargs,\n) -&gt; None:\n    if name is None:\n        name = Path(path).name\n    name = f\"temp/{name}\"\n    self.log_asset(path, name, **kwargs)\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/#liblaf.cherries.plugins.Local.params","title":"params","text":"<pre><code>params() -&gt; Mapping[str, Any]\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@plugin_property\ndef params(self) -&gt; Mapping[str, Any]:\n    return self.plugin_root.get_params()\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/#liblaf.cherries.plugins.Local.project_dir","title":"project_dir","text":"<pre><code>project_dir() -&gt; Path\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@plugin_cached_property\ndef project_dir(self) -&gt; Path:\n    return path_utils.project_dir()\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/#liblaf.cherries.plugins.Local.project_name","title":"project_name","text":"<pre><code>project_name() -&gt; str | None\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@plugin_cached_property\ndef project_name(self) -&gt; str | None:\n    return self.project_dir.name\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/#liblaf.cherries.plugins.Local.register","title":"register","text":"<pre><code>register(plugin: Plugin) -&gt; None\n</code></pre> Source code in <code>src/liblaf/cherries/core/_plugin.py</code> <pre><code>def register(self, plugin: \"Plugin\") -&gt; None:\n    impls: dict[MethodName, ImplInfo] = collect_impls(plugin)\n    for name in impls:\n        self._cache_sort_plugins.pop(name, None)\n    plugin._plugin_parent = self  # noqa: SLF001\n    self.plugins[plugin.plugin_id] = plugin\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/#liblaf.cherries.plugins.Local.start","title":"start","text":"<pre><code>start(*args, **kwargs) -&gt; None\n</code></pre> Source code in <code>src/liblaf/cherries/plugins/local.py</code> <pre><code>@override\n@core.impl\ndef start(self, *args, **kwargs) -&gt; None:\n    cherries_dir: Path = self.exp_dir / \".cherries\"\n    cherries_dir.mkdir(parents=True, exist_ok=True)\n    (cherries_dir / \".gitignore\").write_text(\"*\\n\")\n    self.folder = (\n        cherries_dir\n        / self.entrypoint.stem\n        / self.start_time.strftime(\"%Y-%m-%dT%H%M%S\")\n    )\n    entrypoint: Path = self.entrypoint\n    self.log_asset(entrypoint, f\"src/{entrypoint.name}\")\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/#liblaf.cherries.plugins.Local.start_time","title":"start_time","text":"<pre><code>start_time() -&gt; datetime\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@plugin_cached_property\ndef start_time(self) -&gt; datetime.datetime:\n    return datetime.datetime.now().astimezone()\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/#liblaf.cherries.plugins.Local.url","title":"url","text":"<pre><code>url() -&gt; str\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@plugin_property\ndef url(self) -&gt; str:\n    return self.plugin_root.get_url()\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/#liblaf.cherries.plugins.Logging","title":"Logging","text":"<p>               Bases: <code>Run</code></p> <p>Parameters:</p> <ul> <li> <code>plugins</code>               (<code>dict[PluginId, str]</code>, default:                   <code>&lt;class 'dict'&gt;</code> )           \u2013            <p>dict() -&gt; new empty dictionary dict(mapping) -&gt; new dictionary initialized from a mapping object\u2019s     (key, value) pairs dict(iterable) -&gt; new dictionary initialized as if via:     d = {}     for k, v in iterable:         d[k] = v dict(**kwargs) -&gt; new dictionary initialized with the name=value pairs     in the keyword argument list.  For example:  dict(one=1, two=2)</p> </li> </ul> <p>Methods:</p> <ul> <li> <code>data_dir</code>             \u2013              </li> <li> <code>delegate</code>             \u2013              </li> <li> <code>end</code>             \u2013              </li> <li> <code>entrypoint</code>             \u2013              </li> <li> <code>exp_dir</code>             \u2013              </li> <li> <code>exp_name</code>             \u2013              </li> <li> <code>get_others</code>             \u2013              </li> <li> <code>get_params</code>             \u2013              </li> <li> <code>get_url</code>             \u2013              </li> <li> <code>log_asset</code>             \u2013              </li> <li> <code>log_input</code>             \u2013              </li> <li> <code>log_metric</code>             \u2013              </li> <li> <code>log_metrics</code>             \u2013              </li> <li> <code>log_other</code>             \u2013              </li> <li> <code>log_others</code>             \u2013              </li> <li> <code>log_output</code>             \u2013              </li> <li> <code>log_parameter</code>             \u2013              </li> <li> <code>log_parameters</code>             \u2013              </li> <li> <code>log_temporary</code>             \u2013              </li> <li> <code>params</code>             \u2013              </li> <li> <code>project_dir</code>             \u2013              </li> <li> <code>project_name</code>             \u2013              </li> <li> <code>register</code>             \u2013              </li> <li> <code>start</code>             \u2013              </li> <li> <code>start_time</code>             \u2013              </li> <li> <code>url</code>             \u2013              </li> </ul> <p>Attributes:</p> <ul> <li> <code>log_file</code>               (<code>Path</code>)           \u2013            </li> <li> <code>plugin_id</code>               (<code>str</code>)           \u2013            </li> <li> <code>plugin_root</code>               (<code>Self</code>)           \u2013            </li> <li> <code>plugins</code>               (<code>dict[PluginId, Plugin]</code>)           \u2013            </li> </ul>"},{"location":"reference/liblaf/cherries/plugins/#liblaf.cherries.plugins.Logging.log_file","title":"log_file  <code>property</code>","text":"<pre><code>log_file: Path\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/#liblaf.cherries.plugins.Logging.plugin_id","title":"plugin_id  <code>property</code>","text":"<pre><code>plugin_id: str\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/#liblaf.cherries.plugins.Logging.plugin_root","title":"plugin_root  <code>property</code>","text":"<pre><code>plugin_root: Self\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/#liblaf.cherries.plugins.Logging.plugins","title":"plugins  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>plugins: dict[PluginId, Plugin] = field(\n    factory=dict, kw_only=True\n)\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/#liblaf.cherries.plugins.Logging.data_dir","title":"data_dir","text":"<pre><code>data_dir() -&gt; Path\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@plugin_cached_property\ndef data_dir(self) -&gt; Path:\n    return path_utils.data()\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/#liblaf.cherries.plugins.Logging.delegate","title":"delegate","text":"<pre><code>delegate(\n    method: MethodName,\n    args: Sequence[Any] = (),\n    kwargs: Mapping[str, Any] = {},\n    *,\n    first_result: bool = False,\n) -&gt; Any\n</code></pre> Source code in <code>src/liblaf/cherries/core/_plugin.py</code> <pre><code>def delegate(\n    self,\n    method: MethodName,\n    args: Sequence[Any] = (),\n    kwargs: Mapping[str, Any] = {},\n    *,\n    first_result: bool = False,\n) -&gt; Any:\n    __tracebackhide__ = True\n    plugins: Sequence[Plugin] = self._plugins_sort(method)\n    if not plugins:\n        if first_result:\n            return None\n        return []\n    results: list[Any] = []\n    for plugin in plugins:\n        try:\n            result: Any = getattr(plugin, method)(*args, **kwargs)\n        except BaseException as e:\n            if isinstance(e, (KeyboardInterrupt, SystemExit)):\n                raise\n            logger.exception(\"Plugin {}\", plugin.plugin_id)\n        else:\n            if result is None:\n                continue\n            if first_result:\n                return result\n            results.append(result)\n    return results\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/#liblaf.cherries.plugins.Logging.end","title":"end","text":"<pre><code>end(*args, **kwargs) -&gt; None\n</code></pre> Source code in <code>src/liblaf/cherries/plugins/logging.py</code> <pre><code>@override\n@core.impl\ndef end(self, *args, **kwargs) -&gt; None:\n    self.plugin_root.log_asset(self.log_file, \"run.log\")\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/#liblaf.cherries.plugins.Logging.entrypoint","title":"entrypoint","text":"<pre><code>entrypoint() -&gt; Path\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@plugin_cached_property\ndef entrypoint(self) -&gt; Path:\n    return path_utils.entrypoint()\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/#liblaf.cherries.plugins.Logging.exp_dir","title":"exp_dir","text":"<pre><code>exp_dir() -&gt; Path\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@plugin_cached_property\ndef exp_dir(self) -&gt; Path:\n    return path_utils.exp_dir()\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/#liblaf.cherries.plugins.Logging.exp_name","title":"exp_name","text":"<pre><code>exp_name() -&gt; str\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@plugin_cached_property\ndef exp_name(self) -&gt; str:\n    return (\n        self.entrypoint.relative_to(self.project_dir)\n        .as_posix()\n        .removeprefix(\"exp/\")\n    )\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/#liblaf.cherries.plugins.Logging.get_others","title":"get_others","text":"<pre><code>get_others() -&gt; Mapping[str, Any]\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@spec(first_result=True)\ndef get_others(self) -&gt; Mapping[str, Any]: ...\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/#liblaf.cherries.plugins.Logging.get_params","title":"get_params","text":"<pre><code>get_params() -&gt; Mapping[str, Any]\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@spec(first_result=True)\ndef get_params(self) -&gt; Mapping[str, Any]: ...\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/#liblaf.cherries.plugins.Logging.get_url","title":"get_url","text":"<pre><code>get_url() -&gt; str\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@spec(first_result=True)\ndef get_url(self) -&gt; str: ...\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/#liblaf.cherries.plugins.Logging.log_asset","title":"log_asset","text":"<pre><code>log_asset(\n    path: PathLike,\n    name: PathLike | None = None,\n    *,\n    metadata: Mapping[str, Any] | None = None,\n    **kwargs,\n) -&gt; None\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@spec\ndef log_asset(\n    self,\n    path: PathLike,\n    name: PathLike | None = None,\n    *,\n    metadata: Mapping[str, Any] | None = None,\n    **kwargs,\n) -&gt; None: ...\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/#liblaf.cherries.plugins.Logging.log_input","title":"log_input","text":"<pre><code>log_input(\n    path: PathLike,\n    name: PathLike | None = None,\n    *,\n    metadata: Mapping[str, Any] | None = None,\n    **kwargs,\n) -&gt; None\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@spec\ndef log_input(\n    self,\n    path: PathLike,\n    name: PathLike | None = None,\n    *,\n    metadata: Mapping[str, Any] | None = None,\n    **kwargs,\n) -&gt; None: ...\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/#liblaf.cherries.plugins.Logging.log_metric","title":"log_metric","text":"<pre><code>log_metric(\n    name: str,\n    value: Any,\n    /,\n    step: int | None = None,\n    epoch: int | None = None,\n    **kwargs,\n) -&gt; None\n</code></pre> Source code in <code>src/liblaf/cherries/plugins/logging.py</code> <pre><code>@override\n@core.impl\ndef log_metric(\n    self,\n    name: str,\n    value: Any,\n    /,\n    step: int | None = None,\n    epoch: int | None = None,\n    **kwargs,\n) -&gt; None:\n    __tracebackhide__ = True\n    if step is None:\n        logger.info(\"{name}: {value}\", name=name, value=value)\n    else:\n        logger.info(\n            \"step: {step}, {name}: {value}\", step=step, name=name, value=value\n        )\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/#liblaf.cherries.plugins.Logging.log_metrics","title":"log_metrics","text":"<pre><code>log_metrics(\n    dic: Mapping[str, Any],\n    /,\n    prefix: str | None = None,\n    step: int | None = None,\n    epoch: int | None = None,\n    **kwargs,\n) -&gt; None\n</code></pre> Source code in <code>src/liblaf/cherries/plugins/logging.py</code> <pre><code>@override\n@core.impl\ndef log_metrics(\n    self,\n    dic: Mapping[str, Any],\n    /,\n    prefix: str | None = None,\n    step: int | None = None,\n    epoch: int | None = None,\n    **kwargs,\n) -&gt; None:\n    __tracebackhide__ = True\n    if step is None:\n        logger.info(\"{dic}\", dic=dic)\n    else:\n        logger.info(\"step: {step}, {dic}\", step=step, dic=dic)\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/#liblaf.cherries.plugins.Logging.log_other","title":"log_other","text":"<pre><code>log_other(key: Any, value: Any, /, **kwargs) -&gt; None\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@spec\ndef log_other(self, key: Any, value: Any, /, **kwargs) -&gt; None: ...\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/#liblaf.cherries.plugins.Logging.log_others","title":"log_others","text":"<pre><code>log_others(\n    dictionary: Mapping[Any, Any], /, **kwargs\n) -&gt; None\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@spec\ndef log_others(self, dictionary: Mapping[Any, Any], /, **kwargs) -&gt; None: ...\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/#liblaf.cherries.plugins.Logging.log_output","title":"log_output","text":"<pre><code>log_output(\n    path: PathLike,\n    name: PathLike | None = None,\n    *,\n    metadata: Mapping[str, Any] | None = None,\n    **kwargs,\n) -&gt; None\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@spec\ndef log_output(\n    self,\n    path: PathLike,\n    name: PathLike | None = None,\n    *,\n    metadata: Mapping[str, Any] | None = None,\n    **kwargs,\n) -&gt; None: ...\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/#liblaf.cherries.plugins.Logging.log_parameter","title":"log_parameter","text":"<pre><code>log_parameter(\n    name: Any,\n    value: Any,\n    /,\n    step: int | None = None,\n    **kwargs,\n) -&gt; None\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@spec\ndef log_parameter(\n    self, name: Any, value: Any, /, step: int | None = None, **kwargs\n) -&gt; None: ...\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/#liblaf.cherries.plugins.Logging.log_parameters","title":"log_parameters","text":"<pre><code>log_parameters(\n    parameters: Mapping[Any, Any],\n    /,\n    prefix: str | None = None,\n    step: int | None = None,\n    **kwargs,\n) -&gt; None\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@spec\ndef log_parameters(\n    self,\n    parameters: Mapping[Any, Any],\n    /,\n    prefix: str | None = None,\n    step: int | None = None,\n    **kwargs,\n) -&gt; None: ...\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/#liblaf.cherries.plugins.Logging.log_temporary","title":"log_temporary","text":"<pre><code>log_temporary(\n    path: PathLike,\n    name: PathLike | None = None,\n    *,\n    metadata: Mapping[str, Any] | None = None,\n    **kwargs,\n) -&gt; None\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@spec\ndef log_temporary(\n    self,\n    path: PathLike,\n    name: PathLike | None = None,\n    *,\n    metadata: Mapping[str, Any] | None = None,\n    **kwargs,\n) -&gt; None: ...\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/#liblaf.cherries.plugins.Logging.params","title":"params","text":"<pre><code>params() -&gt; Mapping[str, Any]\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@plugin_property\ndef params(self) -&gt; Mapping[str, Any]:\n    return self.plugin_root.get_params()\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/#liblaf.cherries.plugins.Logging.project_dir","title":"project_dir","text":"<pre><code>project_dir() -&gt; Path\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@plugin_cached_property\ndef project_dir(self) -&gt; Path:\n    return path_utils.project_dir()\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/#liblaf.cherries.plugins.Logging.project_name","title":"project_name","text":"<pre><code>project_name() -&gt; str | None\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@plugin_cached_property\ndef project_name(self) -&gt; str | None:\n    return self.project_dir.name\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/#liblaf.cherries.plugins.Logging.register","title":"register","text":"<pre><code>register(plugin: Plugin) -&gt; None\n</code></pre> Source code in <code>src/liblaf/cherries/core/_plugin.py</code> <pre><code>def register(self, plugin: \"Plugin\") -&gt; None:\n    impls: dict[MethodName, ImplInfo] = collect_impls(plugin)\n    for name in impls:\n        self._cache_sort_plugins.pop(name, None)\n    plugin._plugin_parent = self  # noqa: SLF001\n    self.plugins[plugin.plugin_id] = plugin\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/#liblaf.cherries.plugins.Logging.start","title":"start","text":"<pre><code>start(*args, **kwargs) -&gt; None\n</code></pre> Source code in <code>src/liblaf/cherries/plugins/logging.py</code> <pre><code>@override\n@core.impl\ndef start(self, *args, **kwargs) -&gt; None:\n    grapes.logging.init(enable_link=False, file=self.log_file)\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/#liblaf.cherries.plugins.Logging.start_time","title":"start_time","text":"<pre><code>start_time() -&gt; datetime\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@plugin_cached_property\ndef start_time(self) -&gt; datetime.datetime:\n    return datetime.datetime.now().astimezone()\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/#liblaf.cherries.plugins.Logging.url","title":"url","text":"<pre><code>url() -&gt; str\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@plugin_property\ndef url(self) -&gt; str:\n    return self.plugin_root.get_url()\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/comet/","title":"comet","text":""},{"location":"reference/liblaf/cherries/plugins/comet/#liblaf.cherries.plugins.comet","title":"liblaf.cherries.plugins.comet","text":"<p>Classes:</p> <ul> <li> <code>Asset</code>           \u2013            </li> <li> <code>Comet</code>           \u2013            </li> </ul>"},{"location":"reference/liblaf/cherries/plugins/comet/#liblaf.cherries.plugins.comet.Asset","title":"Asset","text":"<p>Parameters:</p> <ul> <li> <code>path</code>               (<code>PathLike</code>)           \u2013            </li> <li> <code>name</code>               (<code>PathLike | None</code>)           \u2013            </li> <li> <code>metadata</code>               (<code>Mapping[str, Any] | None</code>, default:                   <code>None</code> )           \u2013            </li> <li> <code>kwargs</code>               (<code>Mapping[str, Any]</code>, default:                   <code>&lt;class 'dict'&gt;</code> )           \u2013            <p>dict() -&gt; new empty dictionary dict(mapping) -&gt; new dictionary initialized from a mapping object\u2019s     (key, value) pairs dict(iterable) -&gt; new dictionary initialized as if via:     d = {}     for k, v in iterable:         d[k] = v dict(**kwargs) -&gt; new dictionary initialized with the name=value pairs     in the keyword argument list.  For example:  dict(one=1, two=2)</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>kwargs</code>               (<code>Mapping[str, Any]</code>)           \u2013            </li> <li> <code>metadata</code>               (<code>Mapping[str, Any] | None</code>)           \u2013            </li> <li> <code>name</code>               (<code>PathLike | None</code>)           \u2013            </li> <li> <code>path</code>               (<code>PathLike</code>)           \u2013            </li> </ul>"},{"location":"reference/liblaf/cherries/plugins/comet/#liblaf.cherries.plugins.comet.Asset.kwargs","title":"kwargs  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>kwargs: Mapping[str, Any] = field(factory=dict)\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/comet/#liblaf.cherries.plugins.comet.Asset.metadata","title":"metadata  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>metadata: Mapping[str, Any] | None = None\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/comet/#liblaf.cherries.plugins.comet.Asset.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: PathLike | None\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/comet/#liblaf.cherries.plugins.comet.Asset.path","title":"path  <code>instance-attribute</code>","text":"<pre><code>path: PathLike\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/comet/#liblaf.cherries.plugins.comet.Comet","title":"Comet","text":"<p>               Bases: <code>Run</code></p> <p>Parameters:</p> <ul> <li> <code>plugins</code>               (<code>dict[PluginId, str]</code>, default:                   <code>&lt;class 'dict'&gt;</code> )           \u2013            <p>dict() -&gt; new empty dictionary dict(mapping) -&gt; new dictionary initialized from a mapping object\u2019s     (key, value) pairs dict(iterable) -&gt; new dictionary initialized as if via:     d = {}     for k, v in iterable:         d[k] = v dict(**kwargs) -&gt; new dictionary initialized with the name=value pairs     in the keyword argument list.  For example:  dict(one=1, two=2)</p> </li> <li> <code>disabled</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            </li> <li> <code>enable_dvc</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            </li> </ul> <p>Methods:</p> <ul> <li> <code>data_dir</code>             \u2013              </li> <li> <code>delegate</code>             \u2013              </li> <li> <code>end</code>             \u2013              </li> <li> <code>entrypoint</code>             \u2013              </li> <li> <code>exp_dir</code>             \u2013              </li> <li> <code>exp_name</code>             \u2013              </li> <li> <code>get_others</code>             \u2013              </li> <li> <code>get_params</code>             \u2013              </li> <li> <code>get_url</code>             \u2013              </li> <li> <code>log_asset</code>             \u2013              </li> <li> <code>log_input</code>             \u2013              </li> <li> <code>log_metric</code>             \u2013              </li> <li> <code>log_metrics</code>             \u2013              </li> <li> <code>log_other</code>             \u2013              </li> <li> <code>log_others</code>             \u2013              </li> <li> <code>log_output</code>             \u2013              </li> <li> <code>log_parameter</code>             \u2013              </li> <li> <code>log_parameters</code>             \u2013              </li> <li> <code>log_temporary</code>             \u2013              </li> <li> <code>params</code>             \u2013              </li> <li> <code>project_dir</code>             \u2013              </li> <li> <code>project_name</code>             \u2013              </li> <li> <code>register</code>             \u2013              </li> <li> <code>start</code>             \u2013              </li> <li> <code>start_time</code>             \u2013              </li> <li> <code>url</code>             \u2013              </li> </ul> <p>Attributes:</p> <ul> <li> <code>disabled</code>               (<code>bool</code>)           \u2013            </li> <li> <code>enable_dvc</code>               (<code>bool</code>)           \u2013            </li> <li> <code>experiment</code>               (<code>CometExperiment</code>)           \u2013            </li> <li> <code>plugin_id</code>               (<code>str</code>)           \u2013            </li> <li> <code>plugin_root</code>               (<code>Self</code>)           \u2013            </li> <li> <code>plugins</code>               (<code>dict[PluginId, Plugin]</code>)           \u2013            </li> </ul>"},{"location":"reference/liblaf/cherries/plugins/comet/#liblaf.cherries.plugins.comet.Comet.disabled","title":"disabled  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>disabled: bool = field(default=False)\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/comet/#liblaf.cherries.plugins.comet.Comet.enable_dvc","title":"enable_dvc  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>enable_dvc: bool = False\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/comet/#liblaf.cherries.plugins.comet.Comet.experiment","title":"experiment  <code>property</code>","text":"<pre><code>experiment: CometExperiment\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/comet/#liblaf.cherries.plugins.comet.Comet.plugin_id","title":"plugin_id  <code>property</code>","text":"<pre><code>plugin_id: str\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/comet/#liblaf.cherries.plugins.comet.Comet.plugin_root","title":"plugin_root  <code>property</code>","text":"<pre><code>plugin_root: Self\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/comet/#liblaf.cherries.plugins.comet.Comet.plugins","title":"plugins  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>plugins: dict[PluginId, Plugin] = field(\n    factory=dict, kw_only=True\n)\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/comet/#liblaf.cherries.plugins.comet.Comet.data_dir","title":"data_dir","text":"<pre><code>data_dir() -&gt; Path\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@plugin_cached_property\ndef data_dir(self) -&gt; Path:\n    return path_utils.data()\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/comet/#liblaf.cherries.plugins.comet.Comet.delegate","title":"delegate","text":"<pre><code>delegate(\n    method: MethodName,\n    args: Sequence[Any] = (),\n    kwargs: Mapping[str, Any] = {},\n    *,\n    first_result: bool = False,\n) -&gt; Any\n</code></pre> Source code in <code>src/liblaf/cherries/core/_plugin.py</code> <pre><code>def delegate(\n    self,\n    method: MethodName,\n    args: Sequence[Any] = (),\n    kwargs: Mapping[str, Any] = {},\n    *,\n    first_result: bool = False,\n) -&gt; Any:\n    __tracebackhide__ = True\n    plugins: Sequence[Plugin] = self._plugins_sort(method)\n    if not plugins:\n        if first_result:\n            return None\n        return []\n    results: list[Any] = []\n    for plugin in plugins:\n        try:\n            result: Any = getattr(plugin, method)(*args, **kwargs)\n        except BaseException as e:\n            if isinstance(e, (KeyboardInterrupt, SystemExit)):\n                raise\n            logger.exception(\"Plugin {}\", plugin.plugin_id)\n        else:\n            if result is None:\n                continue\n            if first_result:\n                return result\n            results.append(result)\n    return results\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/comet/#liblaf.cherries.plugins.comet.Comet.end","title":"end","text":"<pre><code>end(*args, **kwargs) -&gt; None\n</code></pre> Source code in <code>src/liblaf/cherries/plugins/comet.py</code> <pre><code>@override\n@core.impl(after=(\"Git\", \"Logging\"))\ndef end(self, *args, **kwargs) -&gt; None:\n    try:\n        self._log_asset_git_end()\n    except git.GitError as err:\n        logger.exception(err)\n    self.experiment.end()\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/comet/#liblaf.cherries.plugins.comet.Comet.entrypoint","title":"entrypoint","text":"<pre><code>entrypoint() -&gt; Path\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@plugin_cached_property\ndef entrypoint(self) -&gt; Path:\n    return path_utils.entrypoint()\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/comet/#liblaf.cherries.plugins.comet.Comet.exp_dir","title":"exp_dir","text":"<pre><code>exp_dir() -&gt; Path\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@plugin_cached_property\ndef exp_dir(self) -&gt; Path:\n    return path_utils.exp_dir()\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/comet/#liblaf.cherries.plugins.comet.Comet.exp_name","title":"exp_name","text":"<pre><code>exp_name() -&gt; str\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@plugin_cached_property\ndef exp_name(self) -&gt; str:\n    return (\n        self.entrypoint.relative_to(self.project_dir)\n        .as_posix()\n        .removeprefix(\"exp/\")\n    )\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/comet/#liblaf.cherries.plugins.comet.Comet.get_others","title":"get_others","text":"<pre><code>get_others() -&gt; Mapping[str, Any]\n</code></pre> Source code in <code>src/liblaf/cherries/plugins/comet.py</code> <pre><code>@override\n@core.impl\ndef get_others(self) -&gt; Mapping[str, Any]:\n    return self.experiment.others\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/comet/#liblaf.cherries.plugins.comet.Comet.get_params","title":"get_params","text":"<pre><code>get_params() -&gt; Mapping[str, Any]\n</code></pre> Source code in <code>src/liblaf/cherries/plugins/comet.py</code> <pre><code>@override\n@core.impl\ndef get_params(self) -&gt; Mapping[str, Any]:\n    return self.experiment.params\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/comet/#liblaf.cherries.plugins.comet.Comet.get_url","title":"get_url","text":"<pre><code>get_url() -&gt; str\n</code></pre> Source code in <code>src/liblaf/cherries/plugins/comet.py</code> <pre><code>@override\n@core.impl\ndef get_url(self) -&gt; str:\n    return self.experiment.url  # pyright: ignore[reportReturnType]\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/comet/#liblaf.cherries.plugins.comet.Comet.log_asset","title":"log_asset","text":"<pre><code>log_asset(\n    path: PathLike, name: PathLike | None = None, **kwargs\n) -&gt; None\n</code></pre> Source code in <code>src/liblaf/cherries/plugins/comet.py</code> <pre><code>@override\n@core.impl(after=(\"Dvc\",))\ndef log_asset(\n    self,\n    path: PathLike,\n    name: PathLike | None = None,\n    **kwargs,\n) -&gt; None:\n    if self._log_asset_git(path, name, **kwargs):\n        return\n    if self.enable_dvc and self._log_asset_dvc(path, name, **kwargs):\n        return\n    name = path_utils.as_posix(name)\n    self.experiment.log_asset(path, name, **kwargs)\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/comet/#liblaf.cherries.plugins.comet.Comet.log_input","title":"log_input","text":"<pre><code>log_input(\n    path: PathLike,\n    name: PathLike | None = None,\n    *,\n    metadata: Mapping[str, Any] | None = None,\n    **kwargs,\n) -&gt; None\n</code></pre> Source code in <code>src/liblaf/cherries/plugins/comet.py</code> <pre><code>@override\n@core.impl(after=(\"Dvc\",))\ndef log_input(\n    self,\n    path: PathLike,\n    name: PathLike | None = None,\n    *,\n    metadata: Mapping[str, Any] | None = None,\n    **kwargs,\n) -&gt; None:\n    if name is None:\n        path = Path(path)\n        name = f\"inputs/{path.name}\"\n    metadata = toolz.assoc(metadata or {}, \"type\", \"input\")\n    self.log_asset(path, name, metadata=metadata, **kwargs)\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/comet/#liblaf.cherries.plugins.comet.Comet.log_metric","title":"log_metric","text":"<pre><code>log_metric(*args, **kwargs) -&gt; None\n</code></pre> Source code in <code>src/liblaf/cherries/plugins/comet.py</code> <pre><code>@override\n@core.impl\ndef log_metric(self, *args, **kwargs) -&gt; None:\n    return self.experiment.log_metric(*args, **kwargs)\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/comet/#liblaf.cherries.plugins.comet.Comet.log_metrics","title":"log_metrics","text":"<pre><code>log_metrics(*args, **kwargs) -&gt; None\n</code></pre> Source code in <code>src/liblaf/cherries/plugins/comet.py</code> <pre><code>@override\n@core.impl\ndef log_metrics(self, *args, **kwargs) -&gt; None:\n    return self.experiment.log_metrics(*args, **kwargs)\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/comet/#liblaf.cherries.plugins.comet.Comet.log_other","title":"log_other","text":"<pre><code>log_other(*args, **kwargs) -&gt; None\n</code></pre> Source code in <code>src/liblaf/cherries/plugins/comet.py</code> <pre><code>@override\n@core.impl\ndef log_other(self, *args, **kwargs) -&gt; None:\n    return self.experiment.log_other(*args, **kwargs)\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/comet/#liblaf.cherries.plugins.comet.Comet.log_others","title":"log_others","text":"<pre><code>log_others(*args, **kwargs) -&gt; None\n</code></pre> Source code in <code>src/liblaf/cherries/plugins/comet.py</code> <pre><code>@override\n@core.impl\ndef log_others(self, *args, **kwargs) -&gt; None:\n    return self.experiment.log_others(*args, **kwargs)\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/comet/#liblaf.cherries.plugins.comet.Comet.log_output","title":"log_output","text":"<pre><code>log_output(\n    path: PathLike,\n    name: PathLike | None = None,\n    *,\n    metadata: Mapping[str, Any] | None = None,\n    **kwargs,\n) -&gt; None\n</code></pre> Source code in <code>src/liblaf/cherries/plugins/comet.py</code> <pre><code>@override\n@core.impl(after=(\"Dvc\",))\ndef log_output(\n    self,\n    path: PathLike,\n    name: PathLike | None = None,\n    *,\n    metadata: Mapping[str, Any] | None = None,\n    **kwargs,\n) -&gt; None:\n    if name is None:\n        path = Path(path)\n        name = f\"outputs/{path.name}\"\n    metadata = toolz.assoc(metadata or {}, \"type\", \"output\")\n    self.log_asset(path, name, metadata=metadata, **kwargs)\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/comet/#liblaf.cherries.plugins.comet.Comet.log_parameter","title":"log_parameter","text":"<pre><code>log_parameter(*args, **kwargs) -&gt; None\n</code></pre> Source code in <code>src/liblaf/cherries/plugins/comet.py</code> <pre><code>@override\n@core.impl\ndef log_parameter(self, *args, **kwargs) -&gt; None:\n    return self.experiment.log_parameter(*args, **kwargs)\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/comet/#liblaf.cherries.plugins.comet.Comet.log_parameters","title":"log_parameters","text":"<pre><code>log_parameters(*args, **kwargs) -&gt; None\n</code></pre> Source code in <code>src/liblaf/cherries/plugins/comet.py</code> <pre><code>@override\n@core.impl\ndef log_parameters(self, *args, **kwargs) -&gt; None:\n    return self.experiment.log_parameters(*args, **kwargs)\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/comet/#liblaf.cherries.plugins.comet.Comet.log_temporary","title":"log_temporary","text":"<pre><code>log_temporary(\n    path: PathLike,\n    name: PathLike | None = None,\n    *,\n    metadata: Mapping[str, Any] | None = None,\n    **kwargs,\n) -&gt; None\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@spec\ndef log_temporary(\n    self,\n    path: PathLike,\n    name: PathLike | None = None,\n    *,\n    metadata: Mapping[str, Any] | None = None,\n    **kwargs,\n) -&gt; None: ...\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/comet/#liblaf.cherries.plugins.comet.Comet.params","title":"params","text":"<pre><code>params() -&gt; Mapping[str, Any]\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@plugin_property\ndef params(self) -&gt; Mapping[str, Any]:\n    return self.plugin_root.get_params()\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/comet/#liblaf.cherries.plugins.comet.Comet.project_dir","title":"project_dir","text":"<pre><code>project_dir() -&gt; Path\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@plugin_cached_property\ndef project_dir(self) -&gt; Path:\n    return path_utils.project_dir()\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/comet/#liblaf.cherries.plugins.comet.Comet.project_name","title":"project_name","text":"<pre><code>project_name() -&gt; str | None\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@plugin_cached_property\ndef project_name(self) -&gt; str | None:\n    return self.project_dir.name\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/comet/#liblaf.cherries.plugins.comet.Comet.register","title":"register","text":"<pre><code>register(plugin: Plugin) -&gt; None\n</code></pre> Source code in <code>src/liblaf/cherries/core/_plugin.py</code> <pre><code>def register(self, plugin: \"Plugin\") -&gt; None:\n    impls: dict[MethodName, ImplInfo] = collect_impls(plugin)\n    for name in impls:\n        self._cache_sort_plugins.pop(name, None)\n    plugin._plugin_parent = self  # noqa: SLF001\n    self.plugins[plugin.plugin_id] = plugin\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/comet/#liblaf.cherries.plugins.comet.Comet.start","title":"start","text":"<pre><code>start(*args, **kwargs) -&gt; None\n</code></pre> Source code in <code>src/liblaf/cherries/plugins/comet.py</code> <pre><code>@override\n@core.impl(after=(\"Logging\",))\ndef start(self, *args, **kwargs) -&gt; None:\n    logger.disable(\"comet_ml\")\n    try:\n        comet_ml.start(\n            project_name=self.project_name,\n            experiment_config=comet_ml.ExperimentConfig(\n                disabled=self.disabled, name=self.exp_name\n            ),\n        )\n    except ValueError as err:\n        logger.warning(err)\n    logger.enable(\"comet_ml\")\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/comet/#liblaf.cherries.plugins.comet.Comet.start_time","title":"start_time","text":"<pre><code>start_time() -&gt; datetime\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@plugin_cached_property\ndef start_time(self) -&gt; datetime.datetime:\n    return datetime.datetime.now().astimezone()\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/comet/#liblaf.cherries.plugins.comet.Comet.url","title":"url","text":"<pre><code>url() -&gt; str\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@plugin_property\ndef url(self) -&gt; str:\n    return self.plugin_root.get_url()\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/dvc/","title":"dvc","text":""},{"location":"reference/liblaf/cherries/plugins/dvc/#liblaf.cherries.plugins.dvc","title":"liblaf.cherries.plugins.dvc","text":"<p>Classes:</p> <ul> <li> <code>Dvc</code>           \u2013            </li> </ul>"},{"location":"reference/liblaf/cherries/plugins/dvc/#liblaf.cherries.plugins.dvc.Dvc","title":"Dvc","text":"<p>               Bases: <code>Run</code></p> <p>Parameters:</p> <ul> <li> <code>plugins</code>               (<code>dict[PluginId, str]</code>, default:                   <code>&lt;class 'dict'&gt;</code> )           \u2013            <p>dict() -&gt; new empty dictionary dict(mapping) -&gt; new dictionary initialized from a mapping object\u2019s     (key, value) pairs dict(iterable) -&gt; new dictionary initialized as if via:     d = {}     for k, v in iterable:         d[k] = v dict(**kwargs) -&gt; new dictionary initialized with the name=value pairs     in the keyword argument list.  For example:  dict(one=1, two=2)</p> </li> </ul> <p>Methods:</p> <ul> <li> <code>check_ignore</code>             \u2013              </li> <li> <code>data_dir</code>             \u2013              </li> <li> <code>delegate</code>             \u2013              </li> <li> <code>end</code>             \u2013              </li> <li> <code>entrypoint</code>             \u2013              </li> <li> <code>exp_dir</code>             \u2013              </li> <li> <code>exp_name</code>             \u2013              </li> <li> <code>get_others</code>             \u2013              </li> <li> <code>get_params</code>             \u2013              </li> <li> <code>get_url</code>             \u2013              </li> <li> <code>log_asset</code>             \u2013              </li> <li> <code>log_input</code>             \u2013              </li> <li> <code>log_metric</code>             \u2013              </li> <li> <code>log_metrics</code>             \u2013              </li> <li> <code>log_other</code>             \u2013              </li> <li> <code>log_others</code>             \u2013              </li> <li> <code>log_output</code>             \u2013              </li> <li> <code>log_parameter</code>             \u2013              </li> <li> <code>log_parameters</code>             \u2013              </li> <li> <code>log_temporary</code>             \u2013              </li> <li> <code>params</code>             \u2013              </li> <li> <code>project_dir</code>             \u2013              </li> <li> <code>project_name</code>             \u2013              </li> <li> <code>register</code>             \u2013              </li> <li> <code>start</code>             \u2013              </li> <li> <code>start_time</code>             \u2013              </li> <li> <code>url</code>             \u2013              </li> </ul> <p>Attributes:</p> <ul> <li> <code>plugin_id</code>               (<code>str</code>)           \u2013            </li> <li> <code>plugin_root</code>               (<code>Self</code>)           \u2013            </li> <li> <code>plugins</code>               (<code>dict[PluginId, Plugin]</code>)           \u2013            </li> </ul>"},{"location":"reference/liblaf/cherries/plugins/dvc/#liblaf.cherries.plugins.dvc.Dvc.plugin_id","title":"plugin_id  <code>property</code>","text":"<pre><code>plugin_id: str\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/dvc/#liblaf.cherries.plugins.dvc.Dvc.plugin_root","title":"plugin_root  <code>property</code>","text":"<pre><code>plugin_root: Self\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/dvc/#liblaf.cherries.plugins.dvc.Dvc.plugins","title":"plugins  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>plugins: dict[PluginId, Plugin] = field(\n    factory=dict, kw_only=True\n)\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/dvc/#liblaf.cherries.plugins.dvc.Dvc.check_ignore","title":"check_ignore","text":"<pre><code>check_ignore(path: PathLike) -&gt; bool\n</code></pre> Source code in <code>src/liblaf/cherries/plugins/dvc.py</code> <pre><code>def check_ignore(self, path: PathLike) -&gt; bool:\n    process: subprocess.CompletedProcess[bytes] = subprocess.run(\n        [\"dvc\", \"check-ignore\", \"--quiet\", path], check=False\n    )\n    return process.returncode == 0\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/dvc/#liblaf.cherries.plugins.dvc.Dvc.data_dir","title":"data_dir","text":"<pre><code>data_dir() -&gt; Path\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@plugin_cached_property\ndef data_dir(self) -&gt; Path:\n    return path_utils.data()\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/dvc/#liblaf.cherries.plugins.dvc.Dvc.delegate","title":"delegate","text":"<pre><code>delegate(\n    method: MethodName,\n    args: Sequence[Any] = (),\n    kwargs: Mapping[str, Any] = {},\n    *,\n    first_result: bool = False,\n) -&gt; Any\n</code></pre> Source code in <code>src/liblaf/cherries/core/_plugin.py</code> <pre><code>def delegate(\n    self,\n    method: MethodName,\n    args: Sequence[Any] = (),\n    kwargs: Mapping[str, Any] = {},\n    *,\n    first_result: bool = False,\n) -&gt; Any:\n    __tracebackhide__ = True\n    plugins: Sequence[Plugin] = self._plugins_sort(method)\n    if not plugins:\n        if first_result:\n            return None\n        return []\n    results: list[Any] = []\n    for plugin in plugins:\n        try:\n            result: Any = getattr(plugin, method)(*args, **kwargs)\n        except BaseException as e:\n            if isinstance(e, (KeyboardInterrupt, SystemExit)):\n                raise\n            logger.exception(\"Plugin {}\", plugin.plugin_id)\n        else:\n            if result is None:\n                continue\n            if first_result:\n                return result\n            results.append(result)\n    return results\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/dvc/#liblaf.cherries.plugins.dvc.Dvc.end","title":"end","text":"<pre><code>end(*args, **kwargs) -&gt; None\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@spec\ndef end(self, *args, **kwargs) -&gt; None: ...\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/dvc/#liblaf.cherries.plugins.dvc.Dvc.entrypoint","title":"entrypoint","text":"<pre><code>entrypoint() -&gt; Path\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@plugin_cached_property\ndef entrypoint(self) -&gt; Path:\n    return path_utils.entrypoint()\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/dvc/#liblaf.cherries.plugins.dvc.Dvc.exp_dir","title":"exp_dir","text":"<pre><code>exp_dir() -&gt; Path\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@plugin_cached_property\ndef exp_dir(self) -&gt; Path:\n    return path_utils.exp_dir()\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/dvc/#liblaf.cherries.plugins.dvc.Dvc.exp_name","title":"exp_name","text":"<pre><code>exp_name() -&gt; str\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@plugin_cached_property\ndef exp_name(self) -&gt; str:\n    return (\n        self.entrypoint.relative_to(self.project_dir)\n        .as_posix()\n        .removeprefix(\"exp/\")\n    )\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/dvc/#liblaf.cherries.plugins.dvc.Dvc.get_others","title":"get_others","text":"<pre><code>get_others() -&gt; Mapping[str, Any]\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@spec(first_result=True)\ndef get_others(self) -&gt; Mapping[str, Any]: ...\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/dvc/#liblaf.cherries.plugins.dvc.Dvc.get_params","title":"get_params","text":"<pre><code>get_params() -&gt; Mapping[str, Any]\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@spec(first_result=True)\ndef get_params(self) -&gt; Mapping[str, Any]: ...\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/dvc/#liblaf.cherries.plugins.dvc.Dvc.get_url","title":"get_url","text":"<pre><code>get_url() -&gt; str\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@spec(first_result=True)\ndef get_url(self) -&gt; str: ...\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/dvc/#liblaf.cherries.plugins.dvc.Dvc.log_asset","title":"log_asset","text":"<pre><code>log_asset(path: PathLike, *args, **kwargs) -&gt; None\n</code></pre> Source code in <code>src/liblaf/cherries/plugins/dvc.py</code> <pre><code>@override\n@core.impl(before=(\"Comet\",))\ndef log_asset(self, path: PathLike, *args, **kwargs) -&gt; None:\n    if self.check_ignore(path):\n        return\n    self._dvc(\"add\", \"--quiet\", path)\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/dvc/#liblaf.cherries.plugins.dvc.Dvc.log_input","title":"log_input","text":"<pre><code>log_input(*args, **kwargs) -&gt; None\n</code></pre> Source code in <code>src/liblaf/cherries/plugins/dvc.py</code> <pre><code>@override\n@core.impl(before=(\"Comet\",))\ndef log_input(self, *args, **kwargs) -&gt; None:\n    self.log_asset(*args, **kwargs)\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/dvc/#liblaf.cherries.plugins.dvc.Dvc.log_metric","title":"log_metric","text":"<pre><code>log_metric(\n    name: str,\n    value: Any,\n    /,\n    step: int | None = None,\n    epoch: int | None = None,\n    **kwargs,\n) -&gt; None\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@spec\ndef log_metric(\n    self,\n    name: str,\n    value: Any,\n    /,\n    step: int | None = None,\n    epoch: int | None = None,\n    **kwargs,\n) -&gt; None: ...\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/dvc/#liblaf.cherries.plugins.dvc.Dvc.log_metrics","title":"log_metrics","text":"<pre><code>log_metrics(\n    dic: Mapping[str, Any],\n    /,\n    prefix: str | None = None,\n    step: int | None = None,\n    epoch: int | None = None,\n    **kwargs,\n) -&gt; None\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@spec\ndef log_metrics(\n    self,\n    dic: Mapping[str, Any],\n    /,\n    prefix: str | None = None,\n    step: int | None = None,\n    epoch: int | None = None,\n    **kwargs,\n) -&gt; None: ...\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/dvc/#liblaf.cherries.plugins.dvc.Dvc.log_other","title":"log_other","text":"<pre><code>log_other(key: Any, value: Any, /, **kwargs) -&gt; None\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@spec\ndef log_other(self, key: Any, value: Any, /, **kwargs) -&gt; None: ...\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/dvc/#liblaf.cherries.plugins.dvc.Dvc.log_others","title":"log_others","text":"<pre><code>log_others(\n    dictionary: Mapping[Any, Any], /, **kwargs\n) -&gt; None\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@spec\ndef log_others(self, dictionary: Mapping[Any, Any], /, **kwargs) -&gt; None: ...\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/dvc/#liblaf.cherries.plugins.dvc.Dvc.log_output","title":"log_output","text":"<pre><code>log_output(*args, **kwargs) -&gt; None\n</code></pre> Source code in <code>src/liblaf/cherries/plugins/dvc.py</code> <pre><code>@override\n@core.impl(before=(\"Comet\",))\ndef log_output(self, *args, **kwargs) -&gt; None:\n    self.log_asset(*args, **kwargs)\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/dvc/#liblaf.cherries.plugins.dvc.Dvc.log_parameter","title":"log_parameter","text":"<pre><code>log_parameter(\n    name: Any,\n    value: Any,\n    /,\n    step: int | None = None,\n    **kwargs,\n) -&gt; None\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@spec\ndef log_parameter(\n    self, name: Any, value: Any, /, step: int | None = None, **kwargs\n) -&gt; None: ...\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/dvc/#liblaf.cherries.plugins.dvc.Dvc.log_parameters","title":"log_parameters","text":"<pre><code>log_parameters(\n    parameters: Mapping[Any, Any],\n    /,\n    prefix: str | None = None,\n    step: int | None = None,\n    **kwargs,\n) -&gt; None\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@spec\ndef log_parameters(\n    self,\n    parameters: Mapping[Any, Any],\n    /,\n    prefix: str | None = None,\n    step: int | None = None,\n    **kwargs,\n) -&gt; None: ...\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/dvc/#liblaf.cherries.plugins.dvc.Dvc.log_temporary","title":"log_temporary","text":"<pre><code>log_temporary(\n    path: PathLike,\n    name: PathLike | None = None,\n    *,\n    metadata: Mapping[str, Any] | None = None,\n    **kwargs,\n) -&gt; None\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@spec\ndef log_temporary(\n    self,\n    path: PathLike,\n    name: PathLike | None = None,\n    *,\n    metadata: Mapping[str, Any] | None = None,\n    **kwargs,\n) -&gt; None: ...\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/dvc/#liblaf.cherries.plugins.dvc.Dvc.params","title":"params","text":"<pre><code>params() -&gt; Mapping[str, Any]\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@plugin_property\ndef params(self) -&gt; Mapping[str, Any]:\n    return self.plugin_root.get_params()\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/dvc/#liblaf.cherries.plugins.dvc.Dvc.project_dir","title":"project_dir","text":"<pre><code>project_dir() -&gt; Path\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@plugin_cached_property\ndef project_dir(self) -&gt; Path:\n    return path_utils.project_dir()\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/dvc/#liblaf.cherries.plugins.dvc.Dvc.project_name","title":"project_name","text":"<pre><code>project_name() -&gt; str | None\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@plugin_cached_property\ndef project_name(self) -&gt; str | None:\n    return self.project_dir.name\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/dvc/#liblaf.cherries.plugins.dvc.Dvc.register","title":"register","text":"<pre><code>register(plugin: Plugin) -&gt; None\n</code></pre> Source code in <code>src/liblaf/cherries/core/_plugin.py</code> <pre><code>def register(self, plugin: \"Plugin\") -&gt; None:\n    impls: dict[MethodName, ImplInfo] = collect_impls(plugin)\n    for name in impls:\n        self._cache_sort_plugins.pop(name, None)\n    plugin._plugin_parent = self  # noqa: SLF001\n    self.plugins[plugin.plugin_id] = plugin\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/dvc/#liblaf.cherries.plugins.dvc.Dvc.start","title":"start","text":"<pre><code>start(*args, **kwargs) -&gt; None\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@spec(delegate=False)\ndef start(self, *args, **kwargs) -&gt; None:\n    env.read_env(self.entrypoint.parent / \".env\")\n    return self.delegate(\"start\", args, kwargs)\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/dvc/#liblaf.cherries.plugins.dvc.Dvc.start_time","title":"start_time","text":"<pre><code>start_time() -&gt; datetime\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@plugin_cached_property\ndef start_time(self) -&gt; datetime.datetime:\n    return datetime.datetime.now().astimezone()\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/dvc/#liblaf.cherries.plugins.dvc.Dvc.url","title":"url","text":"<pre><code>url() -&gt; str\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@plugin_property\ndef url(self) -&gt; str:\n    return self.plugin_root.get_url()\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/git_/","title":"git_","text":""},{"location":"reference/liblaf/cherries/plugins/git_/#liblaf.cherries.plugins.git_","title":"liblaf.cherries.plugins.git_","text":"<p>Classes:</p> <ul> <li> <code>Git</code>           \u2013            </li> </ul>"},{"location":"reference/liblaf/cherries/plugins/git_/#liblaf.cherries.plugins.git_.Git","title":"Git","text":"<p>               Bases: <code>Run</code></p> <p>Parameters:</p> <ul> <li> <code>plugins</code>               (<code>dict[PluginId, str]</code>, default:                   <code>&lt;class 'dict'&gt;</code> )           \u2013            <p>dict() -&gt; new empty dictionary dict(mapping) -&gt; new dictionary initialized from a mapping object\u2019s     (key, value) pairs dict(iterable) -&gt; new dictionary initialized as if via:     d = {}     for k, v in iterable:         d[k] = v dict(**kwargs) -&gt; new dictionary initialized with the name=value pairs     in the keyword argument list.  For example:  dict(one=1, two=2)</p> </li> <li> <code>commit</code>               (<code>bool</code>, default:                   <code>True</code> )           \u2013            </li> <li> <code>inputs</code>               (<code>list[Path]</code>, default:                   <code>&lt;dynamic&gt;</code> )           \u2013            <p>Built-in mutable sequence.</p> <p>If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified.</p> </li> <li> <code>outputs</code>               (<code>list[Path]</code>, default:                   <code>&lt;dynamic&gt;</code> )           \u2013            <p>Built-in mutable sequence.</p> <p>If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified.</p> </li> <li> <code>repo</code>               (<code>Repo</code>, default:                   <code>None</code> )           \u2013            </li> <li> <code>temporaries</code>               (<code>list[Path]</code>, default:                   <code>&lt;dynamic&gt;</code> )           \u2013            <p>Built-in mutable sequence.</p> <p>If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified.</p> </li> <li> <code>verify</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            </li> </ul> <p>Methods:</p> <ul> <li> <code>data_dir</code>             \u2013              </li> <li> <code>delegate</code>             \u2013              </li> <li> <code>end</code>             \u2013              </li> <li> <code>entrypoint</code>             \u2013              </li> <li> <code>exp_dir</code>             \u2013              </li> <li> <code>exp_name</code>             \u2013              </li> <li> <code>get_others</code>             \u2013              </li> <li> <code>get_params</code>             \u2013              </li> <li> <code>get_url</code>             \u2013              </li> <li> <code>log_asset</code>             \u2013              </li> <li> <code>log_input</code>             \u2013              </li> <li> <code>log_metric</code>             \u2013              </li> <li> <code>log_metrics</code>             \u2013              </li> <li> <code>log_other</code>             \u2013              </li> <li> <code>log_others</code>             \u2013              </li> <li> <code>log_output</code>             \u2013              </li> <li> <code>log_parameter</code>             \u2013              </li> <li> <code>log_parameters</code>             \u2013              </li> <li> <code>log_temporary</code>             \u2013              </li> <li> <code>params</code>             \u2013              </li> <li> <code>project_dir</code>             \u2013              </li> <li> <code>project_name</code>             \u2013              </li> <li> <code>register</code>             \u2013              </li> <li> <code>start</code>             \u2013              </li> <li> <code>start_time</code>             \u2013              </li> <li> <code>url</code>             \u2013              </li> </ul> <p>Attributes:</p> <ul> <li> <code>commit</code>               (<code>bool</code>)           \u2013            </li> <li> <code>inputs</code>               (<code>list[Path]</code>)           \u2013            </li> <li> <code>outputs</code>               (<code>list[Path]</code>)           \u2013            </li> <li> <code>plugin_id</code>               (<code>str</code>)           \u2013            </li> <li> <code>plugin_root</code>               (<code>Self</code>)           \u2013            </li> <li> <code>plugins</code>               (<code>dict[PluginId, Plugin]</code>)           \u2013            </li> <li> <code>repo</code>               (<code>Repo</code>)           \u2013            </li> <li> <code>temporaries</code>               (<code>list[Path]</code>)           \u2013            </li> <li> <code>verify</code>               (<code>bool</code>)           \u2013            </li> </ul>"},{"location":"reference/liblaf/cherries/plugins/git_/#liblaf.cherries.plugins.git_.Git.commit","title":"commit  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>commit: bool = True\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/git_/#liblaf.cherries.plugins.git_.Git.inputs","title":"inputs  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>inputs: list[Path] = field(factory=list)\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/git_/#liblaf.cherries.plugins.git_.Git.outputs","title":"outputs  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>outputs: list[Path] = field(factory=list)\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/git_/#liblaf.cherries.plugins.git_.Git.plugin_id","title":"plugin_id  <code>property</code>","text":"<pre><code>plugin_id: str\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/git_/#liblaf.cherries.plugins.git_.Git.plugin_root","title":"plugin_root  <code>property</code>","text":"<pre><code>plugin_root: Self\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/git_/#liblaf.cherries.plugins.git_.Git.plugins","title":"plugins  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>plugins: dict[PluginId, Plugin] = field(\n    factory=dict, kw_only=True\n)\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/git_/#liblaf.cherries.plugins.git_.Git.repo","title":"repo  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>repo: Repo = field(default=None)\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/git_/#liblaf.cherries.plugins.git_.Git.temporaries","title":"temporaries  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>temporaries: list[Path] = field(factory=list)\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/git_/#liblaf.cherries.plugins.git_.Git.verify","title":"verify  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>verify: bool = False\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/git_/#liblaf.cherries.plugins.git_.Git.data_dir","title":"data_dir","text":"<pre><code>data_dir() -&gt; Path\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@plugin_cached_property\ndef data_dir(self) -&gt; Path:\n    return path_utils.data()\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/git_/#liblaf.cherries.plugins.git_.Git.delegate","title":"delegate","text":"<pre><code>delegate(\n    method: MethodName,\n    args: Sequence[Any] = (),\n    kwargs: Mapping[str, Any] = {},\n    *,\n    first_result: bool = False,\n) -&gt; Any\n</code></pre> Source code in <code>src/liblaf/cherries/core/_plugin.py</code> <pre><code>def delegate(\n    self,\n    method: MethodName,\n    args: Sequence[Any] = (),\n    kwargs: Mapping[str, Any] = {},\n    *,\n    first_result: bool = False,\n) -&gt; Any:\n    __tracebackhide__ = True\n    plugins: Sequence[Plugin] = self._plugins_sort(method)\n    if not plugins:\n        if first_result:\n            return None\n        return []\n    results: list[Any] = []\n    for plugin in plugins:\n        try:\n            result: Any = getattr(plugin, method)(*args, **kwargs)\n        except BaseException as e:\n            if isinstance(e, (KeyboardInterrupt, SystemExit)):\n                raise\n            logger.exception(\"Plugin {}\", plugin.plugin_id)\n        else:\n            if result is None:\n                continue\n            if first_result:\n                return result\n            results.append(result)\n    return results\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/git_/#liblaf.cherries.plugins.git_.Git.end","title":"end","text":"<pre><code>end(*args, **kwargs) -&gt; None\n</code></pre> Source code in <code>src/liblaf/cherries/plugins/git_.py</code> <pre><code>@override\n@core.impl(after=(\"Dvc\",))\ndef end(self, *args, **kwargs) -&gt; None:\n    if self.commit and self.repo.is_dirty(untracked_files=True):\n        try:\n            self.repo.git.add(all=True)\n            subprocess.run([\"git\", \"status\"], check=False)\n            message: str = self._make_commit_message()\n            self.repo.git.commit(message=message, no_verify=not self.verify)\n        except git.GitCommandError as err:\n            logger.exception(err)\n    self.plugin_root.log_other(\"cherries.git.sha\", self.repo.head.commit.hexsha)\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/git_/#liblaf.cherries.plugins.git_.Git.entrypoint","title":"entrypoint","text":"<pre><code>entrypoint() -&gt; Path\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@plugin_cached_property\ndef entrypoint(self) -&gt; Path:\n    return path_utils.entrypoint()\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/git_/#liblaf.cherries.plugins.git_.Git.exp_dir","title":"exp_dir","text":"<pre><code>exp_dir() -&gt; Path\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@plugin_cached_property\ndef exp_dir(self) -&gt; Path:\n    return path_utils.exp_dir()\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/git_/#liblaf.cherries.plugins.git_.Git.exp_name","title":"exp_name","text":"<pre><code>exp_name() -&gt; str\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@plugin_cached_property\ndef exp_name(self) -&gt; str:\n    return (\n        self.entrypoint.relative_to(self.project_dir)\n        .as_posix()\n        .removeprefix(\"exp/\")\n    )\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/git_/#liblaf.cherries.plugins.git_.Git.get_others","title":"get_others","text":"<pre><code>get_others() -&gt; Mapping[str, Any]\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@spec(first_result=True)\ndef get_others(self) -&gt; Mapping[str, Any]: ...\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/git_/#liblaf.cherries.plugins.git_.Git.get_params","title":"get_params","text":"<pre><code>get_params() -&gt; Mapping[str, Any]\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@spec(first_result=True)\ndef get_params(self) -&gt; Mapping[str, Any]: ...\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/git_/#liblaf.cherries.plugins.git_.Git.get_url","title":"get_url","text":"<pre><code>get_url() -&gt; str\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@spec(first_result=True)\ndef get_url(self) -&gt; str: ...\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/git_/#liblaf.cherries.plugins.git_.Git.log_asset","title":"log_asset","text":"<pre><code>log_asset(\n    path: PathLike,\n    name: PathLike | None = None,\n    *,\n    metadata: Mapping[str, Any] | None = None,\n    **kwargs,\n) -&gt; None\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@spec\ndef log_asset(\n    self,\n    path: PathLike,\n    name: PathLike | None = None,\n    *,\n    metadata: Mapping[str, Any] | None = None,\n    **kwargs,\n) -&gt; None: ...\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/git_/#liblaf.cherries.plugins.git_.Git.log_input","title":"log_input","text":"<pre><code>log_input(path: PathLike, *args, **kwargs) -&gt; None\n</code></pre> Source code in <code>src/liblaf/cherries/plugins/git_.py</code> <pre><code>@override\n@core.impl\ndef log_input(self, path: PathLike, *args, **kwargs) -&gt; None:\n    path: Path = Path(path)\n    self.inputs.append(path.relative_to(self.project_dir))\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/git_/#liblaf.cherries.plugins.git_.Git.log_metric","title":"log_metric","text":"<pre><code>log_metric(\n    name: str,\n    value: Any,\n    /,\n    step: int | None = None,\n    epoch: int | None = None,\n    **kwargs,\n) -&gt; None\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@spec\ndef log_metric(\n    self,\n    name: str,\n    value: Any,\n    /,\n    step: int | None = None,\n    epoch: int | None = None,\n    **kwargs,\n) -&gt; None: ...\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/git_/#liblaf.cherries.plugins.git_.Git.log_metrics","title":"log_metrics","text":"<pre><code>log_metrics(\n    dic: Mapping[str, Any],\n    /,\n    prefix: str | None = None,\n    step: int | None = None,\n    epoch: int | None = None,\n    **kwargs,\n) -&gt; None\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@spec\ndef log_metrics(\n    self,\n    dic: Mapping[str, Any],\n    /,\n    prefix: str | None = None,\n    step: int | None = None,\n    epoch: int | None = None,\n    **kwargs,\n) -&gt; None: ...\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/git_/#liblaf.cherries.plugins.git_.Git.log_other","title":"log_other","text":"<pre><code>log_other(key: Any, value: Any, /, **kwargs) -&gt; None\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@spec\ndef log_other(self, key: Any, value: Any, /, **kwargs) -&gt; None: ...\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/git_/#liblaf.cherries.plugins.git_.Git.log_others","title":"log_others","text":"<pre><code>log_others(\n    dictionary: Mapping[Any, Any], /, **kwargs\n) -&gt; None\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@spec\ndef log_others(self, dictionary: Mapping[Any, Any], /, **kwargs) -&gt; None: ...\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/git_/#liblaf.cherries.plugins.git_.Git.log_output","title":"log_output","text":"<pre><code>log_output(\n    path: PathLike, name: PathLike | None = None, **kwargs\n) -&gt; None\n</code></pre> Source code in <code>src/liblaf/cherries/plugins/git_.py</code> <pre><code>@override\n@core.impl\ndef log_output(\n    self,\n    path: PathLike,\n    name: PathLike | None = None,\n    **kwargs,\n) -&gt; None:\n    path: Path = Path(path)\n    self.outputs.append(path.relative_to(self.project_dir))\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/git_/#liblaf.cherries.plugins.git_.Git.log_parameter","title":"log_parameter","text":"<pre><code>log_parameter(\n    name: Any,\n    value: Any,\n    /,\n    step: int | None = None,\n    **kwargs,\n) -&gt; None\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@spec\ndef log_parameter(\n    self, name: Any, value: Any, /, step: int | None = None, **kwargs\n) -&gt; None: ...\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/git_/#liblaf.cherries.plugins.git_.Git.log_parameters","title":"log_parameters","text":"<pre><code>log_parameters(\n    parameters: Mapping[Any, Any],\n    /,\n    prefix: str | None = None,\n    step: int | None = None,\n    **kwargs,\n) -&gt; None\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@spec\ndef log_parameters(\n    self,\n    parameters: Mapping[Any, Any],\n    /,\n    prefix: str | None = None,\n    step: int | None = None,\n    **kwargs,\n) -&gt; None: ...\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/git_/#liblaf.cherries.plugins.git_.Git.log_temporary","title":"log_temporary","text":"<pre><code>log_temporary(\n    path: PathLike, name: PathLike | None = None, **kwargs\n) -&gt; None\n</code></pre> Source code in <code>src/liblaf/cherries/plugins/git_.py</code> <pre><code>@override\n@core.impl\ndef log_temporary(\n    self, path: PathLike, name: PathLike | None = None, **kwargs\n) -&gt; None:\n    path: Path = Path(path)\n    self.temporaries.append(path.relative_to(self.project_dir))\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/git_/#liblaf.cherries.plugins.git_.Git.params","title":"params","text":"<pre><code>params() -&gt; Mapping[str, Any]\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@plugin_property\ndef params(self) -&gt; Mapping[str, Any]:\n    return self.plugin_root.get_params()\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/git_/#liblaf.cherries.plugins.git_.Git.project_dir","title":"project_dir","text":"<pre><code>project_dir() -&gt; Path\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@plugin_cached_property\ndef project_dir(self) -&gt; Path:\n    return path_utils.project_dir()\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/git_/#liblaf.cherries.plugins.git_.Git.project_name","title":"project_name","text":"<pre><code>project_name() -&gt; str | None\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@plugin_cached_property\ndef project_name(self) -&gt; str | None:\n    return self.project_dir.name\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/git_/#liblaf.cherries.plugins.git_.Git.register","title":"register","text":"<pre><code>register(plugin: Plugin) -&gt; None\n</code></pre> Source code in <code>src/liblaf/cherries/core/_plugin.py</code> <pre><code>def register(self, plugin: \"Plugin\") -&gt; None:\n    impls: dict[MethodName, ImplInfo] = collect_impls(plugin)\n    for name in impls:\n        self._cache_sort_plugins.pop(name, None)\n    plugin._plugin_parent = self  # noqa: SLF001\n    self.plugins[plugin.plugin_id] = plugin\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/git_/#liblaf.cherries.plugins.git_.Git.start","title":"start","text":"<pre><code>start(*args, **kwargs) -&gt; None\n</code></pre> Source code in <code>src/liblaf/cherries/plugins/git_.py</code> <pre><code>@override\n@core.impl\ndef start(self, *args, **kwargs) -&gt; None:\n    self.repo = git.Repo(search_parent_directories=True)\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/git_/#liblaf.cherries.plugins.git_.Git.start_time","title":"start_time","text":"<pre><code>start_time() -&gt; datetime\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@plugin_cached_property\ndef start_time(self) -&gt; datetime.datetime:\n    return datetime.datetime.now().astimezone()\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/git_/#liblaf.cherries.plugins.git_.Git.url","title":"url","text":"<pre><code>url() -&gt; str\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@plugin_property\ndef url(self) -&gt; str:\n    return self.plugin_root.get_url()\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/local/","title":"local","text":""},{"location":"reference/liblaf/cherries/plugins/local/#liblaf.cherries.plugins.local","title":"liblaf.cherries.plugins.local","text":"<p>Classes:</p> <ul> <li> <code>Local</code>           \u2013            </li> </ul>"},{"location":"reference/liblaf/cherries/plugins/local/#liblaf.cherries.plugins.local.Local","title":"Local","text":"<p>               Bases: <code>Run</code></p> <p>Parameters:</p> <ul> <li> <code>plugins</code>               (<code>dict[PluginId, str]</code>, default:                   <code>&lt;class 'dict'&gt;</code> )           \u2013            <p>dict() -&gt; new empty dictionary dict(mapping) -&gt; new dictionary initialized from a mapping object\u2019s     (key, value) pairs dict(iterable) -&gt; new dictionary initialized as if via:     d = {}     for k, v in iterable:         d[k] = v dict(**kwargs) -&gt; new dictionary initialized with the name=value pairs     in the keyword argument list.  For example:  dict(one=1, two=2)</p> </li> <li> <code>folder</code>               (<code>Path</code>, default:                   <code>None</code> )           \u2013            </li> </ul> <p>Methods:</p> <ul> <li> <code>data_dir</code>             \u2013              </li> <li> <code>delegate</code>             \u2013              </li> <li> <code>end</code>             \u2013              </li> <li> <code>entrypoint</code>             \u2013              </li> <li> <code>exp_dir</code>             \u2013              </li> <li> <code>exp_name</code>             \u2013              </li> <li> <code>get_others</code>             \u2013              </li> <li> <code>get_params</code>             \u2013              </li> <li> <code>get_url</code>             \u2013              </li> <li> <code>log_asset</code>             \u2013              </li> <li> <code>log_input</code>             \u2013              </li> <li> <code>log_metric</code>             \u2013              </li> <li> <code>log_metrics</code>             \u2013              </li> <li> <code>log_other</code>             \u2013              </li> <li> <code>log_others</code>             \u2013              </li> <li> <code>log_output</code>             \u2013              </li> <li> <code>log_parameter</code>             \u2013              </li> <li> <code>log_parameters</code>             \u2013              </li> <li> <code>log_temporary</code>             \u2013              </li> <li> <code>params</code>             \u2013              </li> <li> <code>project_dir</code>             \u2013              </li> <li> <code>project_name</code>             \u2013              </li> <li> <code>register</code>             \u2013              </li> <li> <code>start</code>             \u2013              </li> <li> <code>start_time</code>             \u2013              </li> <li> <code>url</code>             \u2013              </li> </ul> <p>Attributes:</p> <ul> <li> <code>folder</code>               (<code>Path</code>)           \u2013            </li> <li> <code>plugin_id</code>               (<code>str</code>)           \u2013            </li> <li> <code>plugin_root</code>               (<code>Self</code>)           \u2013            </li> <li> <code>plugins</code>               (<code>dict[PluginId, Plugin]</code>)           \u2013            </li> </ul>"},{"location":"reference/liblaf/cherries/plugins/local/#liblaf.cherries.plugins.local.Local.folder","title":"folder  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>folder: Path = field(default=None)\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/local/#liblaf.cherries.plugins.local.Local.plugin_id","title":"plugin_id  <code>property</code>","text":"<pre><code>plugin_id: str\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/local/#liblaf.cherries.plugins.local.Local.plugin_root","title":"plugin_root  <code>property</code>","text":"<pre><code>plugin_root: Self\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/local/#liblaf.cherries.plugins.local.Local.plugins","title":"plugins  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>plugins: dict[PluginId, Plugin] = field(\n    factory=dict, kw_only=True\n)\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/local/#liblaf.cherries.plugins.local.Local.data_dir","title":"data_dir","text":"<pre><code>data_dir() -&gt; Path\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@plugin_cached_property\ndef data_dir(self) -&gt; Path:\n    return path_utils.data()\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/local/#liblaf.cherries.plugins.local.Local.delegate","title":"delegate","text":"<pre><code>delegate(\n    method: MethodName,\n    args: Sequence[Any] = (),\n    kwargs: Mapping[str, Any] = {},\n    *,\n    first_result: bool = False,\n) -&gt; Any\n</code></pre> Source code in <code>src/liblaf/cherries/core/_plugin.py</code> <pre><code>def delegate(\n    self,\n    method: MethodName,\n    args: Sequence[Any] = (),\n    kwargs: Mapping[str, Any] = {},\n    *,\n    first_result: bool = False,\n) -&gt; Any:\n    __tracebackhide__ = True\n    plugins: Sequence[Plugin] = self._plugins_sort(method)\n    if not plugins:\n        if first_result:\n            return None\n        return []\n    results: list[Any] = []\n    for plugin in plugins:\n        try:\n            result: Any = getattr(plugin, method)(*args, **kwargs)\n        except BaseException as e:\n            if isinstance(e, (KeyboardInterrupt, SystemExit)):\n                raise\n            logger.exception(\"Plugin {}\", plugin.plugin_id)\n        else:\n            if result is None:\n                continue\n            if first_result:\n                return result\n            results.append(result)\n    return results\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/local/#liblaf.cherries.plugins.local.Local.end","title":"end","text":"<pre><code>end(*args, **kwargs) -&gt; None\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@spec\ndef end(self, *args, **kwargs) -&gt; None: ...\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/local/#liblaf.cherries.plugins.local.Local.entrypoint","title":"entrypoint","text":"<pre><code>entrypoint() -&gt; Path\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@plugin_cached_property\ndef entrypoint(self) -&gt; Path:\n    return path_utils.entrypoint()\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/local/#liblaf.cherries.plugins.local.Local.exp_dir","title":"exp_dir","text":"<pre><code>exp_dir() -&gt; Path\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@plugin_cached_property\ndef exp_dir(self) -&gt; Path:\n    return path_utils.exp_dir()\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/local/#liblaf.cherries.plugins.local.Local.exp_name","title":"exp_name","text":"<pre><code>exp_name() -&gt; str\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@plugin_cached_property\ndef exp_name(self) -&gt; str:\n    return (\n        self.entrypoint.relative_to(self.project_dir)\n        .as_posix()\n        .removeprefix(\"exp/\")\n    )\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/local/#liblaf.cherries.plugins.local.Local.get_others","title":"get_others","text":"<pre><code>get_others() -&gt; Mapping[str, Any]\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@spec(first_result=True)\ndef get_others(self) -&gt; Mapping[str, Any]: ...\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/local/#liblaf.cherries.plugins.local.Local.get_params","title":"get_params","text":"<pre><code>get_params() -&gt; Mapping[str, Any]\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@spec(first_result=True)\ndef get_params(self) -&gt; Mapping[str, Any]: ...\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/local/#liblaf.cherries.plugins.local.Local.get_url","title":"get_url","text":"<pre><code>get_url() -&gt; str\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@spec(first_result=True)\ndef get_url(self) -&gt; str: ...\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/local/#liblaf.cherries.plugins.local.Local.log_asset","title":"log_asset","text":"<pre><code>log_asset(\n    path: PathLike, name: PathLike | None = None, **kwargs\n) -&gt; None\n</code></pre> Source code in <code>src/liblaf/cherries/plugins/local.py</code> <pre><code>@override\n@core.impl\ndef log_asset(\n    self,\n    path: PathLike,\n    name: PathLike | None = None,\n    **kwargs,\n) -&gt; None:\n    path = Path(path)\n    if name is None:\n        path_absolute: Path = path.resolve()\n        if path_absolute.is_relative_to(self.exp_dir):\n            name = path_absolute.relative_to(self.exp_dir)\n        else:\n            name = path\n    target: Path = self.folder / name\n    self._copy(path, target)\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/local/#liblaf.cherries.plugins.local.Local.log_input","title":"log_input","text":"<pre><code>log_input(\n    path: PathLike, name: PathLike | None = None, **kwargs\n) -&gt; None\n</code></pre> Source code in <code>src/liblaf/cherries/plugins/local.py</code> <pre><code>@override\n@core.impl\ndef log_input(\n    self,\n    path: PathLike,\n    name: PathLike | None = None,\n    **kwargs,\n) -&gt; None:\n    if name is None:\n        name = Path(path).name\n    name = f\"inputs/{name}\"\n    self.log_asset(path, name, **kwargs)\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/local/#liblaf.cherries.plugins.local.Local.log_metric","title":"log_metric","text":"<pre><code>log_metric(\n    name: str,\n    value: Any,\n    /,\n    step: int | None = None,\n    epoch: int | None = None,\n    **kwargs,\n) -&gt; None\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@spec\ndef log_metric(\n    self,\n    name: str,\n    value: Any,\n    /,\n    step: int | None = None,\n    epoch: int | None = None,\n    **kwargs,\n) -&gt; None: ...\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/local/#liblaf.cherries.plugins.local.Local.log_metrics","title":"log_metrics","text":"<pre><code>log_metrics(\n    dic: Mapping[str, Any],\n    /,\n    prefix: str | None = None,\n    step: int | None = None,\n    epoch: int | None = None,\n    **kwargs,\n) -&gt; None\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@spec\ndef log_metrics(\n    self,\n    dic: Mapping[str, Any],\n    /,\n    prefix: str | None = None,\n    step: int | None = None,\n    epoch: int | None = None,\n    **kwargs,\n) -&gt; None: ...\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/local/#liblaf.cherries.plugins.local.Local.log_other","title":"log_other","text":"<pre><code>log_other(key: Any, value: Any, /, **kwargs) -&gt; None\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@spec\ndef log_other(self, key: Any, value: Any, /, **kwargs) -&gt; None: ...\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/local/#liblaf.cherries.plugins.local.Local.log_others","title":"log_others","text":"<pre><code>log_others(\n    dictionary: Mapping[Any, Any], /, **kwargs\n) -&gt; None\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@spec\ndef log_others(self, dictionary: Mapping[Any, Any], /, **kwargs) -&gt; None: ...\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/local/#liblaf.cherries.plugins.local.Local.log_output","title":"log_output","text":"<pre><code>log_output(\n    path: PathLike, name: PathLike | None = None, **kwargs\n) -&gt; None\n</code></pre> Source code in <code>src/liblaf/cherries/plugins/local.py</code> <pre><code>@override\n@core.impl\ndef log_output(\n    self,\n    path: PathLike,\n    name: PathLike | None = None,\n    **kwargs,\n) -&gt; None:\n    if name is None:\n        name = Path(path).name\n    name = f\"outputs/{name}\"\n    self.log_asset(path, name, **kwargs)\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/local/#liblaf.cherries.plugins.local.Local.log_parameter","title":"log_parameter","text":"<pre><code>log_parameter(\n    name: Any,\n    value: Any,\n    /,\n    step: int | None = None,\n    **kwargs,\n) -&gt; None\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@spec\ndef log_parameter(\n    self, name: Any, value: Any, /, step: int | None = None, **kwargs\n) -&gt; None: ...\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/local/#liblaf.cherries.plugins.local.Local.log_parameters","title":"log_parameters","text":"<pre><code>log_parameters(\n    parameters: Mapping[Any, Any],\n    /,\n    prefix: str | None = None,\n    step: int | None = None,\n    **kwargs,\n) -&gt; None\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@spec\ndef log_parameters(\n    self,\n    parameters: Mapping[Any, Any],\n    /,\n    prefix: str | None = None,\n    step: int | None = None,\n    **kwargs,\n) -&gt; None: ...\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/local/#liblaf.cherries.plugins.local.Local.log_temporary","title":"log_temporary","text":"<pre><code>log_temporary(\n    path: PathLike, name: PathLike | None = None, **kwargs\n) -&gt; None\n</code></pre> Source code in <code>src/liblaf/cherries/plugins/local.py</code> <pre><code>@override\n@core.impl\ndef log_temporary(\n    self,\n    path: PathLike,\n    name: PathLike | None = None,\n    **kwargs,\n) -&gt; None:\n    if name is None:\n        name = Path(path).name\n    name = f\"temp/{name}\"\n    self.log_asset(path, name, **kwargs)\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/local/#liblaf.cherries.plugins.local.Local.params","title":"params","text":"<pre><code>params() -&gt; Mapping[str, Any]\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@plugin_property\ndef params(self) -&gt; Mapping[str, Any]:\n    return self.plugin_root.get_params()\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/local/#liblaf.cherries.plugins.local.Local.project_dir","title":"project_dir","text":"<pre><code>project_dir() -&gt; Path\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@plugin_cached_property\ndef project_dir(self) -&gt; Path:\n    return path_utils.project_dir()\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/local/#liblaf.cherries.plugins.local.Local.project_name","title":"project_name","text":"<pre><code>project_name() -&gt; str | None\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@plugin_cached_property\ndef project_name(self) -&gt; str | None:\n    return self.project_dir.name\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/local/#liblaf.cherries.plugins.local.Local.register","title":"register","text":"<pre><code>register(plugin: Plugin) -&gt; None\n</code></pre> Source code in <code>src/liblaf/cherries/core/_plugin.py</code> <pre><code>def register(self, plugin: \"Plugin\") -&gt; None:\n    impls: dict[MethodName, ImplInfo] = collect_impls(plugin)\n    for name in impls:\n        self._cache_sort_plugins.pop(name, None)\n    plugin._plugin_parent = self  # noqa: SLF001\n    self.plugins[plugin.plugin_id] = plugin\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/local/#liblaf.cherries.plugins.local.Local.start","title":"start","text":"<pre><code>start(*args, **kwargs) -&gt; None\n</code></pre> Source code in <code>src/liblaf/cherries/plugins/local.py</code> <pre><code>@override\n@core.impl\ndef start(self, *args, **kwargs) -&gt; None:\n    cherries_dir: Path = self.exp_dir / \".cherries\"\n    cherries_dir.mkdir(parents=True, exist_ok=True)\n    (cherries_dir / \".gitignore\").write_text(\"*\\n\")\n    self.folder = (\n        cherries_dir\n        / self.entrypoint.stem\n        / self.start_time.strftime(\"%Y-%m-%dT%H%M%S\")\n    )\n    entrypoint: Path = self.entrypoint\n    self.log_asset(entrypoint, f\"src/{entrypoint.name}\")\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/local/#liblaf.cherries.plugins.local.Local.start_time","title":"start_time","text":"<pre><code>start_time() -&gt; datetime\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@plugin_cached_property\ndef start_time(self) -&gt; datetime.datetime:\n    return datetime.datetime.now().astimezone()\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/local/#liblaf.cherries.plugins.local.Local.url","title":"url","text":"<pre><code>url() -&gt; str\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@plugin_property\ndef url(self) -&gt; str:\n    return self.plugin_root.get_url()\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/logging/","title":"logging","text":""},{"location":"reference/liblaf/cherries/plugins/logging/#liblaf.cherries.plugins.logging","title":"liblaf.cherries.plugins.logging","text":"<p>Classes:</p> <ul> <li> <code>Logging</code>           \u2013            </li> </ul>"},{"location":"reference/liblaf/cherries/plugins/logging/#liblaf.cherries.plugins.logging.Logging","title":"Logging","text":"<p>               Bases: <code>Run</code></p> <p>Parameters:</p> <ul> <li> <code>plugins</code>               (<code>dict[PluginId, str]</code>, default:                   <code>&lt;class 'dict'&gt;</code> )           \u2013            <p>dict() -&gt; new empty dictionary dict(mapping) -&gt; new dictionary initialized from a mapping object\u2019s     (key, value) pairs dict(iterable) -&gt; new dictionary initialized as if via:     d = {}     for k, v in iterable:         d[k] = v dict(**kwargs) -&gt; new dictionary initialized with the name=value pairs     in the keyword argument list.  For example:  dict(one=1, two=2)</p> </li> </ul> <p>Methods:</p> <ul> <li> <code>data_dir</code>             \u2013              </li> <li> <code>delegate</code>             \u2013              </li> <li> <code>end</code>             \u2013              </li> <li> <code>entrypoint</code>             \u2013              </li> <li> <code>exp_dir</code>             \u2013              </li> <li> <code>exp_name</code>             \u2013              </li> <li> <code>get_others</code>             \u2013              </li> <li> <code>get_params</code>             \u2013              </li> <li> <code>get_url</code>             \u2013              </li> <li> <code>log_asset</code>             \u2013              </li> <li> <code>log_input</code>             \u2013              </li> <li> <code>log_metric</code>             \u2013              </li> <li> <code>log_metrics</code>             \u2013              </li> <li> <code>log_other</code>             \u2013              </li> <li> <code>log_others</code>             \u2013              </li> <li> <code>log_output</code>             \u2013              </li> <li> <code>log_parameter</code>             \u2013              </li> <li> <code>log_parameters</code>             \u2013              </li> <li> <code>log_temporary</code>             \u2013              </li> <li> <code>params</code>             \u2013              </li> <li> <code>project_dir</code>             \u2013              </li> <li> <code>project_name</code>             \u2013              </li> <li> <code>register</code>             \u2013              </li> <li> <code>start</code>             \u2013              </li> <li> <code>start_time</code>             \u2013              </li> <li> <code>url</code>             \u2013              </li> </ul> <p>Attributes:</p> <ul> <li> <code>log_file</code>               (<code>Path</code>)           \u2013            </li> <li> <code>plugin_id</code>               (<code>str</code>)           \u2013            </li> <li> <code>plugin_root</code>               (<code>Self</code>)           \u2013            </li> <li> <code>plugins</code>               (<code>dict[PluginId, Plugin]</code>)           \u2013            </li> </ul>"},{"location":"reference/liblaf/cherries/plugins/logging/#liblaf.cherries.plugins.logging.Logging.log_file","title":"log_file  <code>property</code>","text":"<pre><code>log_file: Path\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/logging/#liblaf.cherries.plugins.logging.Logging.plugin_id","title":"plugin_id  <code>property</code>","text":"<pre><code>plugin_id: str\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/logging/#liblaf.cherries.plugins.logging.Logging.plugin_root","title":"plugin_root  <code>property</code>","text":"<pre><code>plugin_root: Self\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/logging/#liblaf.cherries.plugins.logging.Logging.plugins","title":"plugins  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>plugins: dict[PluginId, Plugin] = field(\n    factory=dict, kw_only=True\n)\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/logging/#liblaf.cherries.plugins.logging.Logging.data_dir","title":"data_dir","text":"<pre><code>data_dir() -&gt; Path\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@plugin_cached_property\ndef data_dir(self) -&gt; Path:\n    return path_utils.data()\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/logging/#liblaf.cherries.plugins.logging.Logging.delegate","title":"delegate","text":"<pre><code>delegate(\n    method: MethodName,\n    args: Sequence[Any] = (),\n    kwargs: Mapping[str, Any] = {},\n    *,\n    first_result: bool = False,\n) -&gt; Any\n</code></pre> Source code in <code>src/liblaf/cherries/core/_plugin.py</code> <pre><code>def delegate(\n    self,\n    method: MethodName,\n    args: Sequence[Any] = (),\n    kwargs: Mapping[str, Any] = {},\n    *,\n    first_result: bool = False,\n) -&gt; Any:\n    __tracebackhide__ = True\n    plugins: Sequence[Plugin] = self._plugins_sort(method)\n    if not plugins:\n        if first_result:\n            return None\n        return []\n    results: list[Any] = []\n    for plugin in plugins:\n        try:\n            result: Any = getattr(plugin, method)(*args, **kwargs)\n        except BaseException as e:\n            if isinstance(e, (KeyboardInterrupt, SystemExit)):\n                raise\n            logger.exception(\"Plugin {}\", plugin.plugin_id)\n        else:\n            if result is None:\n                continue\n            if first_result:\n                return result\n            results.append(result)\n    return results\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/logging/#liblaf.cherries.plugins.logging.Logging.end","title":"end","text":"<pre><code>end(*args, **kwargs) -&gt; None\n</code></pre> Source code in <code>src/liblaf/cherries/plugins/logging.py</code> <pre><code>@override\n@core.impl\ndef end(self, *args, **kwargs) -&gt; None:\n    self.plugin_root.log_asset(self.log_file, \"run.log\")\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/logging/#liblaf.cherries.plugins.logging.Logging.entrypoint","title":"entrypoint","text":"<pre><code>entrypoint() -&gt; Path\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@plugin_cached_property\ndef entrypoint(self) -&gt; Path:\n    return path_utils.entrypoint()\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/logging/#liblaf.cherries.plugins.logging.Logging.exp_dir","title":"exp_dir","text":"<pre><code>exp_dir() -&gt; Path\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@plugin_cached_property\ndef exp_dir(self) -&gt; Path:\n    return path_utils.exp_dir()\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/logging/#liblaf.cherries.plugins.logging.Logging.exp_name","title":"exp_name","text":"<pre><code>exp_name() -&gt; str\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@plugin_cached_property\ndef exp_name(self) -&gt; str:\n    return (\n        self.entrypoint.relative_to(self.project_dir)\n        .as_posix()\n        .removeprefix(\"exp/\")\n    )\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/logging/#liblaf.cherries.plugins.logging.Logging.get_others","title":"get_others","text":"<pre><code>get_others() -&gt; Mapping[str, Any]\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@spec(first_result=True)\ndef get_others(self) -&gt; Mapping[str, Any]: ...\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/logging/#liblaf.cherries.plugins.logging.Logging.get_params","title":"get_params","text":"<pre><code>get_params() -&gt; Mapping[str, Any]\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@spec(first_result=True)\ndef get_params(self) -&gt; Mapping[str, Any]: ...\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/logging/#liblaf.cherries.plugins.logging.Logging.get_url","title":"get_url","text":"<pre><code>get_url() -&gt; str\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@spec(first_result=True)\ndef get_url(self) -&gt; str: ...\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/logging/#liblaf.cherries.plugins.logging.Logging.log_asset","title":"log_asset","text":"<pre><code>log_asset(\n    path: PathLike,\n    name: PathLike | None = None,\n    *,\n    metadata: Mapping[str, Any] | None = None,\n    **kwargs,\n) -&gt; None\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@spec\ndef log_asset(\n    self,\n    path: PathLike,\n    name: PathLike | None = None,\n    *,\n    metadata: Mapping[str, Any] | None = None,\n    **kwargs,\n) -&gt; None: ...\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/logging/#liblaf.cherries.plugins.logging.Logging.log_input","title":"log_input","text":"<pre><code>log_input(\n    path: PathLike,\n    name: PathLike | None = None,\n    *,\n    metadata: Mapping[str, Any] | None = None,\n    **kwargs,\n) -&gt; None\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@spec\ndef log_input(\n    self,\n    path: PathLike,\n    name: PathLike | None = None,\n    *,\n    metadata: Mapping[str, Any] | None = None,\n    **kwargs,\n) -&gt; None: ...\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/logging/#liblaf.cherries.plugins.logging.Logging.log_metric","title":"log_metric","text":"<pre><code>log_metric(\n    name: str,\n    value: Any,\n    /,\n    step: int | None = None,\n    epoch: int | None = None,\n    **kwargs,\n) -&gt; None\n</code></pre> Source code in <code>src/liblaf/cherries/plugins/logging.py</code> <pre><code>@override\n@core.impl\ndef log_metric(\n    self,\n    name: str,\n    value: Any,\n    /,\n    step: int | None = None,\n    epoch: int | None = None,\n    **kwargs,\n) -&gt; None:\n    __tracebackhide__ = True\n    if step is None:\n        logger.info(\"{name}: {value}\", name=name, value=value)\n    else:\n        logger.info(\n            \"step: {step}, {name}: {value}\", step=step, name=name, value=value\n        )\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/logging/#liblaf.cherries.plugins.logging.Logging.log_metrics","title":"log_metrics","text":"<pre><code>log_metrics(\n    dic: Mapping[str, Any],\n    /,\n    prefix: str | None = None,\n    step: int | None = None,\n    epoch: int | None = None,\n    **kwargs,\n) -&gt; None\n</code></pre> Source code in <code>src/liblaf/cherries/plugins/logging.py</code> <pre><code>@override\n@core.impl\ndef log_metrics(\n    self,\n    dic: Mapping[str, Any],\n    /,\n    prefix: str | None = None,\n    step: int | None = None,\n    epoch: int | None = None,\n    **kwargs,\n) -&gt; None:\n    __tracebackhide__ = True\n    if step is None:\n        logger.info(\"{dic}\", dic=dic)\n    else:\n        logger.info(\"step: {step}, {dic}\", step=step, dic=dic)\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/logging/#liblaf.cherries.plugins.logging.Logging.log_other","title":"log_other","text":"<pre><code>log_other(key: Any, value: Any, /, **kwargs) -&gt; None\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@spec\ndef log_other(self, key: Any, value: Any, /, **kwargs) -&gt; None: ...\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/logging/#liblaf.cherries.plugins.logging.Logging.log_others","title":"log_others","text":"<pre><code>log_others(\n    dictionary: Mapping[Any, Any], /, **kwargs\n) -&gt; None\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@spec\ndef log_others(self, dictionary: Mapping[Any, Any], /, **kwargs) -&gt; None: ...\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/logging/#liblaf.cherries.plugins.logging.Logging.log_output","title":"log_output","text":"<pre><code>log_output(\n    path: PathLike,\n    name: PathLike | None = None,\n    *,\n    metadata: Mapping[str, Any] | None = None,\n    **kwargs,\n) -&gt; None\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@spec\ndef log_output(\n    self,\n    path: PathLike,\n    name: PathLike | None = None,\n    *,\n    metadata: Mapping[str, Any] | None = None,\n    **kwargs,\n) -&gt; None: ...\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/logging/#liblaf.cherries.plugins.logging.Logging.log_parameter","title":"log_parameter","text":"<pre><code>log_parameter(\n    name: Any,\n    value: Any,\n    /,\n    step: int | None = None,\n    **kwargs,\n) -&gt; None\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@spec\ndef log_parameter(\n    self, name: Any, value: Any, /, step: int | None = None, **kwargs\n) -&gt; None: ...\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/logging/#liblaf.cherries.plugins.logging.Logging.log_parameters","title":"log_parameters","text":"<pre><code>log_parameters(\n    parameters: Mapping[Any, Any],\n    /,\n    prefix: str | None = None,\n    step: int | None = None,\n    **kwargs,\n) -&gt; None\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@spec\ndef log_parameters(\n    self,\n    parameters: Mapping[Any, Any],\n    /,\n    prefix: str | None = None,\n    step: int | None = None,\n    **kwargs,\n) -&gt; None: ...\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/logging/#liblaf.cherries.plugins.logging.Logging.log_temporary","title":"log_temporary","text":"<pre><code>log_temporary(\n    path: PathLike,\n    name: PathLike | None = None,\n    *,\n    metadata: Mapping[str, Any] | None = None,\n    **kwargs,\n) -&gt; None\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@spec\ndef log_temporary(\n    self,\n    path: PathLike,\n    name: PathLike | None = None,\n    *,\n    metadata: Mapping[str, Any] | None = None,\n    **kwargs,\n) -&gt; None: ...\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/logging/#liblaf.cherries.plugins.logging.Logging.params","title":"params","text":"<pre><code>params() -&gt; Mapping[str, Any]\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@plugin_property\ndef params(self) -&gt; Mapping[str, Any]:\n    return self.plugin_root.get_params()\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/logging/#liblaf.cherries.plugins.logging.Logging.project_dir","title":"project_dir","text":"<pre><code>project_dir() -&gt; Path\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@plugin_cached_property\ndef project_dir(self) -&gt; Path:\n    return path_utils.project_dir()\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/logging/#liblaf.cherries.plugins.logging.Logging.project_name","title":"project_name","text":"<pre><code>project_name() -&gt; str | None\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@plugin_cached_property\ndef project_name(self) -&gt; str | None:\n    return self.project_dir.name\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/logging/#liblaf.cherries.plugins.logging.Logging.register","title":"register","text":"<pre><code>register(plugin: Plugin) -&gt; None\n</code></pre> Source code in <code>src/liblaf/cherries/core/_plugin.py</code> <pre><code>def register(self, plugin: \"Plugin\") -&gt; None:\n    impls: dict[MethodName, ImplInfo] = collect_impls(plugin)\n    for name in impls:\n        self._cache_sort_plugins.pop(name, None)\n    plugin._plugin_parent = self  # noqa: SLF001\n    self.plugins[plugin.plugin_id] = plugin\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/logging/#liblaf.cherries.plugins.logging.Logging.start","title":"start","text":"<pre><code>start(*args, **kwargs) -&gt; None\n</code></pre> Source code in <code>src/liblaf/cherries/plugins/logging.py</code> <pre><code>@override\n@core.impl\ndef start(self, *args, **kwargs) -&gt; None:\n    grapes.logging.init(enable_link=False, file=self.log_file)\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/logging/#liblaf.cherries.plugins.logging.Logging.start_time","title":"start_time","text":"<pre><code>start_time() -&gt; datetime\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@plugin_cached_property\ndef start_time(self) -&gt; datetime.datetime:\n    return datetime.datetime.now().astimezone()\n</code></pre>"},{"location":"reference/liblaf/cherries/plugins/logging/#liblaf.cherries.plugins.logging.Logging.url","title":"url","text":"<pre><code>url() -&gt; str\n</code></pre> Source code in <code>src/liblaf/cherries/core/_run.py</code> <pre><code>@plugin_property\ndef url(self) -&gt; str:\n    return self.plugin_root.get_url()\n</code></pre>"},{"location":"reference/liblaf/cherries/profiles/","title":"profiles","text":""},{"location":"reference/liblaf/cherries/profiles/#liblaf.cherries.profiles","title":"liblaf.cherries.profiles","text":"<p>Type Aliases:</p> <ul> <li> <code>ProfileLike</code>           \u2013            </li> <li> <code>ProfileName</code>           \u2013            </li> </ul> <p>Classes:</p> <ul> <li> <code>Profile</code>           \u2013            </li> <li> <code>ProfileDefault</code>           \u2013            </li> <li> <code>ProfilePlayground</code>           \u2013            </li> </ul> <p>Functions:</p> <ul> <li> <code>factory</code>             \u2013              </li> </ul>"},{"location":"reference/liblaf/cherries/profiles/#liblaf.cherries.profiles.ProfileLike","title":"ProfileLike","text":"<pre><code>ProfileLike = ProfileName | Profile | type[Profile]\n</code></pre>"},{"location":"reference/liblaf/cherries/profiles/#liblaf.cherries.profiles.ProfileName","title":"ProfileName","text":"<pre><code>ProfileName = Literal['default', 'playground'] | str\n</code></pre>"},{"location":"reference/liblaf/cherries/profiles/#liblaf.cherries.profiles.Profile","title":"Profile","text":"<p>               Bases: <code>ABC</code>, <code>Registry</code></p> <p>Methods:</p> <ul> <li> <code>init</code>             \u2013              </li> </ul>"},{"location":"reference/liblaf/cherries/profiles/#liblaf.cherries.profiles.Profile.init","title":"init  <code>abstractmethod</code>","text":"<pre><code>init() -&gt; Run\n</code></pre> Source code in <code>src/liblaf/cherries/profiles/_abc.py</code> <pre><code>@abc.abstractmethod\ndef init(self) -&gt; core.Run: ...\n</code></pre>"},{"location":"reference/liblaf/cherries/profiles/#liblaf.cherries.profiles.ProfileDefault","title":"ProfileDefault","text":"<p>               Bases: <code>Profile</code></p> <p>Methods:</p> <ul> <li> <code>init</code>             \u2013              </li> </ul>"},{"location":"reference/liblaf/cherries/profiles/#liblaf.cherries.profiles.ProfileDefault.init","title":"init","text":"<pre><code>init() -&gt; Run\n</code></pre> Source code in <code>src/liblaf/cherries/profiles/_default.py</code> <pre><code>@override  # impl Profile\ndef init(self) -&gt; core.Run:\n    run: core.Run = core.active_run\n    run.register(plugins.Comet())\n    run.register(plugins.Git())\n    run.register(plugins.Local())\n    run.register(plugins.Logging())\n    return run\n</code></pre>"},{"location":"reference/liblaf/cherries/profiles/#liblaf.cherries.profiles.ProfilePlayground","title":"ProfilePlayground","text":"<p>               Bases: <code>Profile</code></p> <p>Methods:</p> <ul> <li> <code>init</code>             \u2013              </li> </ul>"},{"location":"reference/liblaf/cherries/profiles/#liblaf.cherries.profiles.ProfilePlayground.init","title":"init","text":"<pre><code>init() -&gt; Run\n</code></pre> Source code in <code>src/liblaf/cherries/profiles/_playground.py</code> <pre><code>@override  # impl Profile\ndef init(self) -&gt; core.Run:\n    run: core.Run = core.active_run\n    run.register(plugins.Comet(disabled=True))\n    run.register(plugins.Git(commit=False))\n    run.register(plugins.Local())\n    run.register(plugins.Logging())\n    return run\n</code></pre>"},{"location":"reference/liblaf/cherries/profiles/#liblaf.cherries.profiles.factory","title":"factory","text":"<pre><code>factory(profile: ProfileLike | None = None) -&gt; Profile\n</code></pre> Source code in <code>src/liblaf/cherries/profiles/_factory.py</code> <pre><code>def factory(profile: ProfileLike | None = None) -&gt; Profile:\n    if profile is None and env.bool(\"DEBUG\", False):\n        profile = \"playground\"\n    if profile is None:\n        profile = env.str(\"PROFILE\", \"default\")\n    if isinstance(profile, str):\n        return Profile[profile]()\n    if isinstance(profile, Profile):\n        return profile\n    return profile()\n</code></pre>"},{"location":"reference/liblaf/cherries/typing/","title":"typing","text":""},{"location":"reference/liblaf/cherries/typing/#liblaf.cherries.typing","title":"liblaf.cherries.typing","text":"<p>Type Aliases:</p> <ul> <li> <code>PathLike</code>           \u2013            </li> </ul>"},{"location":"reference/liblaf/cherries/typing/#liblaf.cherries.typing.PathLike","title":"PathLike","text":"<pre><code>PathLike = str | PathLike[str]\n</code></pre>"},{"location":"reference/liblaf/cherries/utils/","title":"utils","text":""},{"location":"reference/liblaf/cherries/utils/#liblaf.cherries.utils","title":"liblaf.cherries.utils","text":"<p>Functions:</p> <ul> <li> <code>cache</code>             \u2013              </li> </ul>"},{"location":"reference/liblaf/cherries/utils/#liblaf.cherries.utils.cache","title":"cache","text":"<pre><code>cache(fn: Callable[P, T]) -&gt; Callable[P, T]\n</code></pre> Source code in <code>src/liblaf/cherries/utils/_functools.py</code> <pre><code>def cache[**P, T](fn: Callable[P, T]) -&gt; Callable[P, T]:\n    return functools.cache(fn)  # pyright: ignore[reportReturnType]\n</code></pre>"}]}